data\dao\HibernateDataContext.java
package data.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Projections;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



public class HibernateDataContext implements  IHibernateDataContext {
	
	 private static final Logger log = LoggerFactory.getLogger(HibernateDataContext.class);
	 private Session session;
	 private Transaction tran;
	 //private boolean IsInTransaction;
	 

//	public void setIsInTransaction(boolean isInTransaction) {
//		IsInTransaction = isInTransaction;
//	}

	public HibernateDataContext()
	 {
		 session=HibernateSessionFactory.getSession();
		 tran=null;
	 }
	 
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#save(java.lang.Object)
	 */

	public void save(Object item) {
		// TODO Auto-generated method stub
		log.debug("saving item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}
		
		session.save(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("save successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
		        log.error("save faile", re);
		        throw re;
			}
		}
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#delete(java.lang.Object)
	 */

	public void delete(Object item ) {
		// TODO Auto-generated method stub
		log.debug("deleting item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.delete(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("delete successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("delete failed", re);
		        throw re;
			}
		}
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#update(java.lang.Object)
	 */

	public void update(Object item)
	{
		//先清空一下Session
		session.clear();
		// TODO Auto-generated method stub
		log.debug("updateing item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}
		
		session.update(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("update successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("update failed", re);
		        throw re;
			}
		}
	}
	
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findById(java.lang.Class, java.lang.String)
	 */
	@SuppressWarnings("unchecked")

	public<T> T findById(Class<T> clazz,Serializable id)
	{
		log.debug("getting Object instance with id: " + id);
		try
		{
			//T t=clazz.newInstance();
			return (T)session.get(clazz,id);
			//return t;
		}
		catch (RuntimeException re)
		{
			log.error("findById failed", re);
			throw re;
		}
		
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findByExample(java.lang.Object)
	 */

	public<T> List<T> findByExample(Object instance) {
		log.debug("finding instance instance by example");
		try {
          @SuppressWarnings("unchecked")
		List<T> results = (List<T>)getSession().createCriteria(instance.getClass())
          				.add(Example.create(instance)).list();
                  //.createCriteria("Student")
                  //.add(Example.create(instance))

          log.debug("find by example successful, result size: " + results.size());
          return results;
      } catch (RuntimeException re) {
          log.error("find by example failed", re);
          throw re;
      }
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findByProperty(java.lang.Class, java.lang.String, java.lang.Object)
	 */

	public<T> List<T> findByProperty(Class<T> clazz,String propertyName, Object value) {
		log.debug("finding Student instance with property: " + propertyName
	            + ", value: " + value);
	      try {
	    	  String queryString = "from "+clazz.getName()+" as model where model." 
	         						+ propertyName + "= ?";
	    	  System.out.println(queryString);
	         Query queryObject = getSession().createQuery(queryString);
			 queryObject.setParameter(0, value);
			 return (List<T>)queryObject.list();
	      } catch (RuntimeException re) {
	         log.error("find by property name failed", re);
	         throw re;
	      }
	}


	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findAll(java.lang.Class)
	 */
	
	public<T> List<T> findAll(Class<T> clazz) {
		log.debug("finding all object instances");
		try {
			String queryString = "from "+clazz.getName();
	         Query queryObject = getSession().createQuery(queryString);
			 return (List<T>)queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findAll(java.lang.Class, int, int)
	 */
	public<T> List<T> findAll(Class<T> clazz,int pageIndex, int pageSize )
	{
		log.debug("finding all object instances");
		try {
			String queryString = "from "+clazz.getName();
	         Query queryObject = getSession().createQuery(queryString);
	         queryObject.setFirstResult(pageIndex);
	         queryObject.setMaxResults(pageSize);
			 return (List<T>)queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	/*
	 * 根据HQL语句查询对象
	 */
	public<T> List<T> queryByHql(String hql)
	{
		log.debug("query object by hql");
		try{			
			Query queryObject=getSession().createQuery(hql);
			return (List<T>)queryObject.list();				
		}catch (RuntimeException re) {
			log.error("query failed", re);
			throw re;
		}
			
	}

	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#merge(java.lang.Class, java.lang.Object)
	 */
	
	public<T> T merge(Class<T> clazz,Object detachedInstance) {
      log.debug("merging object instance");
    	  if(detachedInstance==null)
	  		{
	  			log.debug("item is null");
	  			throw(new NullPointerException() );
	  		}
	  		boolean tranFlag=false;
	  		if(!IsInTransaction())
	  		{
	  			this.BeginTransaction();
	  			tranFlag=true;
	  		}
          @SuppressWarnings("unchecked")
		T result = (T)session.merge(detachedInstance);          
         if(!IsInTransaction()||tranFlag)
         {
        	 try           			
        	 {          				
        		 this.Commit();         				
        		 //session.flush();         				
        		 log.debug("merge successful");         			
        	 }       			
        	 catch(RuntimeException re)          			
        	 {          				
        		 this.Rollback();          				
        		 log.error("merge failed", re);         		       
        		 throw re;		
        	 }
         }
		return result;
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#getCount(java.lang.Class)
	 */
	public<T> int getCount(Class<T> clazz)
	{
		Criteria  criteria=session.createCriteria(clazz);
		criteria.setProjection(Projections.rowCount()).uniqueResult();
		criteria.setProjection(null);    
		criteria.list();
		 return (Integer)criteria.list().size();
	}
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#attachDirty(java.lang.Object)
	 */
	
	public void attachDirty(Object item) {
		
		log.debug("attaching dirty object instance");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.saveOrUpdate(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("attach successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("attach failed", re);
		        throw re;
			}
		}

	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#attachClean(java.lang.Object)
	 */
	
	public void attachClean(Object item) {

		log.debug("attaching clean object instance");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.lock(item, LockMode.NONE);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("attach successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("attach failed", re);
		        throw re;
			}
		}


	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#getSession()
	 */
	
	public Session getSession() {

		if(this.session!=null)
		{
			return this.session;
		}
		else
		{
			return HibernateSessionFactory.getSession();
		}
	}
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#IsInTransaction()
	 */
	 public boolean IsInTransaction() {
			return tran != null && tran.isActive();
		}

	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#BeginTransaction()
	 */
	 public void BeginTransaction() 
	 {
		 log.debug("Begin a transaction");
		 if(IsInTransaction())
		 {
			 log.debug("A transaction is already opened");
			 throw(new IllegalStateException ("A transaction is already opened") );
		 }
		 else
		 {
			 try
             {
                 tran = session.beginTransaction();
                 log.debug("Openning a transaction  successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Open a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#Commit()
	 */
	 public void Commit() 
	 {
		 if(!IsInTransaction())
		 {
			 log.debug("Operation requires an active transaction");
			 throw(new IllegalStateException ("Operation requires an active transaction") );
		 }
		 else
		 {
			 try
             {
                 tran.commit();                
                 log.debug("Commit successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Commit a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#Rollback()
	 */
	 public void Rollback()
	 {
		 if(!IsInTransaction())
		 {
			 log.debug("Operation requires an active transaction");
			 throw(new IllegalStateException ("Operation requires an active transaction") );
		 }
		 else
		 {
			 try
             {
                 tran.commit();                
                 log.debug("Commit successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Commit a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#IsDirty()
	 */
	 public boolean IsDirty()
	 {
		 return session.isDirty();
	 }
	 
	//value[i]为第i个查询条件propertyName[i]的值          （本方法已通过测试）  
	 
		/*多条件查询,查询条件的值为空时自动除去该条件  
		* rigor为true时采用精确查询  
		*/ 
		public List searchByPropertys(String model,String[]propertyName,Object[] value,boolean rigor){    
		    StringBuffer sqlBuffer = new StringBuffer();  
		    String ralation=" like ";  
		    if(rigor){  
		     ralation=" = ";  
		    }  
		    sqlBuffer.append("from "+model+" as model\n");  
		    int len=propertyName.length;  
		    List list=new ArrayList();  
		    boolean first=true;  
		    for(int i=0;i< len;i++){  
		     if(value[i]!=null){  
		     if(first){      
		      sqlBuffer.append(" where "+ "model."+ propertyName[i] + ralation+" ?\n");      
		      list.add(value[i]);  
		      first=false;  
		     }else{      
		      sqlBuffer.append(" and "+ "model."+ propertyName[i] +ralation+ " ?\n");      
		      list.add(value[i]);  
		     }  
		    }  
		    }  
		    
		     try { 
		    	 Query queryObject = session.createQuery(sqlBuffer.toString());  
		             for(int i=0;i< list.size();i++){  
		             if(rigor){  
		              queryObject.setParameter(i, list.get(i));  
		             }else{  
		              queryObject.setParameter(i, "%"+list.get(i)+"%");  
		             }  
		             
		      }  
		            
		            list=queryObject.list();  
		            //closeSession(session);  
		      return list;  
		         } catch (RuntimeException re) {  
		            log.error("find by property name failed", re);  
		            throw re;  
		         }  
		 
		}
		
		/*多条件查询,可以使用Between条件,查询条件的值为空时自动除去该条件  
		* rigor为true时采用精确查询  
		*/ 
		public List searchByPropertysBetween(String model,String[]propertyName,Object[] value,boolean rigor,String BetweenProperty,Object[] valueObject){    
		    System.out.println("序列化"+value[0].toString());
			StringBuffer sqlBuffer = new StringBuffer();  
		    String ralation=" like ";  
		    if(rigor){  
		     ralation=" = ";  
		    }  
		    sqlBuffer.append("from "+model+" as model\n");  
		    int len=propertyName.length;  
		    List list=new ArrayList();  
		    boolean first=true;  
		   for(int i=0;i< len;i++){  
		     if(value[i]!=null){  
		     if(first){      
		      sqlBuffer.append(" where "+ "model."+ propertyName[i] + ralation+" ?\n");      
		      list.add(value[i]);  
		      first=false;  
		     }else{      
		      sqlBuffer.append(" and "+ "model."+ propertyName[i] +ralation+ " ?\n");      
		      list.add(value[i]);  
		     }  
		    }  
		    }  
		   System.out.println(valueObject[0].toString());
		   System.out.println(valueObject[1].toString());
		    sqlBuffer.append(" and model."+BetweenProperty +" between ? and ? \n");
		    list.add(valueObject[0]);
		    list.add(valueObject[1]);
		     try { 
		    	 Query queryObject = session.createQuery(sqlBuffer.toString());  
		             for(int i=0;i< list.size();i++){  
		             if(rigor){  
		              queryObject.setParameter(i, list.get(i));  
		             }else{  
		              queryObject.setParameter(i, "%"+list.get(i)+"%");  
		             }  
		             
		      }  
		       System.out.println(sqlBuffer.toString());     
		            list=queryObject.list();  
		            //closeSession(session);  
		      return list;  
		         } catch (RuntimeException re) {  
		            log.error("find by property name failed", re);  
		            throw re;  
		         }  
		 
		}
}

data\dao\HibernateDataContext.java
package data.dao;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Projections;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



public class HibernateDataContext implements  IHibernateDataContext {
	
	 private static final Logger log = LoggerFactory.getLogger(HibernateDataContext.class);
	 private Session session;
	 private Transaction tran;
	 //private boolean IsInTransaction;
	 

//	public void setIsInTransaction(boolean isInTransaction) {
//		IsInTransaction = isInTransaction;
//	}

	public HibernateDataContext()
	 {
		 session=HibernateSessionFactory.getSession();
		 tran=null;
	 }
	 
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#save(java.lang.Object)
	 */

	public void save(Object item) {
		// TODO Auto-generated method stub
		log.debug("saving item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}
		
		session.save(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("save successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
		        log.error("save faile", re);
		        throw re;
			}
		}
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#delete(java.lang.Object)
	 */

	public void delete(Object item ) {
		// TODO Auto-generated method stub
		log.debug("deleting item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.delete(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("delete successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("delete failed", re);
		        throw re;
			}
		}
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#update(java.lang.Object)
	 */

	public void update(Object item)
	{
		//先清空一下Session
		session.clear();
		// TODO Auto-generated method stub
		log.debug("updateing item");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}
		
		session.update(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("update successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("update failed", re);
		        throw re;
			}
		}
	}
	
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findById(java.lang.Class, java.lang.String)
	 */
	@SuppressWarnings("unchecked")

	public<T> T findById(Class<T> clazz,Serializable id)
	{
		log.debug("getting Object instance with id: " + id);
		try
		{
			//T t=clazz.newInstance();
			return (T)session.get(clazz,id);
			//return t;
		}
		catch (RuntimeException re)
		{
			log.error("findById failed", re);
			throw re;
		}
		
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findByExample(java.lang.Object)
	 */

	public<T> List<T> findByExample(Object instance) {
		log.debug("finding instance instance by example");
		try {
          @SuppressWarnings("unchecked")
		List<T> results = (List<T>)getSession().createCriteria(instance.getClass())
          				.add(Example.create(instance)).list();
                  //.createCriteria("Student")
                  //.add(Example.create(instance))

          log.debug("find by example successful, result size: " + results.size());
          return results;
      } catch (RuntimeException re) {
          log.error("find by example failed", re);
          throw re;
      }
		
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findByProperty(java.lang.Class, java.lang.String, java.lang.Object)
	 */

	public<T> List<T> findByProperty(Class<T> clazz,String propertyName, Object value) {
		log.debug("finding Student instance with property: " + propertyName
	            + ", value: " + value);
	      try {
	    	  String queryString = "from "+clazz.getName()+" as model where model." 
	         						+ propertyName + "= ?";
	    	  System.out.println(queryString);
	         Query queryObject = getSession().createQuery(queryString);
			 queryObject.setParameter(0, value);
			 return (List<T>)queryObject.list();
	      } catch (RuntimeException re) {
	         log.error("find by property name failed", re);
	         throw re;
	      }
	}


	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findAll(java.lang.Class)
	 */
	
	public<T> List<T> findAll(Class<T> clazz) {
		log.debug("finding all object instances");
		try {
			String queryString = "from "+clazz.getName();
	         Query queryObject = getSession().createQuery(queryString);
			 return (List<T>)queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#findAll(java.lang.Class, int, int)
	 */
	public<T> List<T> findAll(Class<T> clazz,int pageIndex, int pageSize )
	{
		log.debug("finding all object instances");
		try {
			String queryString = "from "+clazz.getName();
	         Query queryObject = getSession().createQuery(queryString);
	         queryObject.setFirstResult(pageIndex);
	         queryObject.setMaxResults(pageSize);
			 return (List<T>)queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	/*
	 * 根据HQL语句查询对象
	 */
	public<T> List<T> queryByHql(String hql)
	{
		log.debug("query object by hql");
		try{			
			Query queryObject=getSession().createQuery(hql);
			return (List<T>)queryObject.list();				
		}catch (RuntimeException re) {
			log.error("query failed", re);
			throw re;
		}
			
	}

	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#merge(java.lang.Class, java.lang.Object)
	 */
	
	public<T> T merge(Class<T> clazz,Object detachedInstance) {
      log.debug("merging object instance");
    	  if(detachedInstance==null)
	  		{
	  			log.debug("item is null");
	  			throw(new NullPointerException() );
	  		}
	  		boolean tranFlag=false;
	  		if(!IsInTransaction())
	  		{
	  			this.BeginTransaction();
	  			tranFlag=true;
	  		}
          @SuppressWarnings("unchecked")
		T result = (T)session.merge(detachedInstance);          
         if(!IsInTransaction()||tranFlag)
         {
        	 try           			
        	 {          				
        		 this.Commit();         				
        		 //session.flush();         				
        		 log.debug("merge successful");         			
        	 }       			
        	 catch(RuntimeException re)          			
        	 {          				
        		 this.Rollback();          				
        		 log.error("merge failed", re);         		       
        		 throw re;		
        	 }
         }
		return result;
	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#getCount(java.lang.Class)
	 */
	public<T> int getCount(Class<T> clazz)
	{
		Criteria  criteria=session.createCriteria(clazz);
		criteria.setProjection(Projections.rowCount()).uniqueResult();
		criteria.setProjection(null);    
		criteria.list();
		 return (Integer)criteria.list().size();
	}
	
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#attachDirty(java.lang.Object)
	 */
	
	public void attachDirty(Object item) {
		
		log.debug("attaching dirty object instance");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.saveOrUpdate(item);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("attach successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("attach failed", re);
		        throw re;
			}
		}

	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#attachClean(java.lang.Object)
	 */
	
	public void attachClean(Object item) {

		log.debug("attaching clean object instance");
		if(item==null)
		{
			log.debug("item is null");
			throw(new NullPointerException() );
		}
		boolean tranFlag=false;
		if(!IsInTransaction())
		{
			this.BeginTransaction();
			tranFlag=true;
		}

		session.lock(item, LockMode.NONE);

		if(!IsInTransaction()||tranFlag)
		{
			try 
			{
				this.Commit();
				//session.flush();
				log.debug("attach successful");
			}
			catch(RuntimeException re)
			{
				this.Rollback();
				log.error("attach failed", re);
		        throw re;
			}
		}


	}

	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#getSession()
	 */
	
	public Session getSession() {

		if(this.session!=null)
		{
			return this.session;
		}
		else
		{
			return HibernateSessionFactory.getSession();
		}
	}
	/* (non-Javadoc)
	 * @see dao.IHibernateDataContext#IsInTransaction()
	 */
	 public boolean IsInTransaction() {
			return tran != null && tran.isActive();
		}

	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#BeginTransaction()
	 */
	 public void BeginTransaction() 
	 {
		 log.debug("Begin a transaction");
		 if(IsInTransaction())
		 {
			 log.debug("A transaction is already opened");
			 throw(new IllegalStateException ("A transaction is already opened") );
		 }
		 else
		 {
			 try
             {
                 tran = session.beginTransaction();
                 log.debug("Openning a transaction  successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Open a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#Commit()
	 */
	 public void Commit() 
	 {
		 if(!IsInTransaction())
		 {
			 log.debug("Operation requires an active transaction");
			 throw(new IllegalStateException ("Operation requires an active transaction") );
		 }
		 else
		 {
			 try
             {
                 tran.commit();                
                 log.debug("Commit successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Commit a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#Rollback()
	 */
	 public void Rollback()
	 {
		 if(!IsInTransaction())
		 {
			 log.debug("Operation requires an active transaction");
			 throw(new IllegalStateException ("Operation requires an active transaction") );
		 }
		 else
		 {
			 try
             {
                 tran.commit();                
                 log.debug("Commit successful");
             }
             catch(HibernateException ex)
             {
            	 log.error("Commit a transaction  Error");
                 throw (ex);
             }
		 }
	 }
	 
	 /* (non-Javadoc)
	 * @see dao.IHibernateDataContext#IsDirty()
	 */
	 public boolean IsDirty()
	 {
		 return session.isDirty();
	 }
	 
	//value[i]为第i个查询条件propertyName[i]的值          （本方法已通过测试）  
	 
		/*多条件查询,查询条件的值为空时自动除去该条件  
		* rigor为true时采用精确查询  
		*/ 
		public List searchByPropertys(String model,String[]propertyName,Object[] value,boolean rigor){    
		    StringBuffer sqlBuffer = new StringBuffer();  
		    String ralation=" like ";  
		    if(rigor){  
		     ralation=" = ";  
		    }  
		    sqlBuffer.append("from "+model+" as model\n");  
		    int len=propertyName.length;  
		    List list=new ArrayList();  
		    boolean first=true;  
		    for(int i=0;i< len;i++){  
		     if(value[i]!=null){  
		     if(first){      
		      sqlBuffer.append(" where "+ "model."+ propertyName[i] + ralation+" ?\n");      
		      list.add(value[i]);  
		      first=false;  
		     }else{      
		      sqlBuffer.append(" and "+ "model."+ propertyName[i] +ralation+ " ?\n");      
		      list.add(value[i]);  
		     }  
		    }  
		    }  
		    
		     try { 
		    	 Query queryObject = session.createQuery(sqlBuffer.toString());  
		             for(int i=0;i< list.size();i++){  
		             if(rigor){  
		              queryObject.setParameter(i, list.get(i));  
		             }else{  
		              queryObject.setParameter(i, "%"+list.get(i)+"%");  
		             }  
		             
		      }  
		            
		            list=queryObject.list();  
		            //closeSession(session);  
		      return list;  
		         } catch (RuntimeException re) {  
		            log.error("find by property name failed", re);  
		            throw re;  
		         }  
		 
		}
		
		/*多条件查询,可以使用Between条件,查询条件的值为空时自动除去该条件  
		* rigor为true时采用精确查询  
		*/ 
		public List searchByPropertysBetween(String model,String[]propertyName,Object[] value,boolean rigor,String BetweenProperty,Object[] valueObject){    
		    System.out.println("序列化"+value[0].toString());
			StringBuffer sqlBuffer = new StringBuffer();  
		    String ralation=" like ";  
		    if(rigor){  
		     ralation=" = ";  
		    }  
		    sqlBuffer.append("from "+model+" as model\n");  
		    int len=propertyName.length;  
		    List list=new ArrayList();  
		    boolean first=true;  
		   for(int i=0;i< len;i++){  
		     if(value[i]!=null){  
		     if(first){      
		      sqlBuffer.append(" where "+ "model."+ propertyName[i] + ralation+" ?\n");      
		      list.add(value[i]);  
		      first=false;  
		     }else{      
		      sqlBuffer.append(" and "+ "model."+ propertyName[i] +ralation+ " ?\n");      
		      list.add(value[i]);  
		     }  
		    }  
		    }  
		   System.out.println(valueObject[0].toString());
		   System.out.println(valueObject[1].toString());
		    sqlBuffer.append(" and model."+BetweenProperty +" between ? and ? \n");
		    list.add(valueObject[0]);
		    list.add(valueObject[1]);
		     try { 
		    	 Query queryObject = session.createQuery(sqlBuffer.toString());  
		             for(int i=0;i< list.size();i++){  
		             if(rigor){  
		              queryObject.setParameter(i, list.get(i));  
		             }else{  
		              queryObject.setParameter(i, "%"+list.get(i)+"%");  
		             }  
		             
		      }  
		       System.out.println(sqlBuffer.toString());     
		            list=queryObject.list();  
		            //closeSession(session);  
		      return list;  
		         } catch (RuntimeException re) {  
		            log.error("find by property name failed", re);  
		            throw re;  
		         }  
		 
		}
}

data\dao\HibernateSessionFactory.java
package data.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;

/**
 * Configures and provides access to Hibernate sessions, tied to the
 * current thread of execution.  Follows the Thread Local Session
 * pattern, see {@link http://hibernate.org/42.html }.
 */
public class HibernateSessionFactory {

    /** 
     * Location of hibernate.cfg.xml file.
     * Location should be on the classpath as Hibernate uses  
     * #resourceAsStream style lookup for its configuration file. 
     * The default classpath location of the hibernate config file is 
     * in the default package. Use #setConfigFile() to update 
     * the location of the configuration file for the current session.   
     */
    private static String CONFIG_FILE_LOCATION = "/data/configure/hibernate.cfg.xml";
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
    private  static Configuration configuration = new Configuration();    
    private static org.hibernate.SessionFactory sessionFactory;
    private static String configFile = CONFIG_FILE_LOCATION;

	static {
    	try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
    }
    private HibernateSessionFactory() {
    }
	
	/**
     * Returns the ThreadLocal Session instance.  Lazy initialize
     * the <code>SessionFactory</code> if needed.
     *
     *  @return Session
     *  @throws HibernateException
     */
    public static Session getSession() throws HibernateException {
        Session session = (Session) threadLocal.get();

		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {
				rebuildSessionFactory();
			}
			session = (sessionFactory != null) ? sessionFactory.openSession()
					: null;
			threadLocal.set(session);
		}

        return session;
    }

	/**
     *  Rebuild hibernate session factory
     *
     */
	public static void rebuildSessionFactory() {
		try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
	}

	/**
     *  Close the single hibernate session instance.
     *
     *  @throws HibernateException
     */
    public static void closeSession() throws HibernateException {
        Session session = (Session) threadLocal.get();
        threadLocal.set(null);

        if (session != null) {
            session.close();
        }
    }

	/**
     *  return session factory
     *
     */
	public static org.hibernate.SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	/**
     *  return session factory
     *
     *	session factory will be rebuilded in the next call
     */
	public static void setConfigFile(String configFile) {
		HibernateSessionFactory.configFile = configFile;
		sessionFactory = null;
	}

	/**
     *  return hibernate configuration
     *
     */
	public static Configuration getConfiguration() {
		return configuration;
	}

}

data\dao\HibernateSessionFactory.java
package data.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;

/**
 * Configures and provides access to Hibernate sessions, tied to the
 * current thread of execution.  Follows the Thread Local Session
 * pattern, see {@link http://hibernate.org/42.html }.
 */
public class HibernateSessionFactory {

    /** 
     * Location of hibernate.cfg.xml file.
     * Location should be on the classpath as Hibernate uses  
     * #resourceAsStream style lookup for its configuration file. 
     * The default classpath location of the hibernate config file is 
     * in the default package. Use #setConfigFile() to update 
     * the location of the configuration file for the current session.   
     */
    private static String CONFIG_FILE_LOCATION = "/data/configure/hibernate.cfg.xml";
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
    private  static Configuration configuration = new Configuration();    
    private static org.hibernate.SessionFactory sessionFactory;
    private static String configFile = CONFIG_FILE_LOCATION;

	static {
    	try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
    }
    private HibernateSessionFactory() {
    }
	
	/**
     * Returns the ThreadLocal Session instance.  Lazy initialize
     * the <code>SessionFactory</code> if needed.
     *
     *  @return Session
     *  @throws HibernateException
     */
    public static Session getSession() throws HibernateException {
        Session session = (Session) threadLocal.get();

		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {
				rebuildSessionFactory();
			}
			session = (sessionFactory != null) ? sessionFactory.openSession()
					: null;
			threadLocal.set(session);
		}

        return session;
    }

	/**
     *  Rebuild hibernate session factory
     *
     */
	public static void rebuildSessionFactory() {
		try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
	}

	/**
     *  Close the single hibernate session instance.
     *
     *  @throws HibernateException
     */
    public static void closeSession() throws HibernateException {
        Session session = (Session) threadLocal.get();
        threadLocal.set(null);

        if (session != null) {
            session.close();
        }
    }

	/**
     *  return session factory
     *
     */
	public static org.hibernate.SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	/**
     *  return session factory
     *
     *	session factory will be rebuilded in the next call
     */
	public static void setConfigFile(String configFile) {
		HibernateSessionFactory.configFile = configFile;
		sessionFactory = null;
	}

	/**
     *  return hibernate configuration
     *
     */
	public static Configuration getConfiguration() {
		return configuration;
	}

}

data\dao\IHibernateDataContext.java
package data.dao;

import java.io.Serializable;
import java.util.List;

import org.hibernate.Session;

public interface IHibernateDataContext {

	/**
	 * ADD方法
	 */
	public abstract void save(Object item);

	/**
	 * DELETE
	 */
	public abstract void delete(Object item);

	/**
	 * UPDATE
	 */
	public abstract void update(Object item);

	/**
	 * 根据ID获取对象
	 */
	public abstract <T> T findById(Class<T> clazz, Serializable id);

	/**
	 * 根据对象进行查询
	 */
	public abstract <T> List<T> findByExample(Object instance);

	public abstract <T> List<T> findByProperty(Class<T> clazz,
			String propertyName, Object value);
	
	/**
	 * 根据HQL语句查询对象
	 */
	public abstract <T> List<T> queryByHql(String hql);

	/**
	 * 获取全部
	 */
	public abstract <T> List<T> findAll(Class<T> clazz);

	/**
	 * 
	 * @param <T>
	 * @param clazz
	 * @param pageIndex 页码
	 * @param pageSize	返回的条数
	 * @return
	 */
	public abstract <T> List<T> findAll(Class<T> clazz, int pageIndex,
			int pageSize);

	/**
	 * MERGE
	 */
	public abstract <T> T merge(Class<T> clazz, Object detachedInstance);

	/**
	 * 计数
	 */
	public abstract <T> int getCount(Class<T> clazz);

	public abstract void attachDirty(Object item);

	public abstract void attachClean(Object item);

	public abstract Session getSession();

	/**
	 * 是否在事务中
	 * @return true or false
	 */
	public abstract boolean IsInTransaction();

	/**
	 * 开启一个事务
	 */
	public abstract void BeginTransaction();

	/**
	 * 提交事务
	 */
	public abstract void Commit();

	/**
	 * 事务回滚
	 */
	public abstract void Rollback();

	/**
	 * 脏数据
	 * @return true or false
	 */
	public abstract boolean IsDirty();
	
	/**
	 * 多条件查询
	 * */
	public List searchByPropertys(String model,String[]propertyName,Object[] value,boolean rigor);
	
	/*多条件查询,可以使用Between条件,查询条件的值为空时自动除去该条件  
	* rigor为true时采用精确查询  
	*/ 
	public List searchByPropertysBetween(String model,String[]propertyName,Object[] value,boolean rigor,String BetweenProperty,Object[] valueObject);
}

data\dao\IHibernateDataContext.java
package data.dao;

import java.io.Serializable;
import java.util.List;

import org.hibernate.Session;

public interface IHibernateDataContext {

	/**
	 * ADD方法
	 */
	public abstract void save(Object item);

	/**
	 * DELETE
	 */
	public abstract void delete(Object item);

	/**
	 * UPDATE
	 */
	public abstract void update(Object item);

	/**
	 * 根据ID获取对象
	 */
	public abstract <T> T findById(Class<T> clazz, Serializable id);

	/**
	 * 根据对象进行查询
	 */
	public abstract <T> List<T> findByExample(Object instance);

	public abstract <T> List<T> findByProperty(Class<T> clazz,
			String propertyName, Object value);
	
	/**
	 * 根据HQL语句查询对象
	 */
	public abstract <T> List<T> queryByHql(String hql);

	/**
	 * 获取全部
	 */
	public abstract <T> List<T> findAll(Class<T> clazz);

	/**
	 * 
	 * @param <T>
	 * @param clazz
	 * @param pageIndex 页码
	 * @param pageSize	返回的条数
	 * @return
	 */
	public abstract <T> List<T> findAll(Class<T> clazz, int pageIndex,
			int pageSize);

	/**
	 * MERGE
	 */
	public abstract <T> T merge(Class<T> clazz, Object detachedInstance);

	/**
	 * 计数
	 */
	public abstract <T> int getCount(Class<T> clazz);

	public abstract void attachDirty(Object item);

	public abstract void attachClean(Object item);

	public abstract Session getSession();

	/**
	 * 是否在事务中
	 * @return true or false
	 */
	public abstract boolean IsInTransaction();

	/**
	 * 开启一个事务
	 */
	public abstract void BeginTransaction();

	/**
	 * 提交事务
	 */
	public abstract void Commit();

	/**
	 * 事务回滚
	 */
	public abstract void Rollback();

	/**
	 * 脏数据
	 * @return true or false
	 */
	public abstract boolean IsDirty();
	
	/**
	 * 多条件查询
	 * */
	public List searchByPropertys(String model,String[]propertyName,Object[] value,boolean rigor);
	
	/*多条件查询,可以使用Between条件,查询条件的值为空时自动除去该条件  
	* rigor为true时采用精确查询  
	*/ 
	public List searchByPropertysBetween(String model,String[]propertyName,Object[] value,boolean rigor,String BetweenProperty,Object[] valueObject);
}

domain\core\algconfiguration\function\Additioin.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Additioin extends Function {
	private static final long serialVersionUID = 8408096285882718047L;
	public Additioin() {
		// TODO Auto-generated constructor stub
		name="加法";
		symbol="+";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]+operators[1];
	}

}

domain\core\algconfiguration\function\Additioin.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Additioin extends Function {
	private static final long serialVersionUID = 8408096285882718047L;
	public Additioin() {
		// TODO Auto-generated constructor stub
		name="加法";
		symbol="+";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]+operators[1];
	}

}

domain\core\algconfiguration\function\Divide.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Divide extends Function {

	private static final long serialVersionUID = -3356166328450491371L;
	public Divide() {
		// TODO Auto-generated constructor stub
		name="除法";
		symbol="/";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]/operators[1];
	}

}

domain\core\algconfiguration\function\Divide.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Divide extends Function {

	private static final long serialVersionUID = -3356166328450491371L;
	public Divide() {
		// TODO Auto-generated constructor stub
		name="除法";
		symbol="/";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]/operators[1];
	}

}

domain\core\algconfiguration\function\Minus.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Minus extends Function {

	private static final long serialVersionUID = 3358438185571026193L;
	public Minus() {
		// TODO Auto-generated constructor stub
		name="减法";
		symbol="-";
		arity=2;
	}
	
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]-operators[1];
	}

}

domain\core\algconfiguration\function\Minus.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Minus extends Function {

	private static final long serialVersionUID = 3358438185571026193L;
	public Minus() {
		// TODO Auto-generated constructor stub
		name="减法";
		symbol="-";
		arity=2;
	}
	
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]-operators[1];
	}

}

domain\core\algconfiguration\function\Multiply.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Multiply extends Function{
	private static final long serialVersionUID = 6877986033210887194L;
	public Multiply() {
		// TODO Auto-generated constructor stub
		name="乘法";
		symbol="*";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]*operators[1];
	}

}

domain\core\algconfiguration\function\Multiply.java
package domain.core.algconfiguration.function;


import domain.core.algconfiguration.Function;

public class Multiply extends Function{
	private static final long serialVersionUID = 6877986033210887194L;
	public Multiply() {
		// TODO Auto-generated constructor stub
		name="乘法";
		symbol="*";
		arity=2;
	}
	@Override
	public float operate(float[] operators) {
		// TODO Auto-generated method stub
		return operators[0]*operators[1];
	}

}

domain\core\algconfiguration\Function.java
package domain.core.algconfiguration;

import java.io.Serializable;

/**
 * 函数抽象类，请确保任何继承此类的子类都具有默认构造函数，否则系统会出现错误
 */
public abstract class Function implements Serializable,Cloneable{
	private static final long serialVersionUID = -5233529550458131848L;
	private Integer id;
	private boolean used=false;
	protected String name;
	protected String symbol;
	protected Integer arity;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public boolean isUsed() {
		return used;
	}
	public void setUsed(boolean used) {
		this.used = used;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSymbol() {
		return symbol;
	}
	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}
	public Integer getArity() {
		return arity;
	}
	public void setArity(Integer arity) {
		this.arity = arity;
	}
	@Override
	public Function clone() {
		// TODO Auto-generated method stub
		Function o=null;
		try {
			o = (Function) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
	/**
	 * 进行具体的函数运算，并返回运算结果
	 * @param operators 函数参数数组，第一个参数在数组头部
	 * @return 函数进行运算后的返回值。
	 */
	public abstract float operate(float[] operators);
}

domain\core\algconfiguration\Function.java
package domain.core.algconfiguration;

import java.io.Serializable;

/**
 * 函数抽象类，请确保任何继承此类的子类都具有默认构造函数，否则系统会出现错误
 */
public abstract class Function implements Serializable,Cloneable{
	private static final long serialVersionUID = -5233529550458131848L;
	private Integer id;
	private boolean used=false;
	protected String name;
	protected String symbol;
	protected Integer arity;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public boolean isUsed() {
		return used;
	}
	public void setUsed(boolean used) {
		this.used = used;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSymbol() {
		return symbol;
	}
	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}
	public Integer getArity() {
		return arity;
	}
	public void setArity(Integer arity) {
		this.arity = arity;
	}
	@Override
	public Function clone() {
		// TODO Auto-generated method stub
		Function o=null;
		try {
			o = (Function) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
	/**
	 * 进行具体的函数运算，并返回运算结果
	 * @param operators 函数参数数组，第一个参数在数组头部
	 * @return 函数进行运算后的返回值。
	 */
	public abstract float operate(float[] operators);
}

domain\core\algconfiguration\GeneConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


public class GeneConfiguration implements Serializable{
	private static final long serialVersionUID = -4801304275798018482L;
	private Integer id;
	private Integer normalGeneNumber;
	private Integer normalGeneHeaderLength;
	private Integer normalGeneTailLength;
	private Integer normalGeneLength;
	private Integer homeoticGeneNumber;
	private Integer homeoticGeneHeaderLength;
	private Integer homeoticGeneTailLength;
	private Integer homeoticGeneLength;
	private List<Function> functionUsed;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getNormalGeneNumber() {
		return normalGeneNumber;
	}
	public void setNormalGeneNumber(Integer normalGeneNumber) {
		this.normalGeneNumber = normalGeneNumber;
	}
	public Integer getNormalGeneHeaderLength() {
		return normalGeneHeaderLength;
	}
	public void setNormalGeneHeaderLength(Integer normalGeneHeaderLength) {
		this.normalGeneHeaderLength = normalGeneHeaderLength;
	}
	public Integer getNormalGeneTailLength() {
		return normalGeneTailLength;
	}
	public void setNormalGeneTailLength(Integer normalGeneTailLength) {
		this.normalGeneTailLength = normalGeneTailLength;
	}
	public Integer getNormalGeneLength() {
		return normalGeneLength;
	}
	public void setNormalGeneLength(Integer normalGeneLength) {
		this.normalGeneLength = normalGeneLength;
	}
	public Integer getHomeoticGeneNumber() {
		return homeoticGeneNumber;
	}
	public void setHomeoticGeneNumber(Integer homeoticGeneNumber) {
		this.homeoticGeneNumber = homeoticGeneNumber;
	}
	public Integer getHomeoticGeneHeaderLength() {
		return homeoticGeneHeaderLength;
	}
	public void setHomeoticGeneHeaderLength(Integer homeoticGeneHeaderLength) {
		this.homeoticGeneHeaderLength = homeoticGeneHeaderLength;
	}
	public Integer getHomeoticGeneTailLength() {
		return homeoticGeneTailLength;
	}
	public void setHomeoticGeneTailLength(Integer homeoticGeneTailLength) {
		this.homeoticGeneTailLength = homeoticGeneTailLength;
	}
	public Integer getHomeoticGeneLength() {
		return homeoticGeneLength;
	}
	public void setHomeoticGeneLength(Integer homeoticGeneLength) {
		this.homeoticGeneLength = homeoticGeneLength;
	}
	public List<Function> getFunctionUsed() {
		return functionUsed;
	}
	public void setFunctionUsed(List<Function> functionUsed) {
		this.functionUsed = functionUsed;
	}
	/**
	 * Hiberante专用接口，请勿调用
	 * @return
	 */
	public String getFunctionClass(){
		StringBuilder stringBuilder=new StringBuilder();
		for(int i=0;i<functionUsed.size();i++)
			stringBuilder.append(functionUsed.get(i).getClass().getName()+",");
		stringBuilder.deleteCharAt(stringBuilder.length()-1);
		return stringBuilder.toString();
	}
	/**
	 * Hiberante专用接口，请勿调用
	 * @param functionString
	 */
	public void setFunctionClass(String functionString){
		String[] funStrings=functionString.split(",");
		functionUsed=new ArrayList<Function>(funStrings.length);
		for(int i=0;i<funStrings.length;i++)
			try {
				functionUsed.add(Function.class.cast(Class.forName(funStrings[i]).newInstance()));
			} catch (InstantiationException | IllegalAccessException
					| ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
	}
}

domain\core\algconfiguration\GeneConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


public class GeneConfiguration implements Serializable{
	private static final long serialVersionUID = -4801304275798018482L;
	private Integer id;
	private Integer normalGeneNumber;
	private Integer normalGeneHeaderLength;
	private Integer normalGeneTailLength;
	private Integer normalGeneLength;
	private Integer homeoticGeneNumber;
	private Integer homeoticGeneHeaderLength;
	private Integer homeoticGeneTailLength;
	private Integer homeoticGeneLength;
	private List<Function> functionUsed;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getNormalGeneNumber() {
		return normalGeneNumber;
	}
	public void setNormalGeneNumber(Integer normalGeneNumber) {
		this.normalGeneNumber = normalGeneNumber;
	}
	public Integer getNormalGeneHeaderLength() {
		return normalGeneHeaderLength;
	}
	public void setNormalGeneHeaderLength(Integer normalGeneHeaderLength) {
		this.normalGeneHeaderLength = normalGeneHeaderLength;
	}
	public Integer getNormalGeneTailLength() {
		return normalGeneTailLength;
	}
	public void setNormalGeneTailLength(Integer normalGeneTailLength) {
		this.normalGeneTailLength = normalGeneTailLength;
	}
	public Integer getNormalGeneLength() {
		return normalGeneLength;
	}
	public void setNormalGeneLength(Integer normalGeneLength) {
		this.normalGeneLength = normalGeneLength;
	}
	public Integer getHomeoticGeneNumber() {
		return homeoticGeneNumber;
	}
	public void setHomeoticGeneNumber(Integer homeoticGeneNumber) {
		this.homeoticGeneNumber = homeoticGeneNumber;
	}
	public Integer getHomeoticGeneHeaderLength() {
		return homeoticGeneHeaderLength;
	}
	public void setHomeoticGeneHeaderLength(Integer homeoticGeneHeaderLength) {
		this.homeoticGeneHeaderLength = homeoticGeneHeaderLength;
	}
	public Integer getHomeoticGeneTailLength() {
		return homeoticGeneTailLength;
	}
	public void setHomeoticGeneTailLength(Integer homeoticGeneTailLength) {
		this.homeoticGeneTailLength = homeoticGeneTailLength;
	}
	public Integer getHomeoticGeneLength() {
		return homeoticGeneLength;
	}
	public void setHomeoticGeneLength(Integer homeoticGeneLength) {
		this.homeoticGeneLength = homeoticGeneLength;
	}
	public List<Function> getFunctionUsed() {
		return functionUsed;
	}
	public void setFunctionUsed(List<Function> functionUsed) {
		this.functionUsed = functionUsed;
	}
	/**
	 * Hiberante专用接口，请勿调用
	 * @return
	 */
	public String getFunctionClass(){
		StringBuilder stringBuilder=new StringBuilder();
		for(int i=0;i<functionUsed.size();i++)
			stringBuilder.append(functionUsed.get(i).getClass().getName()+",");
		stringBuilder.deleteCharAt(stringBuilder.length()-1);
		return stringBuilder.toString();
	}
	/**
	 * Hiberante专用接口，请勿调用
	 * @param functionString
	 */
	public void setFunctionClass(String functionString){
		String[] funStrings=functionString.split(",");
		functionUsed=new ArrayList<Function>(funStrings.length);
		for(int i=0;i<funStrings.length;i++)
			try {
				functionUsed.add(Function.class.cast(Class.forName(funStrings[i]).newInstance()));
			} catch (InstantiationException | IllegalAccessException
					| ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
	}
}

domain\core\algconfiguration\GepAlgConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;

public class GepAlgConfiguration implements Serializable{
	private static final long serialVersionUID = 1450046907494125922L;
	private Integer id;
	private String name;
	private Long maxGeneration;
	private Float selectionRange;
	private Float accuracy;
	private Float maxFitness;
	private IndividualConfiguration individualConfiguration;
	private OperatorConfiguration operatorConfiguration;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Long getMaxGeneration() {
		return maxGeneration;
	}
	public void setMaxGeneration(Long maxGeneration) {
		this.maxGeneration = maxGeneration;
	}
	public Float getSelectionRange() {
		return selectionRange;
	}
	public void setSelectionRange(Float selectionRange) {
		this.selectionRange = selectionRange;
	}
	public Float getAccuracy() {
		return accuracy;
	}
	public void setAccuracy(Float accuracy) {
		this.accuracy = accuracy;
	}
	public Float getMaxFitness() {
		return maxFitness;
	}
	public void setMaxFitness(Float maxFitness) {
		this.maxFitness = maxFitness;
	}
	public IndividualConfiguration getIndividualConfiguration() {
		return individualConfiguration;
	}
	public void setIndividualConfiguration(
			IndividualConfiguration individualConfiguration) {
		this.individualConfiguration = individualConfiguration;
	}
	public OperatorConfiguration getOperatorConfiguration() {
		return operatorConfiguration;
	}
	public void setOperatorConfiguration(OperatorConfiguration operatorConfiguration) {
		this.operatorConfiguration = operatorConfiguration;
	}
	
}

domain\core\algconfiguration\GepAlgConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;

public class GepAlgConfiguration implements Serializable{
	private static final long serialVersionUID = 1450046907494125922L;
	private Integer id;
	private String name;
	private Long maxGeneration;
	private Float selectionRange;
	private Float accuracy;
	private Float maxFitness;
	private IndividualConfiguration individualConfiguration;
	private OperatorConfiguration operatorConfiguration;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Long getMaxGeneration() {
		return maxGeneration;
	}
	public void setMaxGeneration(Long maxGeneration) {
		this.maxGeneration = maxGeneration;
	}
	public Float getSelectionRange() {
		return selectionRange;
	}
	public void setSelectionRange(Float selectionRange) {
		this.selectionRange = selectionRange;
	}
	public Float getAccuracy() {
		return accuracy;
	}
	public void setAccuracy(Float accuracy) {
		this.accuracy = accuracy;
	}
	public Float getMaxFitness() {
		return maxFitness;
	}
	public void setMaxFitness(Float maxFitness) {
		this.maxFitness = maxFitness;
	}
	public IndividualConfiguration getIndividualConfiguration() {
		return individualConfiguration;
	}
	public void setIndividualConfiguration(
			IndividualConfiguration individualConfiguration) {
		this.individualConfiguration = individualConfiguration;
	}
	public OperatorConfiguration getOperatorConfiguration() {
		return operatorConfiguration;
	}
	public void setOperatorConfiguration(OperatorConfiguration operatorConfiguration) {
		this.operatorConfiguration = operatorConfiguration;
	}
	
}

domain\core\algconfiguration\IndividualConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;

public class IndividualConfiguration implements Serializable{
	private static final long serialVersionUID = 1312848752854264394L;
	private Integer id;
	private Integer individualNumber;
	private Integer totalGeneNumbers;
	private Integer normalGeneTotalLength;
	private Integer homeoticGeneTotalLength;
	private Integer geneTotalLength;
	private GeneConfiguration geneConfiguration;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getIndividualNumber() {
		return individualNumber;
	}
	public void setIndividualNumber(Integer individualNumber) {
		this.individualNumber = individualNumber;
	}
	public Integer getTotalGeneNumbers() {
		return totalGeneNumbers;
	}
	public void setTotalGeneNumbers(Integer totalGeneNumbers) {
		this.totalGeneNumbers = totalGeneNumbers;
	}
	public Integer getNormalGeneTotalLength() {
		return normalGeneTotalLength;
	}
	public void setNormalGeneTotalLength(Integer normalGeneTotalLength) {
		this.normalGeneTotalLength = normalGeneTotalLength;
	}
	public Integer getHomeoticGeneTotalLength() {
		return homeoticGeneTotalLength;
	}
	public void setHomeoticGeneTotalLength(Integer homeoticGeneTotalLength) {
		this.homeoticGeneTotalLength = homeoticGeneTotalLength;
	}
	public Integer getGeneTotalLength() {
		return geneTotalLength;
	}
	public void setGeneTotalLength(Integer geneTotalLength) {
		this.geneTotalLength = geneTotalLength;
	}
	public GeneConfiguration getGeneConfiguration() {
		return geneConfiguration;
	}
	public void setGeneConfiguration(GeneConfiguration geneConfiguration) {
		this.geneConfiguration = geneConfiguration;
	}
}

domain\core\algconfiguration\IndividualConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;

public class IndividualConfiguration implements Serializable{
	private static final long serialVersionUID = 1312848752854264394L;
	private Integer id;
	private Integer individualNumber;
	private Integer totalGeneNumbers;
	private Integer normalGeneTotalLength;
	private Integer homeoticGeneTotalLength;
	private Integer geneTotalLength;
	private GeneConfiguration geneConfiguration;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getIndividualNumber() {
		return individualNumber;
	}
	public void setIndividualNumber(Integer individualNumber) {
		this.individualNumber = individualNumber;
	}
	public Integer getTotalGeneNumbers() {
		return totalGeneNumbers;
	}
	public void setTotalGeneNumbers(Integer totalGeneNumbers) {
		this.totalGeneNumbers = totalGeneNumbers;
	}
	public Integer getNormalGeneTotalLength() {
		return normalGeneTotalLength;
	}
	public void setNormalGeneTotalLength(Integer normalGeneTotalLength) {
		this.normalGeneTotalLength = normalGeneTotalLength;
	}
	public Integer getHomeoticGeneTotalLength() {
		return homeoticGeneTotalLength;
	}
	public void setHomeoticGeneTotalLength(Integer homeoticGeneTotalLength) {
		this.homeoticGeneTotalLength = homeoticGeneTotalLength;
	}
	public Integer getGeneTotalLength() {
		return geneTotalLength;
	}
	public void setGeneTotalLength(Integer geneTotalLength) {
		this.geneTotalLength = geneTotalLength;
	}
	public GeneConfiguration getGeneConfiguration() {
		return geneConfiguration;
	}
	public void setGeneConfiguration(GeneConfiguration geneConfiguration) {
		this.geneConfiguration = geneConfiguration;
	}
}

domain\core\algconfiguration\OperatorConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;
import java.util.Arrays;

public class OperatorConfiguration implements Serializable{
	private static final long serialVersionUID = -49819413626669298L;
	private Integer id;
	private Float mutateRate;
	private Float isTransportRate;
	private Integer[] isElement;
	private Float risTransportRate;
	private Integer[] risElement;
	private Float geneTransportRate;
	private Float onePointRecombineRate;
	private Float twoPointRecombineRate;
	private Float geneRecombineRate;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Float getMutateRate() {
		return mutateRate;
	}
	public void setMutateRate(Float mutateRate) {
		this.mutateRate = mutateRate;
	}
	public Float getIsTransportRate() {
		return isTransportRate;
	}
	public void setIsTransportRate(Float isTransportRate) {
		this.isTransportRate = isTransportRate;
	}
	public Integer[] getIsElement() {
		return isElement;
	}
	public void setIsElement(Integer[] isElement) {
		this.isElement = isElement;
	}
	public Float getRisTransportRate() {
		return risTransportRate;
	}
	public void setRisTransportRate(Float risTransportRate) {
		this.risTransportRate = risTransportRate;
	}
	public Integer[] getRisElement() {
		return risElement;
	}
	public void setRisElement(Integer[] risElement) {
		this.risElement = risElement;
	}
	public Float getGeneTransportRate() {
		return geneTransportRate;
	}
	public void setGeneTransportRate(Float geneTransportRate) {
		this.geneTransportRate = geneTransportRate;
	}
	public Float getOnePointRecombineRate() {
		return onePointRecombineRate;
	}
	public void setOnePointRecombineRate(Float onePointRecombineRate) {
		this.onePointRecombineRate = onePointRecombineRate;
	}
	public Float getTwoPointRecombineRate() {
		return twoPointRecombineRate;
	}
	public void setTwoPointRecombineRate(Float twoPointRecombineRate) {
		this.twoPointRecombineRate = twoPointRecombineRate;
	}
	public Float getGeneRecombineRate() {
		return geneRecombineRate;
	}
	public void setGeneRecombineRate(Float geneRecombineRate) {
		this.geneRecombineRate = geneRecombineRate;
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @return
	 */
	public String getIsElementString(){
		String result=Arrays.toString(isElement);
		return result.substring(1,result.length()-1);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @param isElementString
	 */
	public void setIsElementString(String isElementString){
		String [] stringArray=isElementString.split(", ");
		isElement=new Integer[stringArray.length];
		for(int i=0;i<stringArray.length;i++)
			isElement[i]=Integer.valueOf(stringArray[i]);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @return
	 */
	public String getRisElementString(){
		String result=Arrays.toString(isElement);
		return result.substring(1,result.length()-1);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @param risElementString
	 */
	public void setRisElementString(String risElementString){
		String [] stringArray=risElementString.split(", ");
		risElement=new Integer[stringArray.length];
		for(int i=0;i<stringArray.length;i++)
			risElement[i]=Integer.valueOf(stringArray[i]);
	}
}

domain\core\algconfiguration\OperatorConfiguration.java
package domain.core.algconfiguration;

import java.io.Serializable;
import java.util.Arrays;

public class OperatorConfiguration implements Serializable{
	private static final long serialVersionUID = -49819413626669298L;
	private Integer id;
	private Float mutateRate;
	private Float isTransportRate;
	private Integer[] isElement;
	private Float risTransportRate;
	private Integer[] risElement;
	private Float geneTransportRate;
	private Float onePointRecombineRate;
	private Float twoPointRecombineRate;
	private Float geneRecombineRate;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Float getMutateRate() {
		return mutateRate;
	}
	public void setMutateRate(Float mutateRate) {
		this.mutateRate = mutateRate;
	}
	public Float getIsTransportRate() {
		return isTransportRate;
	}
	public void setIsTransportRate(Float isTransportRate) {
		this.isTransportRate = isTransportRate;
	}
	public Integer[] getIsElement() {
		return isElement;
	}
	public void setIsElement(Integer[] isElement) {
		this.isElement = isElement;
	}
	public Float getRisTransportRate() {
		return risTransportRate;
	}
	public void setRisTransportRate(Float risTransportRate) {
		this.risTransportRate = risTransportRate;
	}
	public Integer[] getRisElement() {
		return risElement;
	}
	public void setRisElement(Integer[] risElement) {
		this.risElement = risElement;
	}
	public Float getGeneTransportRate() {
		return geneTransportRate;
	}
	public void setGeneTransportRate(Float geneTransportRate) {
		this.geneTransportRate = geneTransportRate;
	}
	public Float getOnePointRecombineRate() {
		return onePointRecombineRate;
	}
	public void setOnePointRecombineRate(Float onePointRecombineRate) {
		this.onePointRecombineRate = onePointRecombineRate;
	}
	public Float getTwoPointRecombineRate() {
		return twoPointRecombineRate;
	}
	public void setTwoPointRecombineRate(Float twoPointRecombineRate) {
		this.twoPointRecombineRate = twoPointRecombineRate;
	}
	public Float getGeneRecombineRate() {
		return geneRecombineRate;
	}
	public void setGeneRecombineRate(Float geneRecombineRate) {
		this.geneRecombineRate = geneRecombineRate;
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @return
	 */
	public String getIsElementString(){
		String result=Arrays.toString(isElement);
		return result.substring(1,result.length()-1);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @param isElementString
	 */
	public void setIsElementString(String isElementString){
		String [] stringArray=isElementString.split(", ");
		isElement=new Integer[stringArray.length];
		for(int i=0;i<stringArray.length;i++)
			isElement[i]=Integer.valueOf(stringArray[i]);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @return
	 */
	public String getRisElementString(){
		String result=Arrays.toString(isElement);
		return result.substring(1,result.length()-1);
	}
	/**
	 * Hibernate专用接口，请勿调用
	 * @param risElementString
	 */
	public void setRisElementString(String risElementString){
		String [] stringArray=risElementString.split(", ");
		risElement=new Integer[stringArray.length];
		for(int i=0;i<stringArray.length;i++)
			risElement[i]=Integer.valueOf(stringArray[i]);
	}
}

domain\core\algInputDataProcess\DataColumn.java
package domain.core.algInputDataProcess;

public class DataColumn implements Cloneable{
	private String columnName;
	private Float value;
	public DataColumn(){
		
	}
	public DataColumn(String columnName,Float value){
		this.columnName=columnName;
		this.value=value;
	}
	public String getColumnName() {
		return columnName;
	}
	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}
	public Float getValue() {
		return value;
	}
	public void setValue(Float value) {
		this.value = value;
	}
	@Override
	public DataColumn clone(){
		// TODO Auto-generated method stub
		DataColumn o=null;
		try {
			o=(DataColumn) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\core\algInputDataProcess\DataColumn.java
package domain.core.algInputDataProcess;

public class DataColumn implements Cloneable{
	private String columnName;
	private Float value;
	public DataColumn(){
		
	}
	public DataColumn(String columnName,Float value){
		this.columnName=columnName;
		this.value=value;
	}
	public String getColumnName() {
		return columnName;
	}
	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}
	public Float getValue() {
		return value;
	}
	public void setValue(Float value) {
		this.value = value;
	}
	@Override
	public DataColumn clone(){
		// TODO Auto-generated method stub
		DataColumn o=null;
		try {
			o=(DataColumn) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\core\algInputDataProcess\DataRow.java
package domain.core.algInputDataProcess;

import java.util.List;

public class DataRow{
	private List<DataColumn> dataColumns;
	private DataColumn resultColumn;
	public List<DataColumn> getDataColumns() {
		return dataColumns;
	}
	public void setDataColumns(List<DataColumn> dataColumns) {
		this.dataColumns = dataColumns;
	}
	public DataColumn getResultColumn() {
		return resultColumn;
	}
	public void setResultColumn(DataColumn resultColumn) {
		this.resultColumn = resultColumn;
	}
}

domain\core\algInputDataProcess\DataRow.java
package domain.core.algInputDataProcess;

import java.util.List;

public class DataRow{
	private List<DataColumn> dataColumns;
	private DataColumn resultColumn;
	public List<DataColumn> getDataColumns() {
		return dataColumns;
	}
	public void setDataColumns(List<DataColumn> dataColumns) {
		this.dataColumns = dataColumns;
	}
	public DataColumn getResultColumn() {
		return resultColumn;
	}
	public void setResultColumn(DataColumn resultColumn) {
		this.resultColumn = resultColumn;
	}
}

domain\core\algInputDataProcess\DataSet.java
package domain.core.algInputDataProcess;

import java.util.List;

public class DataSet {
	private String name;
	private Integer rowNum;
	private Integer columnNum;
	private List<DataRow> dataRow;
	public DataSet(){
		
	}
	public DataSet(int rows,int columns,String name){
		rowNum=rows;
		columnNum=columns;
		this.name=name;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getRowNum() {
		return rowNum;
	}
	public void setRowNum(Integer rowNum) {
		this.rowNum = rowNum;
	}
	public Integer getColumnNum() {
		return columnNum;
	}
	public void setColumnNum(Integer columnNum) {
		this.columnNum = columnNum;
	}
	public List<DataRow> getDataRow() {
		return dataRow;
	}
	public void setDataRow(List<DataRow> dataRow) {
		this.dataRow = dataRow;
	}
	public List<DataColumn> getVariableUsed(){
		return dataRow.get(0).getDataColumns();
	}
}

domain\core\algInputDataProcess\DataSet.java
package domain.core.algInputDataProcess;

import java.util.List;

public class DataSet {
	private String name;
	private Integer rowNum;
	private Integer columnNum;
	private List<DataRow> dataRow;
	public DataSet(){
		
	}
	public DataSet(int rows,int columns,String name){
		rowNum=rows;
		columnNum=columns;
		this.name=name;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getRowNum() {
		return rowNum;
	}
	public void setRowNum(Integer rowNum) {
		this.rowNum = rowNum;
	}
	public Integer getColumnNum() {
		return columnNum;
	}
	public void setColumnNum(Integer columnNum) {
		this.columnNum = columnNum;
	}
	public List<DataRow> getDataRow() {
		return dataRow;
	}
	public void setDataRow(List<DataRow> dataRow) {
		this.dataRow = dataRow;
	}
	public List<DataColumn> getVariableUsed(){
		return dataRow.get(0).getDataColumns();
	}
}

domain\core\algOutput\FittedValue.java
package domain.core.algOutput;

import java.io.Serializable;

import domain.core.algInputDataProcess.DataRow;

public class FittedValue implements Serializable,Cloneable {
	private static final long serialVersionUID = 7974157432692414973L;
	private Float fittedValue;
	private DataRow dataRow;
	public Float getFittedValue() {
		return fittedValue;
	}
	public void setFittedValue(Float fittedValue) {
		this.fittedValue = fittedValue;
	}
	public DataRow getDataRow() {
		return dataRow;
	}
	public void setDataRow(DataRow dataRow) {
		this.dataRow = dataRow;
	}
	/**
	 * 对DataRow的复制为shallow copy，其余属性为deep copy
	 */
	@Override
	public FittedValue clone(){
		// TODO Auto-generated method stub
		FittedValue fittedValue=null;
		try {
			fittedValue = (FittedValue) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fittedValue;
	}
}

domain\core\algOutput\FittedValue.java
package domain.core.algOutput;

import java.io.Serializable;

import domain.core.algInputDataProcess.DataRow;

public class FittedValue implements Serializable,Cloneable {
	private static final long serialVersionUID = 7974157432692414973L;
	private Float fittedValue;
	private DataRow dataRow;
	public Float getFittedValue() {
		return fittedValue;
	}
	public void setFittedValue(Float fittedValue) {
		this.fittedValue = fittedValue;
	}
	public DataRow getDataRow() {
		return dataRow;
	}
	public void setDataRow(DataRow dataRow) {
		this.dataRow = dataRow;
	}
	/**
	 * 对DataRow的复制为shallow copy，其余属性为deep copy
	 */
	@Override
	public FittedValue clone(){
		// TODO Auto-generated method stub
		FittedValue fittedValue=null;
		try {
			fittedValue = (FittedValue) super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fittedValue;
	}
}

domain\core\algOutput\Gene.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 基因类，此类为抽象类，提供了基因的通用的信息
 * @author 申远
 *
 */
public class Gene implements Serializable,Cloneable {
	private static final long serialVersionUID = 7104627974958183372L;
	private float value;
	private GeneType geneType;
	private List<GenePiece> genePieces;
	public float getValue() {
		return value;
	}
	/**
	 * 设置当前基因的值
	 * @param value 当前基因的值
	 */
	public void setValue(float value) {
		this.value = value;
	}
	public GeneType getGeneType() {
		return geneType;
	}
	public void setGeneType(GeneType geneType) {
		this.geneType = geneType;
	}
	public List<GenePiece> getGenePieces() {
		return genePieces;
	}
	public void setGenePieces(List<GenePiece> genePieces) {
		this.genePieces = genePieces;
	}
	@Override
	public Gene clone(){
		// TODO Auto-generated method stub
		Gene gene=null;
		try {
			gene=(Gene) super.clone();
			if(genePieces!=null){
				List<GenePiece> copiedGenePieces=new ArrayList<GenePiece>(genePieces.size());
				if(genePieces.size()!=0)
					for(int i=0;i<genePieces.size();i++)
						copiedGenePieces.add(genePieces.get(i).clone());
				gene.setGenePieces(copiedGenePieces);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return gene;
	}
}

domain\core\algOutput\Gene.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 基因类，此类为抽象类，提供了基因的通用的信息
 * @author 申远
 *
 */
public class Gene implements Serializable,Cloneable {
	private static final long serialVersionUID = 7104627974958183372L;
	private float value;
	private GeneType geneType;
	private List<GenePiece> genePieces;
	public float getValue() {
		return value;
	}
	/**
	 * 设置当前基因的值
	 * @param value 当前基因的值
	 */
	public void setValue(float value) {
		this.value = value;
	}
	public GeneType getGeneType() {
		return geneType;
	}
	public void setGeneType(GeneType geneType) {
		this.geneType = geneType;
	}
	public List<GenePiece> getGenePieces() {
		return genePieces;
	}
	public void setGenePieces(List<GenePiece> genePieces) {
		this.genePieces = genePieces;
	}
	@Override
	public Gene clone(){
		// TODO Auto-generated method stub
		Gene gene=null;
		try {
			gene=(Gene) super.clone();
			if(genePieces!=null){
				List<GenePiece> copiedGenePieces=new ArrayList<GenePiece>(genePieces.size());
				if(genePieces.size()!=0)
					for(int i=0;i<genePieces.size();i++)
						copiedGenePieces.add(genePieces.get(i).clone());
				gene.setGenePieces(copiedGenePieces);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return gene;
	}
}

domain\core\algOutput\GenePiece.java
package domain.core.algOutput;

import java.io.Serializable;

import domain.core.algconfiguration.Function;

/**
 * 基因片段类，或称基因位类，在每一个头部或者尾部中，最终包含的都是此类GenePiece
 * @author 申远
 *
 */
public class GenePiece implements Serializable,Cloneable{
	private static final long serialVersionUID = 7648117930489664221L;
	private String symbol;
	private String name;
	private Float value;
	private int variableIndex;
	private GenePieceType genePieceType;
	private Function function;
	/**
	 * 返回当前基因片段的符号表示，用String表示
	 * @return 基因片段符号表示
	 */
	public String getSymbol() {
		return symbol;
	}
	/**
	 * 设置当前基因片段的符号表示，用String表示
	 * @param symbol 基因片段符号表示
	 */
	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}
	/**
	 * 返回当前基因片段的名称
	 * @return 基因片段名称的字符串表示
	 */
	public String getName(){
		return name;
	}
	/**
	 * 设置当前基因片段的名称
	 * @param name 当前基因片段的名称
	 */
	public void setName(String name){
		this.name=name;
	}
	/**
	 * 获得当前基因片段的值
	 * @return 当前基因片段的值
	 */
	public Float getValue(){
		return value;
	}
	/**
	 * 设置当前基因片段的值
	 * @param value 基因片段的值
	 */
	public void setValue(Float value){
		this.value=value;
	}
	public int getVariableIndex() {
		return variableIndex;
	}
	public void setVariableIndex(int variableIndex) {
		this.variableIndex = variableIndex;
	}
	public GenePieceType getGenePieceType() {
		return genePieceType;
	}
	public void setGenePieceType(GenePieceType genePieceType) {
		this.genePieceType = genePieceType;
	}
	public Function getFunction() {
		return function;
	}
	public void setFunction(Function function) {
		this.function = function;
	}
	/**
	 * 返回当前基因片段的名称表示，本方法将直接调用getName()。
	 */
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return getName();
	}
	/**
	 * 克隆一份当前对象，这个方法调用了Object中的clone方法。
	 * 这是一个深度克隆，即源对象和新对象具有相同的初值，但具有不同的内存地址。
	 */
	@Override
	public GenePiece clone(){
		// TODO Auto-generated method stub
		GenePiece o=null;
		try {
			o=(GenePiece) super.clone();
			if(function!=null)
				o.function=function.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\core\algOutput\GenePiece.java
package domain.core.algOutput;

import java.io.Serializable;

import domain.core.algconfiguration.Function;

/**
 * 基因片段类，或称基因位类，在每一个头部或者尾部中，最终包含的都是此类GenePiece
 * @author 申远
 *
 */
public class GenePiece implements Serializable,Cloneable{
	private static final long serialVersionUID = 7648117930489664221L;
	private String symbol;
	private String name;
	private Float value;
	private int variableIndex;
	private GenePieceType genePieceType;
	private Function function;
	/**
	 * 返回当前基因片段的符号表示，用String表示
	 * @return 基因片段符号表示
	 */
	public String getSymbol() {
		return symbol;
	}
	/**
	 * 设置当前基因片段的符号表示，用String表示
	 * @param symbol 基因片段符号表示
	 */
	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}
	/**
	 * 返回当前基因片段的名称
	 * @return 基因片段名称的字符串表示
	 */
	public String getName(){
		return name;
	}
	/**
	 * 设置当前基因片段的名称
	 * @param name 当前基因片段的名称
	 */
	public void setName(String name){
		this.name=name;
	}
	/**
	 * 获得当前基因片段的值
	 * @return 当前基因片段的值
	 */
	public Float getValue(){
		return value;
	}
	/**
	 * 设置当前基因片段的值
	 * @param value 基因片段的值
	 */
	public void setValue(Float value){
		this.value=value;
	}
	public int getVariableIndex() {
		return variableIndex;
	}
	public void setVariableIndex(int variableIndex) {
		this.variableIndex = variableIndex;
	}
	public GenePieceType getGenePieceType() {
		return genePieceType;
	}
	public void setGenePieceType(GenePieceType genePieceType) {
		this.genePieceType = genePieceType;
	}
	public Function getFunction() {
		return function;
	}
	public void setFunction(Function function) {
		this.function = function;
	}
	/**
	 * 返回当前基因片段的名称表示，本方法将直接调用getName()。
	 */
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return getName();
	}
	/**
	 * 克隆一份当前对象，这个方法调用了Object中的clone方法。
	 * 这是一个深度克隆，即源对象和新对象具有相同的初值，但具有不同的内存地址。
	 */
	@Override
	public GenePiece clone(){
		// TODO Auto-generated method stub
		GenePiece o=null;
		try {
			o=(GenePiece) super.clone();
			if(function!=null)
				o.function=function.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\core\algOutput\GenePieceType.java
package domain.core.algOutput;

public enum GenePieceType {
	Variable,Constant,Function
}

domain\core\algOutput\GenePieceType.java
package domain.core.algOutput;

public enum GenePieceType {
	Variable,Constant,Function
}

domain\core\algOutput\GeneType.java
package domain.core.algOutput;

public enum GeneType {
	NormalGene,HomeoticGene
}

domain\core\algOutput\GeneType.java
package domain.core.algOutput;

public enum GeneType {
	NormalGene,HomeoticGene
}

domain\core\algOutput\GepAlgRun.java
package domain.core.algOutput;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GepAlgConfiguration;

public class GepAlgRun {
	private GepAlgConfiguration gepAlgConfiguration;
	private DataSet dataSet;
	private Integer id;
	private List<Float> maxFitness;
	private List<Float> minFitness;
	private List<Population> populations=new ArrayList<Population>(2);
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public GepAlgConfiguration getGepAlgConfiguration() {
		return gepAlgConfiguration;
	}
	public void setGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration) {
		this.gepAlgConfiguration = gepAlgConfiguration;
	}
	public DataSet getDataSet() {
		return dataSet;
	}
	public void setDataSet(DataSet dataSet) {
		this.dataSet = dataSet;
	}
	public Population getCurrentPopulation(){
		removeRedundancyPopulation();
		if(populations.size()==0)
			return null;
		else
			return populations.get(populations.size()-1);
	}
	public void setCurrentPopulation(Population population){
		removeRedundancyPopulation();
		if(populations.size()==0)
			populations.add(population);
		else
			populations.set(populations.size()-1, population);
	}
	public List<Population> getPopulations() {
		removeRedundancyPopulation();
		return populations;
	}
	public void setPopulations(List<Population> population) {
		this.populations = population;
		removeRedundancyPopulation();
	}
	public List<Function> getUsedFunctions(){
		return gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration().getFunctionUsed();
	}
	public List<DataColumn> getUsedVariables(){
		return dataSet.getDataRow().get(0).getDataColumns();
	}
	public List<Float> getMaxFitness() {
		return maxFitness;
	}
	public void setMaxFitness(List<Float> maxFitness) {
		this.maxFitness = maxFitness;
	}
	public List<Float> getMinFitness() {
		return minFitness;
	}
	public void setMinFitness(List<Float> minFitness) {
		this.minFitness = minFitness;
	}
	public Individual getBestIndividual(){
		return Collections.max(getCurrentPopulation().getIndividuals());
	}
	private void removeRedundancyPopulation(){
		while(populations.size()>2)
			populations.remove(0);
	}
}

domain\core\algOutput\GepAlgRun.java
package domain.core.algOutput;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GepAlgConfiguration;

public class GepAlgRun {
	private GepAlgConfiguration gepAlgConfiguration;
	private DataSet dataSet;
	private Integer id;
	private List<Float> maxFitness;
	private List<Float> minFitness;
	private List<Population> populations=new ArrayList<Population>(2);
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public GepAlgConfiguration getGepAlgConfiguration() {
		return gepAlgConfiguration;
	}
	public void setGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration) {
		this.gepAlgConfiguration = gepAlgConfiguration;
	}
	public DataSet getDataSet() {
		return dataSet;
	}
	public void setDataSet(DataSet dataSet) {
		this.dataSet = dataSet;
	}
	public Population getCurrentPopulation(){
		removeRedundancyPopulation();
		if(populations.size()==0)
			return null;
		else
			return populations.get(populations.size()-1);
	}
	public void setCurrentPopulation(Population population){
		removeRedundancyPopulation();
		if(populations.size()==0)
			populations.add(population);
		else
			populations.set(populations.size()-1, population);
	}
	public List<Population> getPopulations() {
		removeRedundancyPopulation();
		return populations;
	}
	public void setPopulations(List<Population> population) {
		this.populations = population;
		removeRedundancyPopulation();
	}
	public List<Function> getUsedFunctions(){
		return gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration().getFunctionUsed();
	}
	public List<DataColumn> getUsedVariables(){
		return dataSet.getDataRow().get(0).getDataColumns();
	}
	public List<Float> getMaxFitness() {
		return maxFitness;
	}
	public void setMaxFitness(List<Float> maxFitness) {
		this.maxFitness = maxFitness;
	}
	public List<Float> getMinFitness() {
		return minFitness;
	}
	public void setMinFitness(List<Float> minFitness) {
		this.minFitness = minFitness;
	}
	public Individual getBestIndividual(){
		return Collections.max(getCurrentPopulation().getIndividuals());
	}
	private void removeRedundancyPopulation(){
		while(populations.size()>2)
			populations.remove(0);
	}
}

domain\core\algOutput\Individual.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 个体类,种群中保存着个体的List
 * @author 个体类
 *
 */
public class Individual implements Comparable<Individual>,Serializable,Cloneable{
	private static final long serialVersionUID = -7942680950588488680L;
	private List<Gene> genes;
	private List<FittedValue> fittedValues;
	private Float fitness;
	private int selectedHomeoticGeneNumber=-1;
	/**
	 * 覆盖了Object的toString方法，本方法将以字符串的形式输出个体中所包含的全部GenePiece信息。
	 */
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		StringBuffer result=new StringBuffer();
		for(Gene gene:genes){
			if(gene.getGeneType()==GeneType.HomeoticGene)
				result.append("同源基因：");
			else
				result.append("正常基因:");
			for(GenePiece genePiece:gene.getGenePieces())
				result.append(genePiece.getSymbol()+" ");
			result.append("\n");
		}
		return result.toString();
	}
	/**
	 * 比较当前个体的适应值和用户指定的某个个体的适应值，并将此结果返回
	 * @param　用户提供的待比较的个体
	 * @return 如果当前个体适应值小于参数适应值，返回负数，如果当前个体适应值等于参数个体适应值，返回0，如果当前个体适应值大于参数个体适应值，返回正数
	 */
	@Override
	public int compareTo(Individual o) {
		// TODO Auto-generated method stub
		return Float.compare(fitness, o.getFitness());
	}
	public List<Gene> getGenes() {
		return genes;
	}
	public void setGenes(List<Gene> genes) {
		this.genes = genes;
	}
	public List<FittedValue> getFittedValues() {
		return fittedValues;
	}
	public void setFittedValues(List<FittedValue> fittedValues) {
		this.fittedValues = fittedValues;
	}
	/**
	 * 返回当前个体的适应值
	 * @return 当前个体的适应值
	 */
	public Float getFitness(){
		return fitness;
	}
	/**
	 * 设置当前个体的适应值
	 * @param fitness 当前个体的适应值
	 */
	public void setFitness(Float fitness) {
		this.fitness = fitness;
	}
	/**
	 * 一个个体可能具有多个同源基因，一个个体内的多个同源基因可能产生多个不同的表达式，这个方法将返回在对某个确定的输入集求解的时候使用哪个同源基因翻译个体
	 * @return 被选择的同源基因的编号，从0开始，最大值为普通基因数量－1
	 */
	public int getSelectedHomeoticGeneNumber() {
		return selectedHomeoticGeneNumber;
	}
	/**
	 * 设置在求解输入集的时候将使用哪个同源基因上传个体。
	 * @param selectedHomeoticGeneNumber 同源基因编号
	 */
	public void setSelectedHomeoticGeneNumber(int selectedHomeoticGeneNumber) {
		this.selectedHomeoticGeneNumber = selectedHomeoticGeneNumber;
	}

	@Override
	public Individual clone(){
		// TODO Auto-generated method stub
		Individual individual=null;
		try {
			individual=(Individual) super.clone();
			if (genes!=null) {
				List<Gene> copiedGenes=new ArrayList<Gene>(genes.size());
				if(genes.size()!=0)
					for(int i=0;i<genes.size();i++)
						copiedGenes.add(genes.get(i).clone());
				individual.setGenes(copiedGenes);
			}
			if(fittedValues!=null){
				List<FittedValue> copiedFittedValues=new ArrayList<FittedValue>(fittedValues.size());
				if(fittedValues.size()!=0)
					for(int i=0;i<fittedValues.size();i++)
						copiedFittedValues.add(fittedValues.get(i).clone());
				individual.setFittedValues(copiedFittedValues);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return individual;
	}
}

domain\core\algOutput\Individual.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 个体类,种群中保存着个体的List
 * @author 个体类
 *
 */
public class Individual implements Comparable<Individual>,Serializable,Cloneable{
	private static final long serialVersionUID = -7942680950588488680L;
	private List<Gene> genes;
	private List<FittedValue> fittedValues;
	private Float fitness;
	private int selectedHomeoticGeneNumber=-1;
	/**
	 * 覆盖了Object的toString方法，本方法将以字符串的形式输出个体中所包含的全部GenePiece信息。
	 */
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		StringBuffer result=new StringBuffer();
		for(Gene gene:genes){
			if(gene.getGeneType()==GeneType.HomeoticGene)
				result.append("同源基因：");
			else
				result.append("正常基因:");
			for(GenePiece genePiece:gene.getGenePieces())
				result.append(genePiece.getSymbol()+" ");
			result.append("\n");
		}
		return result.toString();
	}
	/**
	 * 比较当前个体的适应值和用户指定的某个个体的适应值，并将此结果返回
	 * @param　用户提供的待比较的个体
	 * @return 如果当前个体适应值小于参数适应值，返回负数，如果当前个体适应值等于参数个体适应值，返回0，如果当前个体适应值大于参数个体适应值，返回正数
	 */
	@Override
	public int compareTo(Individual o) {
		// TODO Auto-generated method stub
		return Float.compare(fitness, o.getFitness());
	}
	public List<Gene> getGenes() {
		return genes;
	}
	public void setGenes(List<Gene> genes) {
		this.genes = genes;
	}
	public List<FittedValue> getFittedValues() {
		return fittedValues;
	}
	public void setFittedValues(List<FittedValue> fittedValues) {
		this.fittedValues = fittedValues;
	}
	/**
	 * 返回当前个体的适应值
	 * @return 当前个体的适应值
	 */
	public Float getFitness(){
		return fitness;
	}
	/**
	 * 设置当前个体的适应值
	 * @param fitness 当前个体的适应值
	 */
	public void setFitness(Float fitness) {
		this.fitness = fitness;
	}
	/**
	 * 一个个体可能具有多个同源基因，一个个体内的多个同源基因可能产生多个不同的表达式，这个方法将返回在对某个确定的输入集求解的时候使用哪个同源基因翻译个体
	 * @return 被选择的同源基因的编号，从0开始，最大值为普通基因数量－1
	 */
	public int getSelectedHomeoticGeneNumber() {
		return selectedHomeoticGeneNumber;
	}
	/**
	 * 设置在求解输入集的时候将使用哪个同源基因上传个体。
	 * @param selectedHomeoticGeneNumber 同源基因编号
	 */
	public void setSelectedHomeoticGeneNumber(int selectedHomeoticGeneNumber) {
		this.selectedHomeoticGeneNumber = selectedHomeoticGeneNumber;
	}

	@Override
	public Individual clone(){
		// TODO Auto-generated method stub
		Individual individual=null;
		try {
			individual=(Individual) super.clone();
			if (genes!=null) {
				List<Gene> copiedGenes=new ArrayList<Gene>(genes.size());
				if(genes.size()!=0)
					for(int i=0;i<genes.size();i++)
						copiedGenes.add(genes.get(i).clone());
				individual.setGenes(copiedGenes);
			}
			if(fittedValues!=null){
				List<FittedValue> copiedFittedValues=new ArrayList<FittedValue>(fittedValues.size());
				if(fittedValues.size()!=0)
					for(int i=0;i<fittedValues.size();i++)
						copiedFittedValues.add(fittedValues.get(i).clone());
				individual.setFittedValues(copiedFittedValues);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return individual;
	}
}

domain\core\algOutput\Population.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


/**
 * 种群实体类
 * @author 申远
 *
 */
public class Population implements Serializable,Cloneable{
	
	private static final long serialVersionUID = -7846826225395737521L;
	private GepAlgRun gepAlgRun;
	private List<Individual> individuals;
	private long generationNum;
	
	/**
	 * 创建一个种群，默认的种群大小为20
	 */
	public Population() {
		// TODO Auto-generated constructor stub
		individuals=new ArrayList<Individual>(20);
	}
	
	/**
	 * 创建一个种群，用户需要提供种群大小
	 * @param size 种群大小
	 */
	public Population(int size){
		individuals=new ArrayList<Individual>(size);
	}
	public GepAlgRun getGepAlgRun() {
		return gepAlgRun;
	}
	public void setGepAlgRun(GepAlgRun gepAlgRun) {
		this.gepAlgRun = gepAlgRun;
	}
	/**
	 * 返回种群中所有的个体
	 * @return 种群中所有个体组成的List
	 */
	public List<Individual> getIndividuals(){
		return individuals;
	}
	/**
	 * 设置种群所包含的个体
	 * @param individuals 种群中个体的List
	 */
	public void setIndividuals(List<Individual> individuals) {
		this.individuals = individuals;
	}
	/**
	 * 向种群中添加个体
	 * @param individual 待添加的个体
	 */
	public void addIndividual(Individual individual){
		individuals.add(individual);
	}
	/**
	 * 返回种群中最优个体
	 * @return 种群中最优个体
	 */
	public Individual getBestIndividual(){
		Individual bestIndividual=individuals.get(0);
		for(Individual element:individuals)
			if(element.getFitness()>=bestIndividual.getFitness())
				bestIndividual=element;
		return bestIndividual;
	}
	/**
	 * 返回种群中最差个体
	 * @return 种群中最差个体
	 */
	public Individual getWorstIndividual(){
		Individual bestIndividual=individuals.get(0);
		for(Individual element:individuals)
			if(element.getFitness()<=bestIndividual.getFitness())
				bestIndividual=element;
		return bestIndividual;
	}
	/**
	 * 返回当前种群的代数，即当前种群是第几代种群
	 * @return 当前种群的代数
	 */
	public long getGenerationNum(){
		return generationNum;
	}
	/**
	 * 设置当前种群的代数，即设置当前种群是第几代种群
	 * @param generation 当前种群的代数
	 */
	public void setGenerationNum(long generationNum) {
		this.generationNum = generationNum;
	}
	/**
	 * 对当前种群进行复制，产生一个新的种群，对于string 这样的不可改变对象和int这样的基本数据类型和AlgRun，这是一个浅复制，对于其他的对象而言，这是一个深度复制
	 * @return 一个新的种群，二者不共享内存空间，只是具有相同的初始化的值。
	 */
	@Override
	public Population clone(){
		// TODO Auto-generated method stub
		Population o=null;
		try {
			o = (Population) super.clone();
			if(individuals!=null){
				List<Individual> copiedIndividual=new ArrayList<Individual>();
				if(individuals.size()!=0)
					for(int i=0;i<individuals.size();i++)
						copiedIndividual.add(individuals.get(i).clone());
				o.setIndividuals(copiedIndividual);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\core\algOutput\Population.java
package domain.core.algOutput;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


/**
 * 种群实体类
 * @author 申远
 *
 */
public class Population implements Serializable,Cloneable{
	
	private static final long serialVersionUID = -7846826225395737521L;
	private GepAlgRun gepAlgRun;
	private List<Individual> individuals;
	private long generationNum;
	
	/**
	 * 创建一个种群，默认的种群大小为20
	 */
	public Population() {
		// TODO Auto-generated constructor stub
		individuals=new ArrayList<Individual>(20);
	}
	
	/**
	 * 创建一个种群，用户需要提供种群大小
	 * @param size 种群大小
	 */
	public Population(int size){
		individuals=new ArrayList<Individual>(size);
	}
	public GepAlgRun getGepAlgRun() {
		return gepAlgRun;
	}
	public void setGepAlgRun(GepAlgRun gepAlgRun) {
		this.gepAlgRun = gepAlgRun;
	}
	/**
	 * 返回种群中所有的个体
	 * @return 种群中所有个体组成的List
	 */
	public List<Individual> getIndividuals(){
		return individuals;
	}
	/**
	 * 设置种群所包含的个体
	 * @param individuals 种群中个体的List
	 */
	public void setIndividuals(List<Individual> individuals) {
		this.individuals = individuals;
	}
	/**
	 * 向种群中添加个体
	 * @param individual 待添加的个体
	 */
	public void addIndividual(Individual individual){
		individuals.add(individual);
	}
	/**
	 * 返回种群中最优个体
	 * @return 种群中最优个体
	 */
	public Individual getBestIndividual(){
		Individual bestIndividual=individuals.get(0);
		for(Individual element:individuals)
			if(element.getFitness()>=bestIndividual.getFitness())
				bestIndividual=element;
		return bestIndividual;
	}
	/**
	 * 返回种群中最差个体
	 * @return 种群中最差个体
	 */
	public Individual getWorstIndividual(){
		Individual bestIndividual=individuals.get(0);
		for(Individual element:individuals)
			if(element.getFitness()<=bestIndividual.getFitness())
				bestIndividual=element;
		return bestIndividual;
	}
	/**
	 * 返回当前种群的代数，即当前种群是第几代种群
	 * @return 当前种群的代数
	 */
	public long getGenerationNum(){
		return generationNum;
	}
	/**
	 * 设置当前种群的代数，即设置当前种群是第几代种群
	 * @param generation 当前种群的代数
	 */
	public void setGenerationNum(long generationNum) {
		this.generationNum = generationNum;
	}
	/**
	 * 对当前种群进行复制，产生一个新的种群，对于string 这样的不可改变对象和int这样的基本数据类型和AlgRun，这是一个浅复制，对于其他的对象而言，这是一个深度复制
	 * @return 一个新的种群，二者不共享内存空间，只是具有相同的初始化的值。
	 */
	@Override
	public Population clone(){
		// TODO Auto-generated method stub
		Population o=null;
		try {
			o = (Population) super.clone();
			if(individuals!=null){
				List<Individual> copiedIndividual=new ArrayList<Individual>();
				if(individuals.size()!=0)
					for(int i=0;i<individuals.size();i++)
						copiedIndividual.add(individuals.get(i).clone());
				o.setIndividuals(copiedIndividual);
			}
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return o;
	}
}

domain\iservice\algConfiguration\IgepConfigurationService.java
package domain.iservice.algConfiguration;

import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IgepConfigurationService {
	public List<GepAlgConfiguration> getAllGepAlgConfiguration();
	public boolean saveGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration);
	/**
	 * 配置信息中有些属性有简单的函数决定关系，例如b＝a+1，调用前只需要填充b，此方法会自动计算a的值
	 * 前置条件：调用此方法前，请确定GepAlgConfiguration的所有子属性均填充完整。因此在正式使用GepAlgConfiguration这个类的对象的时候，请先调用此方法。
	 * 需要填充的参数有name，maxGenerationNum,selectionRange,accuracy,OperatorConfiguration中的所有属性，
	 * individualConfiguration中的individualNumber，GeneConfiguration中的NormalGeneHeaderLength,NormalGeneNum,
	 * HomeoticGeneHeaderLength,HomeoticGeneNum，及GeneConfiguration中所包含的函数集
	 * 此方法会改变传入的参数。
	 * @param gepAlgConfiguration
	 * @return
	 */
	public GepAlgConfiguration setGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration,DataSet dataSet);
}

domain\iservice\algConfiguration\IgepConfigurationService.java
package domain.iservice.algConfiguration;

import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IgepConfigurationService {
	public List<GepAlgConfiguration> getAllGepAlgConfiguration();
	public boolean saveGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration);
	/**
	 * 配置信息中有些属性有简单的函数决定关系，例如b＝a+1，调用前只需要填充b，此方法会自动计算a的值
	 * 前置条件：调用此方法前，请确定GepAlgConfiguration的所有子属性均填充完整。因此在正式使用GepAlgConfiguration这个类的对象的时候，请先调用此方法。
	 * 需要填充的参数有name，maxGenerationNum,selectionRange,accuracy,OperatorConfiguration中的所有属性，
	 * individualConfiguration中的individualNumber，GeneConfiguration中的NormalGeneHeaderLength,NormalGeneNum,
	 * HomeoticGeneHeaderLength,HomeoticGeneNum，及GeneConfiguration中所包含的函数集
	 * 此方法会改变传入的参数。
	 * @param gepAlgConfiguration
	 * @return
	 */
	public GepAlgConfiguration setGepAlgConfiguration(GepAlgConfiguration gepAlgConfiguration,DataSet dataSet);
}

domain\iservice\algInputDataProcess\IDataInputService.java
package domain.iservice.algInputDataProcess;


import java.io.File;
import java.io.IOException;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;

public interface IDataInputService {
	public DataSet processInputDataSet(File path) throws  BiffException, IOException;
	public boolean commit(DataSet dataSet);
	public DataSet getDataSetByName(String name);
}

domain\iservice\algInputDataProcess\IDataInputService.java
package domain.iservice.algInputDataProcess;


import java.io.File;
import java.io.IOException;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;

public interface IDataInputService {
	public DataSet processInputDataSet(File path) throws  BiffException, IOException;
	public boolean commit(DataSet dataSet);
	public DataSet getDataSetByName(String name);
}

domain\iservice\algOutput\IAlgOutputService.java
package domain.iservice.algOutput;

import java.io.File;
import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IAlgOutputService {
	public GepAlgRun run(GepAlgConfiguration gepAlgConfiguration, IAlgRunStep algRunStep, DataSet dataSet);
	public List<Float> getMaxFitnessInEveryGeneration(GepAlgRun gepAlgRun);
	public List<Float> getMinFitnessInEveryGeneration(GepAlgRun gepAlgRun);
	public boolean writeToFile(File file);
}

domain\iservice\algOutput\IAlgOutputService.java
package domain.iservice.algOutput;

import java.io.File;
import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IAlgOutputService {
	public GepAlgRun run(GepAlgConfiguration gepAlgConfiguration, IAlgRunStep algRunStep, DataSet dataSet);
	public List<Float> getMaxFitnessInEveryGeneration(GepAlgRun gepAlgRun);
	public List<Float> getMinFitnessInEveryGeneration(GepAlgRun gepAlgRun);
	public boolean writeToFile(File file);
}

domain\iservice\algOutput\IAlgRunStep.java
package domain.iservice.algOutput;

import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.FittedValue;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Individual;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IAlgRunStep {
	public GepAlgRun create(GepAlgConfiguration gepAlgConfiguration, DataSet dataSet);
	public List<FittedValue> calculateFittedValue(Individual individual, DataSet dataSet);
	/**
	 * 此方法的实现要负责设置个体的适应值，所选择的同源基因等
	 * @param population
	 * @return
	 */
	public List<Float> calculateFitness(Population population);
	public Population select(GepAlgRun gepAlgRun);
	public boolean mutate(Population population);
	public boolean isTransport(Population population);
	public boolean risTransport(Population population);
	public boolean geneTransport(Population population);
	public boolean onePointRecombine(Population population);
	public boolean twoPointRecombine(Population population);
	public boolean geneRecombine(Population population);
}

domain\iservice\algOutput\IAlgRunStep.java
package domain.iservice.algOutput;

import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.FittedValue;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Individual;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.GepAlgConfiguration;

public interface IAlgRunStep {
	public GepAlgRun create(GepAlgConfiguration gepAlgConfiguration, DataSet dataSet);
	public List<FittedValue> calculateFittedValue(Individual individual, DataSet dataSet);
	/**
	 * 此方法的实现要负责设置个体的适应值，所选择的同源基因等
	 * @param population
	 * @return
	 */
	public List<Float> calculateFitness(Population population);
	public Population select(GepAlgRun gepAlgRun);
	public boolean mutate(Population population);
	public boolean isTransport(Population population);
	public boolean risTransport(Population population);
	public boolean geneTransport(Population population);
	public boolean onePointRecombine(Population population);
	public boolean twoPointRecombine(Population population);
	public boolean geneRecombine(Population population);
}

domain\service\algConfiguration\GepConfigurationService.java
package domain.service.algConfiguration;

import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.iservice.algConfiguration.IgepConfigurationService;

public class GepConfigurationService implements IgepConfigurationService {

	@Override
	public List<GepAlgConfiguration> getAllGepAlgConfiguration() {
		// TODO Auto-generated method stub
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		return hibernateDataContext.findAll(GepAlgConfiguration.class);
	}

	@Override
	public boolean saveGepAlgConfiguration(
			GepAlgConfiguration gepAlgConfiguration) {
		// TODO Auto-generated method stub
		boolean result=true;
		try {
			IHibernateDataContext hibernateDataContext=new HibernateDataContext();
			hibernateDataContext.save(gepAlgConfiguration.getOperatorConfiguration());
			hibernateDataContext.save(gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration());
			hibernateDataContext.save(gepAlgConfiguration.getIndividualConfiguration());
			hibernateDataContext.save(gepAlgConfiguration);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result=false;
		}
		return result;
	}

	@Override
	public GepAlgConfiguration setGepAlgConfiguration(
			GepAlgConfiguration gepAlgConfiguration,DataSet dataSet) {
		// TODO Auto-generated method stub
		IndividualConfiguration individualConfiguration=gepAlgConfiguration.getIndividualConfiguration();
		GeneConfiguration geneConfiguration=individualConfiguration.getGeneConfiguration();
		int maxArity=maxArity(geneConfiguration.getFunctionUsed());
		geneConfiguration.setHomeoticGeneTailLength(geneConfiguration.getHomeoticGeneHeaderLength()*(maxArity-1)+1);
		geneConfiguration.setHomeoticGeneLength(geneConfiguration.getHomeoticGeneHeaderLength()+geneConfiguration.getHomeoticGeneTailLength());
		geneConfiguration.setNormalGeneTailLength(geneConfiguration.getNormalGeneHeaderLength()*(maxArity-1)+1);
		geneConfiguration.setNormalGeneLength(geneConfiguration.getNormalGeneHeaderLength()+geneConfiguration.getNormalGeneTailLength());
		individualConfiguration.setTotalGeneNumbers(geneConfiguration.getNormalGeneNumber()+geneConfiguration.getHomeoticGeneNumber());
		individualConfiguration.setNormalGeneTotalLength(geneConfiguration.getNormalGeneLength()*geneConfiguration.getNormalGeneNumber());
		individualConfiguration.setHomeoticGeneTotalLength(geneConfiguration.getHomeoticGeneLength()*geneConfiguration.getHomeoticGeneNumber());
		individualConfiguration.setGeneTotalLength(individualConfiguration.getHomeoticGeneTotalLength()+individualConfiguration.getNormalGeneTotalLength());
		gepAlgConfiguration.setMaxFitness(gepAlgConfiguration.getSelectionRange()*dataSet.getRowNum());
		return gepAlgConfiguration;
	}
	private int maxArity(List<Function> functions){
		int max=0;
		for(Function function:functions)
			if(function.getArity()>max)
				max=function.getArity();
		return max;
	}
}

domain\service\algConfiguration\GepConfigurationService.java
package domain.service.algConfiguration;

import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.iservice.algConfiguration.IgepConfigurationService;

public class GepConfigurationService implements IgepConfigurationService {

	@Override
	public List<GepAlgConfiguration> getAllGepAlgConfiguration() {
		// TODO Auto-generated method stub
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		return hibernateDataContext.findAll(GepAlgConfiguration.class);
	}

	@Override
	public boolean saveGepAlgConfiguration(
			GepAlgConfiguration gepAlgConfiguration) {
		// TODO Auto-generated method stub
		boolean result=true;
		try {
			IHibernateDataContext hibernateDataContext=new HibernateDataContext();
			hibernateDataContext.save(gepAlgConfiguration.getOperatorConfiguration());
			hibernateDataContext.save(gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration());
			hibernateDataContext.save(gepAlgConfiguration.getIndividualConfiguration());
			hibernateDataContext.save(gepAlgConfiguration);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result=false;
		}
		return result;
	}

	@Override
	public GepAlgConfiguration setGepAlgConfiguration(
			GepAlgConfiguration gepAlgConfiguration,DataSet dataSet) {
		// TODO Auto-generated method stub
		IndividualConfiguration individualConfiguration=gepAlgConfiguration.getIndividualConfiguration();
		GeneConfiguration geneConfiguration=individualConfiguration.getGeneConfiguration();
		int maxArity=maxArity(geneConfiguration.getFunctionUsed());
		geneConfiguration.setHomeoticGeneTailLength(geneConfiguration.getHomeoticGeneHeaderLength()*(maxArity-1)+1);
		geneConfiguration.setHomeoticGeneLength(geneConfiguration.getHomeoticGeneHeaderLength()+geneConfiguration.getHomeoticGeneTailLength());
		geneConfiguration.setNormalGeneTailLength(geneConfiguration.getNormalGeneHeaderLength()*(maxArity-1)+1);
		geneConfiguration.setNormalGeneLength(geneConfiguration.getNormalGeneHeaderLength()+geneConfiguration.getNormalGeneTailLength());
		individualConfiguration.setTotalGeneNumbers(geneConfiguration.getNormalGeneNumber()+geneConfiguration.getHomeoticGeneNumber());
		individualConfiguration.setNormalGeneTotalLength(geneConfiguration.getNormalGeneLength()*geneConfiguration.getNormalGeneNumber());
		individualConfiguration.setHomeoticGeneTotalLength(geneConfiguration.getHomeoticGeneLength()*geneConfiguration.getHomeoticGeneNumber());
		individualConfiguration.setGeneTotalLength(individualConfiguration.getHomeoticGeneTotalLength()+individualConfiguration.getNormalGeneTotalLength());
		gepAlgConfiguration.setMaxFitness(gepAlgConfiguration.getSelectionRange()*dataSet.getRowNum());
		return gepAlgConfiguration;
	}
	private int maxArity(List<Function> functions){
		int max=0;
		for(Function function:functions)
			if(function.getArity()>max)
				max=function.getArity();
		return max;
	}
}

domain\service\algInputDataProcess\DataInputService.java
package domain.service.algInputDataProcess;


import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataRow;
import domain.core.algInputDataProcess.DataSet;
import domain.iservice.algInputDataProcess.IDataInputService;

public class DataInputService implements IDataInputService {

	@Override
	public DataSet processInputDataSet(File path) throws BiffException, IOException {
		// TODO Auto-generated method stub
		DataRow sheetRow;
		List<DataColumn> sheetColumns;
		DataColumn resultColumn;
		DataColumn normalColumn;
		DataSet dataSet = null;
		Workbook readFile = Workbook.getWorkbook(new BufferedInputStream(
				new FileInputStream(path)));
		Sheet sheet = readFile.getSheet(0);
		int rows = sheet.getRows();
		int columns = sheet.getColumns();
		dataSet = new DataSet(rows-1, columns-1, path.getName());
		List<DataRow> sheetRows = new ArrayList<DataRow>(rows - 1);
		for (int i = 1; i < rows; i++) {
			sheetRow = new DataRow();
			sheetColumns = new ArrayList<DataColumn>(columns - 1);
			for (int j = 0; j < columns - 1; j++) {
				normalColumn = new DataColumn();
				normalColumn.setColumnName(sheet.getCell(j, 0).getContents());
				normalColumn.setValue(Float.valueOf(sheet.getCell(j, i).getContents()));
				sheetColumns.add(normalColumn);
			}
			resultColumn = new DataColumn();
			resultColumn.setColumnName(sheet.getCell(columns - 1,0).getContents());
			resultColumn.setValue(Float.valueOf(sheet.getCell(columns - 1,i).getContents()));
			sheetRow.setDataColumns(sheetColumns);
			sheetRow.setResultColumn(resultColumn);
			sheetRows.add(sheetRow);
		}
		dataSet.setDataRow(sheetRows);
		return dataSet;
	}
	@Override
	public boolean commit(DataSet dataSet) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public DataSet getDataSetByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

}

domain\service\algInputDataProcess\DataInputService.java
package domain.service.algInputDataProcess;


import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataRow;
import domain.core.algInputDataProcess.DataSet;
import domain.iservice.algInputDataProcess.IDataInputService;

public class DataInputService implements IDataInputService {

	@Override
	public DataSet processInputDataSet(File path) throws BiffException, IOException {
		// TODO Auto-generated method stub
		DataRow sheetRow;
		List<DataColumn> sheetColumns;
		DataColumn resultColumn;
		DataColumn normalColumn;
		DataSet dataSet = null;
		Workbook readFile = Workbook.getWorkbook(new BufferedInputStream(
				new FileInputStream(path)));
		Sheet sheet = readFile.getSheet(0);
		int rows = sheet.getRows();
		int columns = sheet.getColumns();
		dataSet = new DataSet(rows-1, columns-1, path.getName());
		List<DataRow> sheetRows = new ArrayList<DataRow>(rows - 1);
		for (int i = 1; i < rows; i++) {
			sheetRow = new DataRow();
			sheetColumns = new ArrayList<DataColumn>(columns - 1);
			for (int j = 0; j < columns - 1; j++) {
				normalColumn = new DataColumn();
				normalColumn.setColumnName(sheet.getCell(j, 0).getContents());
				normalColumn.setValue(Float.valueOf(sheet.getCell(j, i).getContents()));
				sheetColumns.add(normalColumn);
			}
			resultColumn = new DataColumn();
			resultColumn.setColumnName(sheet.getCell(columns - 1,0).getContents());
			resultColumn.setValue(Float.valueOf(sheet.getCell(columns - 1,i).getContents()));
			sheetRow.setDataColumns(sheetColumns);
			sheetRow.setResultColumn(resultColumn);
			sheetRows.add(sheetRow);
		}
		dataSet.setDataRow(sheetRows);
		return dataSet;
	}
	@Override
	public boolean commit(DataSet dataSet) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public DataSet getDataSetByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

}

domain\service\algOutput\AlgOutputService.java
package domain.service.algOutput;

import java.io.File;
import java.util.Collections;
import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.iservice.algOutput.IAlgOutputService;
import domain.iservice.algOutput.IAlgRunStep;

public class AlgOutputService implements IAlgOutputService {

	@Override
	public GepAlgRun run(GepAlgConfiguration gepAlgConfiguration, IAlgRunStep algRunStep, DataSet dataSet) {
		// TODO Auto-generated method stub
		List<Float> fitnessFloats;
		Float maxFitness;
		Float minFitness;
		GepAlgRun gepAlgRun=algRunStep.create(gepAlgConfiguration, dataSet);
		Population newPopulation;
		for(long i=0;i<gepAlgConfiguration.getMaxGeneration();i++){
			fitnessFloats=algRunStep.calculateFitness(gepAlgRun.getCurrentPopulation());
//			for(Individual individual:gepAlgRun.getCurrentPopulation().getIndividuals())
//				System.out.println(individual+"\n"+"-----------------------------");
//			System.out.println(i+"\n------------\n"+fitnessFloats);
			maxFitness=Collections.max(fitnessFloats);
			minFitness=Collections.min(fitnessFloats);
			gepAlgRun.getMaxFitness().add(maxFitness);
			gepAlgRun.getMinFitness().add(minFitness);
			commit(gepAlgRun.getCurrentPopulation());
			if(Math.abs(maxFitness-gepAlgConfiguration.getMaxFitness())<=gepAlgConfiguration.getAccuracy()||i==gepAlgConfiguration.getMaxGeneration()-2)
				break;
			newPopulation=algRunStep.select(gepAlgRun);
			newPopulation.setGenerationNum(i+1);
			gepAlgRun.getPopulations().add(newPopulation);
			algRunStep.mutate(gepAlgRun.getCurrentPopulation());
			algRunStep.isTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.risTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.geneTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.onePointRecombine(gepAlgRun.getCurrentPopulation());
			algRunStep.twoPointRecombine(gepAlgRun.getCurrentPopulation());
			algRunStep.geneRecombine(gepAlgRun.getCurrentPopulation());
		}
		commit(gepAlgRun);
		return gepAlgRun;
	}

	@Override
	public List<Float> getMaxFitnessInEveryGeneration(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		return gepAlgRun.getMaxFitness();
	}

	@Override
	public List<Float> getMinFitnessInEveryGeneration(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		return gepAlgRun.getMinFitness();
	}

	@Override
	public boolean writeToFile(File file) {
		// TODO Auto-generated method stub
		return false;
	}
	private boolean commit(Population population){
		return true;
	}
	private boolean commit(GepAlgRun gepAlgRun){
		return true;
	}
}

domain\service\algOutput\AlgOutputService.java
package domain.service.algOutput;

import java.io.File;
import java.util.Collections;
import java.util.List;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.iservice.algOutput.IAlgOutputService;
import domain.iservice.algOutput.IAlgRunStep;

public class AlgOutputService implements IAlgOutputService {

	@Override
	public GepAlgRun run(GepAlgConfiguration gepAlgConfiguration, IAlgRunStep algRunStep, DataSet dataSet) {
		// TODO Auto-generated method stub
		List<Float> fitnessFloats;
		Float maxFitness;
		Float minFitness;
		GepAlgRun gepAlgRun=algRunStep.create(gepAlgConfiguration, dataSet);
		Population newPopulation;
		for(long i=0;i<gepAlgConfiguration.getMaxGeneration();i++){
			fitnessFloats=algRunStep.calculateFitness(gepAlgRun.getCurrentPopulation());
//			for(Individual individual:gepAlgRun.getCurrentPopulation().getIndividuals())
//				System.out.println(individual+"\n"+"-----------------------------");
//			System.out.println(i+"\n------------\n"+fitnessFloats);
			maxFitness=Collections.max(fitnessFloats);
			minFitness=Collections.min(fitnessFloats);
			gepAlgRun.getMaxFitness().add(maxFitness);
			gepAlgRun.getMinFitness().add(minFitness);
			commit(gepAlgRun.getCurrentPopulation());
			if(Math.abs(maxFitness-gepAlgConfiguration.getMaxFitness())<=gepAlgConfiguration.getAccuracy()||i==gepAlgConfiguration.getMaxGeneration()-2)
				break;
			newPopulation=algRunStep.select(gepAlgRun);
			newPopulation.setGenerationNum(i+1);
			gepAlgRun.getPopulations().add(newPopulation);
			algRunStep.mutate(gepAlgRun.getCurrentPopulation());
			algRunStep.isTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.risTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.geneTransport(gepAlgRun.getCurrentPopulation());
			algRunStep.onePointRecombine(gepAlgRun.getCurrentPopulation());
			algRunStep.twoPointRecombine(gepAlgRun.getCurrentPopulation());
			algRunStep.geneRecombine(gepAlgRun.getCurrentPopulation());
		}
		commit(gepAlgRun);
		return gepAlgRun;
	}

	@Override
	public List<Float> getMaxFitnessInEveryGeneration(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		return gepAlgRun.getMaxFitness();
	}

	@Override
	public List<Float> getMinFitnessInEveryGeneration(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		return gepAlgRun.getMinFitness();
	}

	@Override
	public boolean writeToFile(File file) {
		// TODO Auto-generated method stub
		return false;
	}
	private boolean commit(Population population){
		return true;
	}
	private boolean commit(GepAlgRun gepAlgRun){
		return true;
	}
}

domain\service\algOutput\AlgRunStep.java
package domain.service.algOutput;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataRow;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.FittedValue;
import domain.core.algOutput.Gene;
import domain.core.algOutput.GenePiece;
import domain.core.algOutput.GenePieceType;
import domain.core.algOutput.GeneType;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Individual;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.iservice.algOutput.IAlgRunStep;

public class AlgRunStep implements IAlgRunStep {
	enum TransportEnum{
		IS,RIS,GENE;
		float rate;
		Integer[] transportElement;
		public void setRate(float rate){
			this.rate=rate;
		}
		public float getRate(){
			return rate;
		}
		public void setTransportElement(Integer[] transportElement){
			this.transportElement=transportElement;
		}
		public Integer[] getTransportElement(){
			return transportElement;
		}
	}
	enum Recombine{
		OnePoint,TwoPoint,GENE;
		float rate;
		public void setRate(float rate){
			this.rate=rate;
		}
		public float getRate(){
			return rate;
		}
	}
	@Override
	public GepAlgRun create(GepAlgConfiguration gepAlgConfiguration, DataSet dataSet) {
		// TODO Auto-generated method stub
		Individual individual;
		Gene addedGene;
		GeneConfiguration geneConfiguration=gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration();
		GepAlgRun gepAlgRun=new GepAlgRun();
		gepAlgRun.setDataSet(dataSet);
		gepAlgRun.setGepAlgConfiguration(gepAlgConfiguration);
		Population population=new Population();
		population.setIndividuals(new ArrayList<Individual>(gepAlgConfiguration.getIndividualConfiguration().getIndividualNumber()));
		population.setGenerationNum(0);
		population.setGepAlgRun(gepAlgRun);
		gepAlgRun.setCurrentPopulation(population);
		for(int i=0;i<gepAlgConfiguration.getIndividualConfiguration().getIndividualNumber();i++){
			individual=new Individual();
			individual.setGenes(new ArrayList<Gene>(gepAlgConfiguration.getIndividualConfiguration().getTotalGeneNumbers()));
			for(int j=0;j<geneConfiguration.getNormalGeneNumber();j++){
				addedGene=new Gene();
				addedGene.setGeneType(GeneType.NormalGene);
				addedGene.setGenePieces(new ArrayList<GenePiece>(geneConfiguration.getNormalGeneLength()));
				addedGene.getGenePieces().addAll(generateNormalHeaderPieces(geneConfiguration,dataSet));
				addedGene.getGenePieces().addAll(generateNormalTailPieces(geneConfiguration,dataSet));
				individual.getGenes().add(addedGene);
			}
			for(int j=0;j<geneConfiguration.getHomeoticGeneNumber();j++){
				addedGene=new Gene();
				addedGene.setGeneType(GeneType.HomeoticGene);
				addedGene.setGenePieces(new ArrayList<GenePiece>(geneConfiguration.getHomeoticGeneLength()));
				addedGene.getGenePieces().addAll(generateHomeoticHeaderPieces(geneConfiguration));
				addedGene.getGenePieces().addAll(generateHomeoticTailPieces(geneConfiguration));
				individual.getGenes().add(addedGene);
			}
			population.addIndividual(individual);
		}
		gepAlgRun.setMaxFitness(new LinkedList<Float>());
		gepAlgRun.setMinFitness(new LinkedList<Float>());
		return gepAlgRun;
	}

	@Override
	public List<FittedValue> calculateFittedValue(Individual individual, DataSet dataSet) {
		// TODO Auto-generated method stub
		
		return null;
	}
	@Override
	public List<Float> calculateFitness(Population population) {
		// TODO Auto-generated method stub
		GepAlgConfiguration gepAlgConfiguration=population.getGepAlgRun().getGepAlgConfiguration();
		GeneConfiguration geneConfiguration=gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration();
		int homeoticGeneNum=geneConfiguration.getHomeoticGeneNumber();
		DataSet dataSet=population.getGepAlgRun().getDataSet();
		List<Float> individualFitness=new ArrayList<Float>();
		float[] sumFitness=new float[homeoticGeneNum];
		float[][] individualsValues=new float[dataSet.getRowNum()][];
		float[] oneRowFitnesses;
		int bestHomeoticIndex;
		for(Individual individual:population.getIndividuals()){
			Arrays.fill(sumFitness, 0);
			for(int i=0;i<dataSet.getRowNum();i++){
				clearFunctionFlag(individual);
				individualsValues[i]=calcFittedValue(individual, dataSet.getDataRow().get(i), geneConfiguration);
				oneRowFitnesses=calcFitness(individualsValues[i], dataSet.getDataRow().get(i).getResultColumn(),gepAlgConfiguration);
				sumFitness=addToSumFitness(sumFitness, oneRowFitnesses);
			}
			bestHomeoticIndex=findBestHomeoticIndex(sumFitness);
			setIndividual(bestHomeoticIndex, individual, individualsValues, sumFitness,dataSet);
			individualFitness.add(individual.getFitness());
		}
		return individualFitness;
	}

	@Override
	public Population select(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		Population lastPopulation=gepAlgRun.getCurrentPopulation();
		float sumFitness=addFitness(lastPopulation);
		List<Float> probability=calculateProbability(lastPopulation, sumFitness);
		calculateCumulative(probability);
		Population newPopulation=createNewPopulation(lastPopulation, probability);
		return newPopulation;
	}

	@Override
	public boolean mutate(Population population) {
		// TODO Auto-generated method stub
		Random mutateRandom=new Random();
		Random funcOrVarRandom=new Random();
		Random functionRandom=new Random();
		Random variableRandom=new Random();
		Random funcOrConsRandom=new Random();
		Random constantRandom=new Random();
		GeneConfiguration geneConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration().getGeneConfiguration();
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		List<Function> functionList=geneConfiguration.getFunctionUsed();
		DataSet dataSet=population.getGepAlgRun().getDataSet();
		int functionNum=functionList.size();
		int variableNum=dataSet.getColumnNum();
		int totalNum=functionNum+variableNum;
		int type;
		GenePiece mutatedGenePiece;
		int variableIndex;
		for(Individual mutatingIndividual:population.getIndividuals()){
			for(Gene gene:mutatingIndividual.getGenes()){
				if(gene.getGeneType()==GeneType.NormalGene){
					for(int i=0;i<geneConfiguration.getNormalGeneHeaderLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							type=funcOrVarRandom.nextInt(totalNum);
							gene.getGenePieces().set(i, mutatedGenePiece);
							if(type<functionNum){
								mutatedGenePiece.setFunction(functionList.get(type).clone());
								mutatedGenePiece.setGenePieceType(GenePieceType.Function);
								mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
							}
							else {
								mutatedGenePiece.setFunction(null);
								mutatedGenePiece.setName(dataSet.getVariableUsed().get(type-functionNum).getColumnName());
								mutatedGenePiece.setVariableIndex(type-functionNum);
								mutatedGenePiece.setGenePieceType(GenePieceType.Variable);
								mutatedGenePiece.setSymbol(mutatedGenePiece.getName());
							}
						}
					}
					for(int i=0;i<geneConfiguration.getNormalGeneTailLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i+geneConfiguration.getNormalGeneHeaderLength(),mutatedGenePiece);
							mutatedGenePiece.setFunction(null);
							mutatedGenePiece.setGenePieceType(GenePieceType.Variable);
							variableIndex=variableRandom.nextInt(variableNum);
							mutatedGenePiece.setName(dataSet.getVariableUsed().get(variableIndex).getColumnName());
							mutatedGenePiece.setSymbol(mutatedGenePiece.getName());
						}
					}
				}
				else if(gene.getGeneType()==GeneType.HomeoticGene) {
					if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
						mutatedGenePiece=new GenePiece();
						gene.getGenePieces().set(0, mutatedGenePiece);
						mutatedGenePiece.setFunction(functionList.get(functionRandom.nextInt(functionList.size())).clone());
						mutatedGenePiece.setGenePieceType(GenePieceType.Function);
						mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
						mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
					}
					for(int i=1;i<geneConfiguration.getHomeoticGeneHeaderLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							type=funcOrConsRandom.nextInt(functionNum+geneConfiguration.getNormalGeneNumber());
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i, mutatedGenePiece);
							if(type<functionNum){
								mutatedGenePiece.setFunction(functionList.get(type).clone());
								mutatedGenePiece.setGenePieceType(GenePieceType.Function);
								mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
							}
							else {
								mutatedGenePiece.setFunction(null);
								mutatedGenePiece.setGenePieceType(GenePieceType.Constant);
								mutatedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
								mutatedGenePiece.setName(mutatedGenePiece.getValue().toString());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getValue().toString());
							}
						}
					}
					for(int i=0;i<geneConfiguration.getHomeoticGeneTailLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i+geneConfiguration.getHomeoticGeneHeaderLength(), mutatedGenePiece);
							mutatedGenePiece.setFunction(null);
							mutatedGenePiece.setGenePieceType(GenePieceType.Constant);
							mutatedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
							mutatedGenePiece.setName(mutatedGenePiece.getValue().toString());
							mutatedGenePiece.setSymbol(mutatedGenePiece.getValue().toString());
						}
					}
				}
			}
		}
		return true;
	}

	@Override
	public boolean isTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum isTransportEnum=TransportEnum.IS;
		isTransportEnum.setRate(operatorConfiguration.getIsTransportRate());
		isTransportEnum.setTransportElement(operatorConfiguration.getIsElement());
		iterateGeneInTransport(population, isTransportEnum);
		return true;
	}

	@Override
	public boolean risTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum risTransportEnum=TransportEnum.RIS;
		risTransportEnum.setRate(operatorConfiguration.getRisTransportRate());
		risTransportEnum.setTransportElement(operatorConfiguration.getRisElement());
		iterateGeneInTransport(population, risTransportEnum);
		return true;
	}

	@Override
	public boolean geneTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum geneTransportEnum=TransportEnum.GENE;
		geneTransportEnum.setRate(operatorConfiguration.getGeneTransportRate());
		iterateGeneInTransport(population, geneTransportEnum);
		return true;
	}

	@Override
	public boolean onePointRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.OnePoint;
		recombine.setRate(operatorConfiguration.getOnePointRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}

	@Override
	public boolean twoPointRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.TwoPoint;
		recombine.setRate(operatorConfiguration.getTwoPointRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}

	@Override
	public boolean geneRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.GENE;
		recombine.setRate(operatorConfiguration.getGeneRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}
	/**
	 * 产生一个普通基因的头部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @param dataSet 输入数据集
	 * @return 普通头部所有基因位组成的List
	 */
	private List<GenePiece> generateNormalHeaderPieces(GeneConfiguration geneConfiguration,DataSet dataSet){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random functionRandom=new Random();
		Random variableRandom=new Random();
		Random typeRandom=new Random();
		DataColumn dataColumn;
		Function function;
		int type;
		int variableIndex;
		GenePiece addedGenePiece;
		for(int i=0;i<geneConfiguration.getNormalGeneHeaderLength();i++){
			type=typeRandom.nextInt(dataSet.getVariableUsed().size()+geneConfiguration.getFunctionUsed().size());
			addedGenePiece=new GenePiece();
			if(type<dataSet.getVariableUsed().size()){
				addedGenePiece.setGenePieceType(GenePieceType.Variable);
				variableIndex=variableRandom.nextInt(dataSet.getVariableUsed().size());
				dataColumn=dataSet.getVariableUsed().get(variableIndex);
				addedGenePiece.setName(dataColumn.getColumnName());
				addedGenePiece.setSymbol(dataColumn.getColumnName());
				addedGenePiece.setVariableIndex(variableIndex);
			}
			else {
				addedGenePiece.setGenePieceType(GenePieceType.Function);
				function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
				addedGenePiece.setFunction(function);
				addedGenePiece.setName(function.getName());
				addedGenePiece.setSymbol(function.getSymbol());
			}
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个普通基因的尾部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @param dataSet 输入数据集
	 * @return 普通基因尾部所有基因位组成的List
	 */
	private List<GenePiece> generateNormalTailPieces(GeneConfiguration geneConfiguration,DataSet dataSet){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random variableRandom=new Random();
		DataColumn dataColumn;
		GenePiece addedGenePiece;
		int variableIndex;
		for(int i=0;i<geneConfiguration.getNormalGeneTailLength();i++){
			addedGenePiece=new GenePiece();
			addedGenePiece.setGenePieceType(GenePieceType.Variable);
			variableIndex=variableRandom.nextInt(dataSet.getVariableUsed().size());
			dataColumn=dataSet.getVariableUsed().get(variableIndex);
			addedGenePiece.setVariableIndex(variableIndex);
			addedGenePiece.setName(dataColumn.getColumnName());
			addedGenePiece.setSymbol(dataColumn.getColumnName());
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个同源基因的头部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @return 同源基因头部所有基因位组成的List
	 */
	private List<GenePiece> generateHomeoticHeaderPieces(GeneConfiguration geneConfiguration){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random functionRandom=new Random();
		Random constantRandom=new Random();
		Random typeRandom=new Random();
		Function function;
		int type;
		GenePiece addedGenePiece;
		addedGenePiece=new GenePiece();
		addedGenePiece.setGenePieceType(GenePieceType.Function);
		function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
		addedGenePiece.setFunction(function);
		addedGenePiece.setName(function.getName());
		addedGenePiece.setSymbol(function.getSymbol());
		genePieces.add(addedGenePiece);
		for(int i=1;i<geneConfiguration.getHomeoticGeneHeaderLength();i++){
			addedGenePiece=new GenePiece();
			type=typeRandom.nextInt(geneConfiguration.getFunctionUsed().size()+geneConfiguration.getNormalGeneNumber());
			if(type<geneConfiguration.getFunctionUsed().size()){
				addedGenePiece.setGenePieceType(GenePieceType.Function);
				function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
				addedGenePiece.setFunction(function);
				addedGenePiece.setName(function.getName());
				addedGenePiece.setSymbol(function.getSymbol());
			}
			else {
				addedGenePiece.setGenePieceType(GenePieceType.Constant);
				addedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
				addedGenePiece.setName("");
				addedGenePiece.setSymbol(addedGenePiece.getValue().toString());
			}
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个同源基因的尾部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @return 同源基因尾部所有基因位组成的List
	 */
	private List<GenePiece> generateHomeoticTailPieces(GeneConfiguration geneConfiguration){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random constantRandom=new Random();
		GenePiece addedGenePiece;
		
		for(int i=0;i<geneConfiguration.getHomeoticGeneTailLength();i++){
			addedGenePiece=new GenePiece();
			addedGenePiece.setGenePieceType(GenePieceType.Constant);
			addedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
			addedGenePiece.setName("");
			addedGenePiece.setSymbol(addedGenePiece.getValue().toString());
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 因为每一个个体有多个同源基因，因此每一个同源基因都可以产生一个拟合值，这里返回一个包含个体数组，里面每个同源基因计算出的拟合值。
	 * 目前是性能瓶颈，自用时间在15%－20%
	 * @param individual 待计算的个体
	 * @param row 需要产生拟合值的行
	 * @return 拟合值数组
	 */
	private float [] calcFittedValue(Individual individual,DataRow row,GeneConfiguration geneConfiguration){
		int normalGeneNum=geneConfiguration.getNormalGeneNumber();
		int homeoticGeneNum=geneConfiguration.getHomeoticGeneNumber();
		for(int i=0;i<normalGeneNum;i++){
			assignValueToVariable(individual.getGenes().get(i), row);
			calculateGeneValue(individual.getGenes().get(i), individual);
		}
		float result;
		float[] resulList=new float[homeoticGeneNum];
		for(int i=0;i<homeoticGeneNum;i++){
			result=calculateGeneValue(individual.getGenes().get(i+normalGeneNum), individual);
			resulList[i]=result;
		}
		return resulList;
	}
	/**
	 * 本方法给基因中的有效长度内的每一个变量赋值
	 * @param gene 待赋值的基因
	 * @param row 一个保存着变量值的输入行
	 */
	private void assignValueToVariable(Gene gene, DataRow row) {
		// TODO Auto-generated method stub
		GenePiece genePiece;
		int effectiveLength=calcEfficientLength(gene);
		List<GenePiece> genePieces=gene.getGenePieces();
		List<DataColumn> dataColumns=row.getDataColumns();
		for(int i=0;i<effectiveLength;i++){
			if((genePiece=genePieces.get(i)).getGenePieceType()==GenePieceType.Variable){
				genePiece.setValue(dataColumns.get(genePiece.getVariableIndex()).getValue());
			}
		}
	}
	/**
	 * 计算给定基因的值，这个基因可能是普通基因，也可能是同源基因，并将结果保存到到基因对应的属性里面
	 * @param gene 待计算的基因
	 * @param individual 基因所属的个体
	 * @return 基因的值，这个结果同样也会被保存到基因对应的属性里面
	 */
	private float calculateGeneValue(Gene gene, Individual individual) {
		// TODO Auto-generated method stub
		int length=calcEfficientLength(gene);
		GenePiece lastNonTerminate;
		int arity;
		while(length>1){
			lastNonTerminate=findLastNonTerminate(gene, length);
			arity=lastNonTerminate.getFunction().getArity();
			execMathFunction(gene, individual,lastNonTerminate,length);
			length-=arity;
		}
		float value=gene.getGenePieces().get(0).getValue();
		gene.setValue(value);
		return value;
	}
	
	/**
	 * 这个方法计算每个基因的有效长度，前置条件是如果一个基因位上有相关联的函数,本方法只能在计算基因值之前被调用一次，不可在计算基因值过程中被调用
	 * @param gene 被计算的基因
	 * @return 基因的有效长度
	 */
	private int calcEfficientLength(Gene gene){
		int length=1;
		int arity;
		GenePiece genePiece;
		for(int i=0;i<length;i++){
			genePiece=gene.getGenePieces().get(i);
			if(genePiece.getGenePieceType()==GenePieceType.Function){
				arity=genePiece.getFunction().getArity();
				length+=arity;
			}					
		}
		return length;
	}
	/**
	 * 找到最后一个非终结字符，即有效长度内最后一个函数，前置条件是被计算过的函数所对应的GenePiece的used要被置为true，没有被计算过的被置为false
	 * @param gene 所需要搜索的基因
	 * @param efficientLength 有效长度
	 * @return 基因有效长度内最后一个函数所在的基因位
	 */
	private GenePiece findLastNonTerminate(Gene gene,int efficientLength){
		GenePiece genePiece=null;
		for(int i=efficientLength-1;i>=0;i--){
			genePiece=gene.getGenePieces().get(i);
			if(genePiece.getGenePieceType()==GenePieceType.Function){
				if(genePiece.getFunction().isUsed()==false){
					break;
				}
			}
		}
		return genePiece;
	}
	/**
	 * 执行某个数学函数，并返回求解的结果
	 * @param gene 待执行的函数所在的基因
	 * @param individual 待执行的函数所在的个体
	 * @param computedGenePiece 待执行的函数所在基因位
	 * @param efficientLength 有效长度
	 * @return 数学函数计算出的结果
	 */
	private float execMathFunction(Gene gene,Individual individual,GenePiece computedGenePiece,int efficientLength){
		Function function=computedGenePiece.getFunction();
		int arity=function.getArity();
		float[] parameterArray=new float[arity];
		GenePiece[] genePieces=new GenePiece[arity];
		for(int i=0;i<arity;i++)
			genePieces[i]=gene.getGenePieces().get(efficientLength-i-1);
		if(gene.getGeneType()==GeneType.HomeoticGene){
			int index;
			GenePiece genePiece;
			for(int i=0;i<genePieces.length;i++){
				genePiece=genePieces[genePieces.length-1-i];
				if(genePiece.getGenePieceType()==GenePieceType.Function)
					parameterArray[i]=genePiece.getValue();
				else {
					index=(int)(float)genePiece.getValue();
					parameterArray[i]=individual.getGenes().get(index).getValue();
				}
			}		
		}
		else {
			for(int i=0;i<genePieces.length;i++)
				parameterArray[i]=genePieces[genePieces.length-1-i].getValue();
		}
		float value=function.operate(parameterArray);
		computedGenePiece.setValue(value);
		function.setUsed(true);
		return value;
	}

	/**
	 * 本方法负责从拟合值到适应值的转换，因为存在同源基因，所以一个个体对应多个拟合值，因此一个个体也对应多个适应值，这里只计算适应值矩阵的一行
	 * @param individualsValues 拟合值数组
	 * @param y 保存着函数值的列
	 * @return 得到的适应值矩阵中的某一行
	 */
	private float[] calcFitness(float[] individualsValues,DataColumn y,GepAlgConfiguration gepAlgConfiguration){
		float[] result=new float[individualsValues.length];
		float minus;
		float abs;
		for(int i=0;i<result.length;i++){
			minus=individualsValues[i]-y.getValue();
			abs=Math.abs(minus);
			if(abs<gepAlgConfiguration.getAccuracy())
				abs=0;
			result[i]=gepAlgConfiguration.getSelectionRange()-abs;
		}
		return result;
	}
	/**
	 * 本方法负责对适应值矩阵的每一列求和，最后得到一个行矩阵，保存这适应值矩阵中每列的和
	 * @param sumFitness 保存和的数组
	 * @param rowValue 某一行的适应值
	 * @return 求和后的数组
	 */
	private float[] addToSumFitness(float[] sumFitness,float[] rowValue){
		for(int i=0;i<sumFitness.length;i++)
			sumFitness[i]=rowValue[i]+sumFitness[i];
		return sumFitness;
	}
	/**
	 * 本方法负责清楚所有函数上的已使用的标记
	 * @param individual 待清除个体
	 */
	private void clearFunctionFlag(Individual individual){
		int geneNum=individual.getGenes().size();
		List<Gene> genes=individual.getGenes();
		List<GenePiece> genePieces;
		Gene gene;
		GenePiece genePiece;
		int geneLength;
		for(int i=0;i<geneNum;i++){
			gene=genes.get(i);
			genePieces=gene.getGenePieces();
			geneLength=genePieces.size();
			for(int j=0;j<geneLength;j++)
				if((genePiece=genePieces.get(j)).getGenePieceType()==GenePieceType.Function)
					genePiece.getFunction().setUsed(false);
		}

	}
	/**
	 * 本方法求指定适应度矩阵行的最大值，并返回最大值所在列的索引
	 * @param sumFitness
	 * @return 最大适应值所在的列，若所有适应值均不合法，则返回－1
	 */
	private int findBestHomeoticIndex(float[] sumFitness){
		int k=-1;
		float value=-1;
		float fitness;
		for(int i=0;i<sumFitness.length;i++){
			fitness=sumFitness[i];
			if(Float.isInfinite(fitness)||Float.isInfinite(fitness)||fitness<=0)
				continue;
			else if(fitness>value){
				value=fitness;
				k=i;
			}		
		}

		return k;
	}
	/**
	 * 本方法将设置个体被选择的同源基因，个体的适应值，个体的拟合值
	 * @param index 最佳适应值所在的列
	 * @param individual 待设置个体
	 * @param individualVaule 拟合值矩阵
	 * @param fitness 适应值行
	 * @param dataSet 输入数据集
	 * @return
	 */
	private Individual setIndividual(int index,Individual individual,float[][] individualVaule,float[] fitness,DataSet dataSet){
		if(index==-1){
			individual.setFitness((float) 0);
			individual.setSelectedHomeoticGeneNumber(-1);
			individual.setFittedValues(null);
		}
		else {
			individual.setFitness(fitness[index]);
			individual.setSelectedHomeoticGeneNumber(index);
			List<FittedValue> fittedValues=new ArrayList<FittedValue>(individualVaule.length);
			FittedValue fittedValue;
			for(int i=0;i<individualVaule.length;i++){
				fittedValue=new FittedValue();
				fittedValue.setFittedValue(individualVaule[i][index]);
				fittedValue.setDataRow(dataSet.getDataRow().get(i));
				fittedValues.add(fittedValue);
			}
			individual.setFittedValues(fittedValues);
		}
		return individual;
	}
	/**
	 * 计算种群的总适应值
	 * @param population 待计算的种群
	 * @return 种群总适应值
	 */
	private float addFitness(Population population){
		float sum=0;
		for(Individual individual:population.getIndividuals())
			sum+=individual.getFitness();
		return sum;
	}
	/**
	 * 计算个体比例适应值，即每个个体在种群适应值中所占的比例
	 * @param population 待计算种群
	 * @param sum 种群适应值之和
	 * @return 保存有个体比例适应值的List
	 */
	private List<Float> calculateProbability(Population population,float sum){
		float divide;
		List<Float> floatList=new ArrayList<Float>(population.getIndividuals().size());
		for(Individual individual:population.getIndividuals()){
			divide=individual.getFitness()/sum;
			floatList.add(divide);
		}
		return floatList;
	}
	/**
	 * 计算个体累加适应值，即第n项的累加适应值等于前n项个体比例适应值之和
	 * @param probability 个体比例适应值之和
	 * @return 个体累加适应值
	 */
	private List<Float> calculateCumulative(List<Float> probability){
		float sum=0;
		for(int i=0;i<probability.size();i++){
			sum+=probability.get(i);
			probability.set(i, sum);
		}
		return probability;
	}
	/**
	 * 创建一个新的种群，使用轮盘赌+冠军策略
	 * @param original 原始种群
	 * @param cumulativeProbability 个体累加适应值
	 * @return 新的种群
	 */
	private Population createNewPopulation(Population original,List<Float> cumulativeProbability){
		Population resultPopulation=new Population(original.getIndividuals().size());
		Individual bestIndividual=original.getBestIndividual().clone();
		resultPopulation.addIndividual(bestIndividual);
		Random random=new Random();
		int position;
		Individual insertedIndividual;
		for(int i=1;i<cumulativeProbability.size();i++){
			position=search(cumulativeProbability, random.nextFloat());
			insertedIndividual=original.getIndividuals().get(position).clone();
			resultPopulation.addIndividual(insertedIndividual);
		}
		resultPopulation.setGepAlgRun(original.getGepAlgRun());
		return resultPopulation;
	}
	/**
	 * 查找在累加适应值中，某个小数值具体属于哪个范围，返回范围的下限（即使擦到上限）
	 * @param floats 个体累加适应值
	 * @param random 待查询的小数
	 * @return 累加适应值所代表的个体的index
	 */
	private int search(List<Float> floats,float random){
		for(int i=0;i<floats.size();i++){
			if(random<=floats.get(i))
				return i;
		}
		return floats.size()-1;
	}
	/**
	 * 遍历每个基因，决定是否进行转座，如果进行转座，则调用下一级函数
	 * @param population 要进行转座的种群
	 * @param transportEnum 转座枚举类
	 */
	private void iterateGeneInTransport(Population population,TransportEnum transportEnum){
		Random transportRandom=new Random();
		GeneConfiguration geneConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration().getGeneConfiguration();
		int headerLength;
		int tailLength;
		Gene gene;
		for(Individual individual:population.getIndividuals()){
			for(int i=0;i<individual.getGenes().size();i++){
				gene=individual.getGenes().get(i);
				if(transportRandom.nextFloat()<transportEnum.getRate()){
					if(transportEnum==TransportEnum.GENE){
						if(gene.getGeneType()==GeneType.HomeoticGene)
							break;
						else {
							transportParaDetermination(individual.getGenes(), i);
							break;
						}
					}
					else {
						if(gene.getGeneType()==GeneType.NormalGene){
							headerLength=geneConfiguration.getNormalGeneHeaderLength();
							tailLength=geneConfiguration.getNormalGeneTailLength();
						}
						else {
							headerLength=geneConfiguration.getHomeoticGeneHeaderLength();
							tailLength=geneConfiguration.getHomeoticGeneTailLength();
						}
						transportParaDetermination(gene, transportEnum, headerLength, tailLength);
						break;
					}
				}			
			}
		}
	}
	/**
	 * 普通基因的基因转座，即将指定基因插入个体的首位，成为第一个基因
	 * @param genes 个体中所有的基因
	 * @param sourceIndex 将要插入头部的基因
	 */
	private void transportParaDetermination(List<Gene> genes,int sourceIndex){
		Gene gene=genes.remove(sourceIndex);
		genes.add(0, gene);
	}
	/**
	 * 确定IS和RIS转座相关的参数，并通过调用有关方法开始转座
	 * @param gene 待转座基因
	 * @param transportEnum 转座类型枚举类
	 * @param headerLength 转座基因头长
	 * @param tailLength 转座基因尾长
	 */
	private void transportParaDetermination(Gene gene,TransportEnum transportEnum,int headerLength,int tailLength){
		Random sourceLocRandom=new Random();
		Random destLocRandom=new Random();
		Random elementLengthRandom=new Random();
		int elementLength=0;
		int sourceLoc=0;
		int destLoc=0;
		switch (transportEnum) {
		case IS:
			elementLength=transportEnum.transportElement[elementLengthRandom.nextInt(transportEnum.transportElement.length)];
			sourceLoc=sourceLocRandom.nextInt(headerLength+tailLength-elementLength);
			destLoc=destLocRandom.nextInt(headerLength-elementLength-1)+1;
			break;
		case RIS:
			elementLength=transportEnum.transportElement[elementLengthRandom.nextInt(transportEnum.transportElement.length)];
			sourceLoc=searchFunction(gene, destLocRandom.nextInt(headerLength));
			destLoc=0;
			break;
		}
		if(sourceLoc!=-1){
			transportBegin(gene.getGenePieces(), sourceLoc, destLoc, elementLength, headerLength, transportEnum);
		}
	}
	/**
	 * 在给定的基因中指定为位置后面寻找第一个函数，若找到则返回函数的index，若找不到则返回－1
	 * @param gene 待搜索的基因
	 * @param index 开始搜索的位置
	 * @return 结果
	 */
	private int searchFunction(Gene gene,int index){
		int result=-1;
		for(int i=index;i<gene.getGenePieces().size();i++){
			if(gene.getGenePieces().get(i).getGenePieceType()==GenePieceType.Function){
				result=i;
				break;
			}
		}
		return result;
	}
	/**
	 * 开始转座
	 * @param genePieces 待转座的基因片段
	 * @param source 转座开始的地方
	 * @param dest 转座的目标
	 * @param length 转座的长度
	 * @param headerLength 基因头长
	 * @param transportEnum 转座枚举类型
	 */
	private void transportBegin(List<GenePiece> genePieces,int source,int dest,int length,int headerLength,TransportEnum transportEnum){
		List<GenePiece> copiedSource=new ArrayList<GenePiece>(length);
		for(int i=0;i<length;i++)
			copiedSource.add((genePieces.get(i+source).clone()));
		int forLength=headerLength-dest-length;
		for(int i=0;i<forLength;i++){
			genePieces.set(headerLength-i-1, genePieces.get(headerLength-i-1-length));
		}
		for(int i=0;i<length;i++){
			genePieces.set(dest+i, copiedSource.get(i));
		}
	}
	/**
	 * 遍历种群中的每一个个体，进行重组，如果发生重组，每个个体只能在本函数调用中发生一次重组
	 * @param individualConfiguration 个体配置信息
	 * @param population 种群
	 * @param recombine 重组枚举类型
	 */
	private void iterateGeneInRecombine(IndividualConfiguration individualConfiguration,Population population,Recombine recombine){
		Random recombineOneRandom=new Random();
		Random recombineOtherRandom=new Random();
		for(int i=0;i<population.getIndividuals().size()-1;i++){
			if(recombineOneRandom.nextFloat()<recombine.getRate()){
				for(int j=i+1;j<population.getIndividuals().size();j++){
					if(recombineOtherRandom.nextFloat()<recombine.getRate()){
						recombineParaDetermination(population.getIndividuals().get(i), population.getIndividuals().get(j), recombine, individualConfiguration);
						break;
					}
				}
			}
		}
	}
	/**
	 * 确定重组的各种参数
	 * @param a 参加重组的个体a
	 * @param b 参加重组的个体b
	 * @param recombine 重组的枚举变量
	 * @param individualConfiguration 个体配置信息
	 */
	private void recombineParaDetermination(Individual a,Individual b,Recombine recombine,IndividualConfiguration individualConfiguration){
		Random startRandom=new Random();
		Random endRandom=new Random();
		GeneConfiguration geneConfiguration=individualConfiguration.getGeneConfiguration();
		int start=-1;
		int end=-1;
		switch (recombine) {
		case OnePoint:
			end=individualConfiguration.getNormalGeneTotalLength();
			start=startRandom.nextInt(end);
			break;
		case TwoPoint:
			start=startRandom.nextInt(individualConfiguration.getNormalGeneTotalLength());
			end=endRandom.nextInt(individualConfiguration.getNormalGeneTotalLength());
			if(start>end){
				int temp=start;
				start=end;
				end=temp;
			}
			if (start==end) {
				return;
			}
			break;
		case GENE:
			int geneNo=startRandom.nextInt(geneConfiguration.getNormalGeneNumber());
			start=geneNo*geneConfiguration.getNormalGeneLength();
			end=start+geneConfiguration.getNormalGeneLength();
			break;
		}
		beginRecombine(start, end, a, b,geneConfiguration);
	}
	/**
	 * 开始正式进行重组
	 * @param start 重组开始的位置，这个位置是在个体所有基因位里面的index
	 * @param end 重组结束的位置，这个位置是在个体所有基因位里面的index
	 * @param a 参加重组的个体a
	 * @param b 参加重组的个体b
	 * @param geneConfiguration 基因配置信息
	 */
	private void beginRecombine(int start,int end,Individual a,Individual b,GeneConfiguration geneConfiguration){
		Gene gene;
		GenePiece genePiece;
		List<GenePiece> aGenePieces;
		List<GenePiece> bGenePieces;
		int startGeneNo=start/geneConfiguration.getNormalGeneLength();
		int startGenePieceNo=start%geneConfiguration.getNormalGeneLength();
		int endGeneNo=end/geneConfiguration.getNormalGeneLength();
		int endGenePieceNo=end%geneConfiguration.getNormalGeneLength();
		if(endGenePieceNo==0){
			endGeneNo--;
			endGenePieceNo=geneConfiguration.getNormalGeneLength();
		}
		aGenePieces=a.getGenes().get(startGeneNo).getGenePieces();
		bGenePieces=b.getGenes().get(startGeneNo).getGenePieces();
		for(int i=startGenePieceNo;i<geneConfiguration.getNormalGeneLength();i++){
			genePiece=aGenePieces.get(i);
			aGenePieces.set(i , bGenePieces.get(i));
			bGenePieces.set(i, genePiece);
		}
		if(startGeneNo!=endGeneNo){
			for(int i=0;i<endGeneNo-startGeneNo-1;i++){
				gene=a.getGenes().get(i+startGeneNo+1);
				a.getGenes().set(i+startGeneNo+1, b.getGenes().get(i+startGeneNo+1));
				b.getGenes().set(i+startGeneNo+1, gene);
			}
			aGenePieces=a.getGenes().get(endGeneNo).getGenePieces();
			bGenePieces=b.getGenes().get(endGeneNo).getGenePieces();
			for(int i=0;i<endGenePieceNo;i++){
				genePiece=aGenePieces.get(i);
				aGenePieces.set(i, bGenePieces.get(i));
				bGenePieces.set(i, genePiece);
			}			
		}
	}
}

domain\service\algOutput\AlgRunStep.java
package domain.service.algOutput;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import domain.core.algInputDataProcess.DataColumn;
import domain.core.algInputDataProcess.DataRow;
import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.FittedValue;
import domain.core.algOutput.Gene;
import domain.core.algOutput.GenePiece;
import domain.core.algOutput.GenePieceType;
import domain.core.algOutput.GeneType;
import domain.core.algOutput.GepAlgRun;
import domain.core.algOutput.Individual;
import domain.core.algOutput.Population;
import domain.core.algconfiguration.Function;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.iservice.algOutput.IAlgRunStep;

public class AlgRunStep implements IAlgRunStep {
	enum TransportEnum{
		IS,RIS,GENE;
		float rate;
		Integer[] transportElement;
		public void setRate(float rate){
			this.rate=rate;
		}
		public float getRate(){
			return rate;
		}
		public void setTransportElement(Integer[] transportElement){
			this.transportElement=transportElement;
		}
		public Integer[] getTransportElement(){
			return transportElement;
		}
	}
	enum Recombine{
		OnePoint,TwoPoint,GENE;
		float rate;
		public void setRate(float rate){
			this.rate=rate;
		}
		public float getRate(){
			return rate;
		}
	}
	@Override
	public GepAlgRun create(GepAlgConfiguration gepAlgConfiguration, DataSet dataSet) {
		// TODO Auto-generated method stub
		Individual individual;
		Gene addedGene;
		GeneConfiguration geneConfiguration=gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration();
		GepAlgRun gepAlgRun=new GepAlgRun();
		gepAlgRun.setDataSet(dataSet);
		gepAlgRun.setGepAlgConfiguration(gepAlgConfiguration);
		Population population=new Population();
		population.setIndividuals(new ArrayList<Individual>(gepAlgConfiguration.getIndividualConfiguration().getIndividualNumber()));
		population.setGenerationNum(0);
		population.setGepAlgRun(gepAlgRun);
		gepAlgRun.setCurrentPopulation(population);
		for(int i=0;i<gepAlgConfiguration.getIndividualConfiguration().getIndividualNumber();i++){
			individual=new Individual();
			individual.setGenes(new ArrayList<Gene>(gepAlgConfiguration.getIndividualConfiguration().getTotalGeneNumbers()));
			for(int j=0;j<geneConfiguration.getNormalGeneNumber();j++){
				addedGene=new Gene();
				addedGene.setGeneType(GeneType.NormalGene);
				addedGene.setGenePieces(new ArrayList<GenePiece>(geneConfiguration.getNormalGeneLength()));
				addedGene.getGenePieces().addAll(generateNormalHeaderPieces(geneConfiguration,dataSet));
				addedGene.getGenePieces().addAll(generateNormalTailPieces(geneConfiguration,dataSet));
				individual.getGenes().add(addedGene);
			}
			for(int j=0;j<geneConfiguration.getHomeoticGeneNumber();j++){
				addedGene=new Gene();
				addedGene.setGeneType(GeneType.HomeoticGene);
				addedGene.setGenePieces(new ArrayList<GenePiece>(geneConfiguration.getHomeoticGeneLength()));
				addedGene.getGenePieces().addAll(generateHomeoticHeaderPieces(geneConfiguration));
				addedGene.getGenePieces().addAll(generateHomeoticTailPieces(geneConfiguration));
				individual.getGenes().add(addedGene);
			}
			population.addIndividual(individual);
		}
		gepAlgRun.setMaxFitness(new LinkedList<Float>());
		gepAlgRun.setMinFitness(new LinkedList<Float>());
		return gepAlgRun;
	}

	@Override
	public List<FittedValue> calculateFittedValue(Individual individual, DataSet dataSet) {
		// TODO Auto-generated method stub
		
		return null;
	}
	@Override
	public List<Float> calculateFitness(Population population) {
		// TODO Auto-generated method stub
		GepAlgConfiguration gepAlgConfiguration=population.getGepAlgRun().getGepAlgConfiguration();
		GeneConfiguration geneConfiguration=gepAlgConfiguration.getIndividualConfiguration().getGeneConfiguration();
		int homeoticGeneNum=geneConfiguration.getHomeoticGeneNumber();
		DataSet dataSet=population.getGepAlgRun().getDataSet();
		List<Float> individualFitness=new ArrayList<Float>();
		float[] sumFitness=new float[homeoticGeneNum];
		float[][] individualsValues=new float[dataSet.getRowNum()][];
		float[] oneRowFitnesses;
		int bestHomeoticIndex;
		for(Individual individual:population.getIndividuals()){
			Arrays.fill(sumFitness, 0);
			for(int i=0;i<dataSet.getRowNum();i++){
				clearFunctionFlag(individual);
				individualsValues[i]=calcFittedValue(individual, dataSet.getDataRow().get(i), geneConfiguration);
				oneRowFitnesses=calcFitness(individualsValues[i], dataSet.getDataRow().get(i).getResultColumn(),gepAlgConfiguration);
				sumFitness=addToSumFitness(sumFitness, oneRowFitnesses);
			}
			bestHomeoticIndex=findBestHomeoticIndex(sumFitness);
			setIndividual(bestHomeoticIndex, individual, individualsValues, sumFitness,dataSet);
			individualFitness.add(individual.getFitness());
		}
		return individualFitness;
	}

	@Override
	public Population select(GepAlgRun gepAlgRun) {
		// TODO Auto-generated method stub
		Population lastPopulation=gepAlgRun.getCurrentPopulation();
		float sumFitness=addFitness(lastPopulation);
		List<Float> probability=calculateProbability(lastPopulation, sumFitness);
		calculateCumulative(probability);
		Population newPopulation=createNewPopulation(lastPopulation, probability);
		return newPopulation;
	}

	@Override
	public boolean mutate(Population population) {
		// TODO Auto-generated method stub
		Random mutateRandom=new Random();
		Random funcOrVarRandom=new Random();
		Random functionRandom=new Random();
		Random variableRandom=new Random();
		Random funcOrConsRandom=new Random();
		Random constantRandom=new Random();
		GeneConfiguration geneConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration().getGeneConfiguration();
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		List<Function> functionList=geneConfiguration.getFunctionUsed();
		DataSet dataSet=population.getGepAlgRun().getDataSet();
		int functionNum=functionList.size();
		int variableNum=dataSet.getColumnNum();
		int totalNum=functionNum+variableNum;
		int type;
		GenePiece mutatedGenePiece;
		int variableIndex;
		for(Individual mutatingIndividual:population.getIndividuals()){
			for(Gene gene:mutatingIndividual.getGenes()){
				if(gene.getGeneType()==GeneType.NormalGene){
					for(int i=0;i<geneConfiguration.getNormalGeneHeaderLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							type=funcOrVarRandom.nextInt(totalNum);
							gene.getGenePieces().set(i, mutatedGenePiece);
							if(type<functionNum){
								mutatedGenePiece.setFunction(functionList.get(type).clone());
								mutatedGenePiece.setGenePieceType(GenePieceType.Function);
								mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
							}
							else {
								mutatedGenePiece.setFunction(null);
								mutatedGenePiece.setName(dataSet.getVariableUsed().get(type-functionNum).getColumnName());
								mutatedGenePiece.setVariableIndex(type-functionNum);
								mutatedGenePiece.setGenePieceType(GenePieceType.Variable);
								mutatedGenePiece.setSymbol(mutatedGenePiece.getName());
							}
						}
					}
					for(int i=0;i<geneConfiguration.getNormalGeneTailLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i+geneConfiguration.getNormalGeneHeaderLength(),mutatedGenePiece);
							mutatedGenePiece.setFunction(null);
							mutatedGenePiece.setGenePieceType(GenePieceType.Variable);
							variableIndex=variableRandom.nextInt(variableNum);
							mutatedGenePiece.setName(dataSet.getVariableUsed().get(variableIndex).getColumnName());
							mutatedGenePiece.setSymbol(mutatedGenePiece.getName());
						}
					}
				}
				else if(gene.getGeneType()==GeneType.HomeoticGene) {
					if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
						mutatedGenePiece=new GenePiece();
						gene.getGenePieces().set(0, mutatedGenePiece);
						mutatedGenePiece.setFunction(functionList.get(functionRandom.nextInt(functionList.size())).clone());
						mutatedGenePiece.setGenePieceType(GenePieceType.Function);
						mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
						mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
					}
					for(int i=1;i<geneConfiguration.getHomeoticGeneHeaderLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							type=funcOrConsRandom.nextInt(functionNum+geneConfiguration.getNormalGeneNumber());
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i, mutatedGenePiece);
							if(type<functionNum){
								mutatedGenePiece.setFunction(functionList.get(type).clone());
								mutatedGenePiece.setGenePieceType(GenePieceType.Function);
								mutatedGenePiece.setName(mutatedGenePiece.getFunction().getName());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getFunction().getSymbol());
							}
							else {
								mutatedGenePiece.setFunction(null);
								mutatedGenePiece.setGenePieceType(GenePieceType.Constant);
								mutatedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
								mutatedGenePiece.setName(mutatedGenePiece.getValue().toString());
								mutatedGenePiece.setSymbol(mutatedGenePiece.getValue().toString());
							}
						}
					}
					for(int i=0;i<geneConfiguration.getHomeoticGeneTailLength();i++){
						if(mutateRandom.nextFloat()<operatorConfiguration.getMutateRate()){
							mutatedGenePiece=new GenePiece();
							gene.getGenePieces().set(i+geneConfiguration.getHomeoticGeneHeaderLength(), mutatedGenePiece);
							mutatedGenePiece.setFunction(null);
							mutatedGenePiece.setGenePieceType(GenePieceType.Constant);
							mutatedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
							mutatedGenePiece.setName(mutatedGenePiece.getValue().toString());
							mutatedGenePiece.setSymbol(mutatedGenePiece.getValue().toString());
						}
					}
				}
			}
		}
		return true;
	}

	@Override
	public boolean isTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum isTransportEnum=TransportEnum.IS;
		isTransportEnum.setRate(operatorConfiguration.getIsTransportRate());
		isTransportEnum.setTransportElement(operatorConfiguration.getIsElement());
		iterateGeneInTransport(population, isTransportEnum);
		return true;
	}

	@Override
	public boolean risTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum risTransportEnum=TransportEnum.RIS;
		risTransportEnum.setRate(operatorConfiguration.getRisTransportRate());
		risTransportEnum.setTransportElement(operatorConfiguration.getRisElement());
		iterateGeneInTransport(population, risTransportEnum);
		return true;
	}

	@Override
	public boolean geneTransport(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		TransportEnum geneTransportEnum=TransportEnum.GENE;
		geneTransportEnum.setRate(operatorConfiguration.getGeneTransportRate());
		iterateGeneInTransport(population, geneTransportEnum);
		return true;
	}

	@Override
	public boolean onePointRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.OnePoint;
		recombine.setRate(operatorConfiguration.getOnePointRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}

	@Override
	public boolean twoPointRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.TwoPoint;
		recombine.setRate(operatorConfiguration.getTwoPointRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}

	@Override
	public boolean geneRecombine(Population population) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getOperatorConfiguration();
		Recombine recombine=Recombine.GENE;
		recombine.setRate(operatorConfiguration.getGeneRecombineRate());
		iterateGeneInRecombine(population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration(), population, recombine);
		return true;
	}
	/**
	 * 产生一个普通基因的头部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @param dataSet 输入数据集
	 * @return 普通头部所有基因位组成的List
	 */
	private List<GenePiece> generateNormalHeaderPieces(GeneConfiguration geneConfiguration,DataSet dataSet){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random functionRandom=new Random();
		Random variableRandom=new Random();
		Random typeRandom=new Random();
		DataColumn dataColumn;
		Function function;
		int type;
		int variableIndex;
		GenePiece addedGenePiece;
		for(int i=0;i<geneConfiguration.getNormalGeneHeaderLength();i++){
			type=typeRandom.nextInt(dataSet.getVariableUsed().size()+geneConfiguration.getFunctionUsed().size());
			addedGenePiece=new GenePiece();
			if(type<dataSet.getVariableUsed().size()){
				addedGenePiece.setGenePieceType(GenePieceType.Variable);
				variableIndex=variableRandom.nextInt(dataSet.getVariableUsed().size());
				dataColumn=dataSet.getVariableUsed().get(variableIndex);
				addedGenePiece.setName(dataColumn.getColumnName());
				addedGenePiece.setSymbol(dataColumn.getColumnName());
				addedGenePiece.setVariableIndex(variableIndex);
			}
			else {
				addedGenePiece.setGenePieceType(GenePieceType.Function);
				function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
				addedGenePiece.setFunction(function);
				addedGenePiece.setName(function.getName());
				addedGenePiece.setSymbol(function.getSymbol());
			}
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个普通基因的尾部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @param dataSet 输入数据集
	 * @return 普通基因尾部所有基因位组成的List
	 */
	private List<GenePiece> generateNormalTailPieces(GeneConfiguration geneConfiguration,DataSet dataSet){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random variableRandom=new Random();
		DataColumn dataColumn;
		GenePiece addedGenePiece;
		int variableIndex;
		for(int i=0;i<geneConfiguration.getNormalGeneTailLength();i++){
			addedGenePiece=new GenePiece();
			addedGenePiece.setGenePieceType(GenePieceType.Variable);
			variableIndex=variableRandom.nextInt(dataSet.getVariableUsed().size());
			dataColumn=dataSet.getVariableUsed().get(variableIndex);
			addedGenePiece.setVariableIndex(variableIndex);
			addedGenePiece.setName(dataColumn.getColumnName());
			addedGenePiece.setSymbol(dataColumn.getColumnName());
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个同源基因的头部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @return 同源基因头部所有基因位组成的List
	 */
	private List<GenePiece> generateHomeoticHeaderPieces(GeneConfiguration geneConfiguration){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random functionRandom=new Random();
		Random constantRandom=new Random();
		Random typeRandom=new Random();
		Function function;
		int type;
		GenePiece addedGenePiece;
		addedGenePiece=new GenePiece();
		addedGenePiece.setGenePieceType(GenePieceType.Function);
		function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
		addedGenePiece.setFunction(function);
		addedGenePiece.setName(function.getName());
		addedGenePiece.setSymbol(function.getSymbol());
		genePieces.add(addedGenePiece);
		for(int i=1;i<geneConfiguration.getHomeoticGeneHeaderLength();i++){
			addedGenePiece=new GenePiece();
			type=typeRandom.nextInt(geneConfiguration.getFunctionUsed().size()+geneConfiguration.getNormalGeneNumber());
			if(type<geneConfiguration.getFunctionUsed().size()){
				addedGenePiece.setGenePieceType(GenePieceType.Function);
				function=geneConfiguration.getFunctionUsed().get(functionRandom.nextInt(geneConfiguration.getFunctionUsed().size())).clone();
				addedGenePiece.setFunction(function);
				addedGenePiece.setName(function.getName());
				addedGenePiece.setSymbol(function.getSymbol());
			}
			else {
				addedGenePiece.setGenePieceType(GenePieceType.Constant);
				addedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
				addedGenePiece.setName("");
				addedGenePiece.setSymbol(addedGenePiece.getValue().toString());
			}
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 产生一个同源基因的尾部的所有基因位
	 * @param geneConfiguration 基因配置信息
	 * @return 同源基因尾部所有基因位组成的List
	 */
	private List<GenePiece> generateHomeoticTailPieces(GeneConfiguration geneConfiguration){
		List<GenePiece> genePieces=new ArrayList<GenePiece>();
		Random constantRandom=new Random();
		GenePiece addedGenePiece;
		
		for(int i=0;i<geneConfiguration.getHomeoticGeneTailLength();i++){
			addedGenePiece=new GenePiece();
			addedGenePiece.setGenePieceType(GenePieceType.Constant);
			addedGenePiece.setValue((float) constantRandom.nextInt(geneConfiguration.getNormalGeneNumber()));
			addedGenePiece.setName("");
			addedGenePiece.setSymbol(addedGenePiece.getValue().toString());
			genePieces.add(addedGenePiece);
		}
		return genePieces;
	}
	/**
	 * 因为每一个个体有多个同源基因，因此每一个同源基因都可以产生一个拟合值，这里返回一个包含个体数组，里面每个同源基因计算出的拟合值。
	 * 目前是性能瓶颈，自用时间在15%－20%
	 * @param individual 待计算的个体
	 * @param row 需要产生拟合值的行
	 * @return 拟合值数组
	 */
	private float [] calcFittedValue(Individual individual,DataRow row,GeneConfiguration geneConfiguration){
		int normalGeneNum=geneConfiguration.getNormalGeneNumber();
		int homeoticGeneNum=geneConfiguration.getHomeoticGeneNumber();
		for(int i=0;i<normalGeneNum;i++){
			assignValueToVariable(individual.getGenes().get(i), row);
			calculateGeneValue(individual.getGenes().get(i), individual);
		}
		float result;
		float[] resulList=new float[homeoticGeneNum];
		for(int i=0;i<homeoticGeneNum;i++){
			result=calculateGeneValue(individual.getGenes().get(i+normalGeneNum), individual);
			resulList[i]=result;
		}
		return resulList;
	}
	/**
	 * 本方法给基因中的有效长度内的每一个变量赋值
	 * @param gene 待赋值的基因
	 * @param row 一个保存着变量值的输入行
	 */
	private void assignValueToVariable(Gene gene, DataRow row) {
		// TODO Auto-generated method stub
		GenePiece genePiece;
		int effectiveLength=calcEfficientLength(gene);
		List<GenePiece> genePieces=gene.getGenePieces();
		List<DataColumn> dataColumns=row.getDataColumns();
		for(int i=0;i<effectiveLength;i++){
			if((genePiece=genePieces.get(i)).getGenePieceType()==GenePieceType.Variable){
				genePiece.setValue(dataColumns.get(genePiece.getVariableIndex()).getValue());
			}
		}
	}
	/**
	 * 计算给定基因的值，这个基因可能是普通基因，也可能是同源基因，并将结果保存到到基因对应的属性里面
	 * @param gene 待计算的基因
	 * @param individual 基因所属的个体
	 * @return 基因的值，这个结果同样也会被保存到基因对应的属性里面
	 */
	private float calculateGeneValue(Gene gene, Individual individual) {
		// TODO Auto-generated method stub
		int length=calcEfficientLength(gene);
		GenePiece lastNonTerminate;
		int arity;
		while(length>1){
			lastNonTerminate=findLastNonTerminate(gene, length);
			arity=lastNonTerminate.getFunction().getArity();
			execMathFunction(gene, individual,lastNonTerminate,length);
			length-=arity;
		}
		float value=gene.getGenePieces().get(0).getValue();
		gene.setValue(value);
		return value;
	}
	
	/**
	 * 这个方法计算每个基因的有效长度，前置条件是如果一个基因位上有相关联的函数,本方法只能在计算基因值之前被调用一次，不可在计算基因值过程中被调用
	 * @param gene 被计算的基因
	 * @return 基因的有效长度
	 */
	private int calcEfficientLength(Gene gene){
		int length=1;
		int arity;
		GenePiece genePiece;
		for(int i=0;i<length;i++){
			genePiece=gene.getGenePieces().get(i);
			if(genePiece.getGenePieceType()==GenePieceType.Function){
				arity=genePiece.getFunction().getArity();
				length+=arity;
			}					
		}
		return length;
	}
	/**
	 * 找到最后一个非终结字符，即有效长度内最后一个函数，前置条件是被计算过的函数所对应的GenePiece的used要被置为true，没有被计算过的被置为false
	 * @param gene 所需要搜索的基因
	 * @param efficientLength 有效长度
	 * @return 基因有效长度内最后一个函数所在的基因位
	 */
	private GenePiece findLastNonTerminate(Gene gene,int efficientLength){
		GenePiece genePiece=null;
		for(int i=efficientLength-1;i>=0;i--){
			genePiece=gene.getGenePieces().get(i);
			if(genePiece.getGenePieceType()==GenePieceType.Function){
				if(genePiece.getFunction().isUsed()==false){
					break;
				}
			}
		}
		return genePiece;
	}
	/**
	 * 执行某个数学函数，并返回求解的结果
	 * @param gene 待执行的函数所在的基因
	 * @param individual 待执行的函数所在的个体
	 * @param computedGenePiece 待执行的函数所在基因位
	 * @param efficientLength 有效长度
	 * @return 数学函数计算出的结果
	 */
	private float execMathFunction(Gene gene,Individual individual,GenePiece computedGenePiece,int efficientLength){
		Function function=computedGenePiece.getFunction();
		int arity=function.getArity();
		float[] parameterArray=new float[arity];
		GenePiece[] genePieces=new GenePiece[arity];
		for(int i=0;i<arity;i++)
			genePieces[i]=gene.getGenePieces().get(efficientLength-i-1);
		if(gene.getGeneType()==GeneType.HomeoticGene){
			int index;
			GenePiece genePiece;
			for(int i=0;i<genePieces.length;i++){
				genePiece=genePieces[genePieces.length-1-i];
				if(genePiece.getGenePieceType()==GenePieceType.Function)
					parameterArray[i]=genePiece.getValue();
				else {
					index=(int)(float)genePiece.getValue();
					parameterArray[i]=individual.getGenes().get(index).getValue();
				}
			}		
		}
		else {
			for(int i=0;i<genePieces.length;i++)
				parameterArray[i]=genePieces[genePieces.length-1-i].getValue();
		}
		float value=function.operate(parameterArray);
		computedGenePiece.setValue(value);
		function.setUsed(true);
		return value;
	}

	/**
	 * 本方法负责从拟合值到适应值的转换，因为存在同源基因，所以一个个体对应多个拟合值，因此一个个体也对应多个适应值，这里只计算适应值矩阵的一行
	 * @param individualsValues 拟合值数组
	 * @param y 保存着函数值的列
	 * @return 得到的适应值矩阵中的某一行
	 */
	private float[] calcFitness(float[] individualsValues,DataColumn y,GepAlgConfiguration gepAlgConfiguration){
		float[] result=new float[individualsValues.length];
		float minus;
		float abs;
		for(int i=0;i<result.length;i++){
			minus=individualsValues[i]-y.getValue();
			abs=Math.abs(minus);
			if(abs<gepAlgConfiguration.getAccuracy())
				abs=0;
			result[i]=gepAlgConfiguration.getSelectionRange()-abs;
		}
		return result;
	}
	/**
	 * 本方法负责对适应值矩阵的每一列求和，最后得到一个行矩阵，保存这适应值矩阵中每列的和
	 * @param sumFitness 保存和的数组
	 * @param rowValue 某一行的适应值
	 * @return 求和后的数组
	 */
	private float[] addToSumFitness(float[] sumFitness,float[] rowValue){
		for(int i=0;i<sumFitness.length;i++)
			sumFitness[i]=rowValue[i]+sumFitness[i];
		return sumFitness;
	}
	/**
	 * 本方法负责清楚所有函数上的已使用的标记
	 * @param individual 待清除个体
	 */
	private void clearFunctionFlag(Individual individual){
		int geneNum=individual.getGenes().size();
		List<Gene> genes=individual.getGenes();
		List<GenePiece> genePieces;
		Gene gene;
		GenePiece genePiece;
		int geneLength;
		for(int i=0;i<geneNum;i++){
			gene=genes.get(i);
			genePieces=gene.getGenePieces();
			geneLength=genePieces.size();
			for(int j=0;j<geneLength;j++)
				if((genePiece=genePieces.get(j)).getGenePieceType()==GenePieceType.Function)
					genePiece.getFunction().setUsed(false);
		}

	}
	/**
	 * 本方法求指定适应度矩阵行的最大值，并返回最大值所在列的索引
	 * @param sumFitness
	 * @return 最大适应值所在的列，若所有适应值均不合法，则返回－1
	 */
	private int findBestHomeoticIndex(float[] sumFitness){
		int k=-1;
		float value=-1;
		float fitness;
		for(int i=0;i<sumFitness.length;i++){
			fitness=sumFitness[i];
			if(Float.isInfinite(fitness)||Float.isInfinite(fitness)||fitness<=0)
				continue;
			else if(fitness>value){
				value=fitness;
				k=i;
			}		
		}

		return k;
	}
	/**
	 * 本方法将设置个体被选择的同源基因，个体的适应值，个体的拟合值
	 * @param index 最佳适应值所在的列
	 * @param individual 待设置个体
	 * @param individualVaule 拟合值矩阵
	 * @param fitness 适应值行
	 * @param dataSet 输入数据集
	 * @return
	 */
	private Individual setIndividual(int index,Individual individual,float[][] individualVaule,float[] fitness,DataSet dataSet){
		if(index==-1){
			individual.setFitness((float) 0);
			individual.setSelectedHomeoticGeneNumber(-1);
			individual.setFittedValues(null);
		}
		else {
			individual.setFitness(fitness[index]);
			individual.setSelectedHomeoticGeneNumber(index);
			List<FittedValue> fittedValues=new ArrayList<FittedValue>(individualVaule.length);
			FittedValue fittedValue;
			for(int i=0;i<individualVaule.length;i++){
				fittedValue=new FittedValue();
				fittedValue.setFittedValue(individualVaule[i][index]);
				fittedValue.setDataRow(dataSet.getDataRow().get(i));
				fittedValues.add(fittedValue);
			}
			individual.setFittedValues(fittedValues);
		}
		return individual;
	}
	/**
	 * 计算种群的总适应值
	 * @param population 待计算的种群
	 * @return 种群总适应值
	 */
	private float addFitness(Population population){
		float sum=0;
		for(Individual individual:population.getIndividuals())
			sum+=individual.getFitness();
		return sum;
	}
	/**
	 * 计算个体比例适应值，即每个个体在种群适应值中所占的比例
	 * @param population 待计算种群
	 * @param sum 种群适应值之和
	 * @return 保存有个体比例适应值的List
	 */
	private List<Float> calculateProbability(Population population,float sum){
		float divide;
		List<Float> floatList=new ArrayList<Float>(population.getIndividuals().size());
		for(Individual individual:population.getIndividuals()){
			divide=individual.getFitness()/sum;
			floatList.add(divide);
		}
		return floatList;
	}
	/**
	 * 计算个体累加适应值，即第n项的累加适应值等于前n项个体比例适应值之和
	 * @param probability 个体比例适应值之和
	 * @return 个体累加适应值
	 */
	private List<Float> calculateCumulative(List<Float> probability){
		float sum=0;
		for(int i=0;i<probability.size();i++){
			sum+=probability.get(i);
			probability.set(i, sum);
		}
		return probability;
	}
	/**
	 * 创建一个新的种群，使用轮盘赌+冠军策略
	 * @param original 原始种群
	 * @param cumulativeProbability 个体累加适应值
	 * @return 新的种群
	 */
	private Population createNewPopulation(Population original,List<Float> cumulativeProbability){
		Population resultPopulation=new Population(original.getIndividuals().size());
		Individual bestIndividual=original.getBestIndividual().clone();
		resultPopulation.addIndividual(bestIndividual);
		Random random=new Random();
		int position;
		Individual insertedIndividual;
		for(int i=1;i<cumulativeProbability.size();i++){
			position=search(cumulativeProbability, random.nextFloat());
			insertedIndividual=original.getIndividuals().get(position).clone();
			resultPopulation.addIndividual(insertedIndividual);
		}
		resultPopulation.setGepAlgRun(original.getGepAlgRun());
		return resultPopulation;
	}
	/**
	 * 查找在累加适应值中，某个小数值具体属于哪个范围，返回范围的下限（即使擦到上限）
	 * @param floats 个体累加适应值
	 * @param random 待查询的小数
	 * @return 累加适应值所代表的个体的index
	 */
	private int search(List<Float> floats,float random){
		for(int i=0;i<floats.size();i++){
			if(random<=floats.get(i))
				return i;
		}
		return floats.size()-1;
	}
	/**
	 * 遍历每个基因，决定是否进行转座，如果进行转座，则调用下一级函数
	 * @param population 要进行转座的种群
	 * @param transportEnum 转座枚举类
	 */
	private void iterateGeneInTransport(Population population,TransportEnum transportEnum){
		Random transportRandom=new Random();
		GeneConfiguration geneConfiguration=population.getGepAlgRun().getGepAlgConfiguration().getIndividualConfiguration().getGeneConfiguration();
		int headerLength;
		int tailLength;
		Gene gene;
		for(Individual individual:population.getIndividuals()){
			for(int i=0;i<individual.getGenes().size();i++){
				gene=individual.getGenes().get(i);
				if(transportRandom.nextFloat()<transportEnum.getRate()){
					if(transportEnum==TransportEnum.GENE){
						if(gene.getGeneType()==GeneType.HomeoticGene)
							break;
						else {
							transportParaDetermination(individual.getGenes(), i);
							break;
						}
					}
					else {
						if(gene.getGeneType()==GeneType.NormalGene){
							headerLength=geneConfiguration.getNormalGeneHeaderLength();
							tailLength=geneConfiguration.getNormalGeneTailLength();
						}
						else {
							headerLength=geneConfiguration.getHomeoticGeneHeaderLength();
							tailLength=geneConfiguration.getHomeoticGeneTailLength();
						}
						transportParaDetermination(gene, transportEnum, headerLength, tailLength);
						break;
					}
				}			
			}
		}
	}
	/**
	 * 普通基因的基因转座，即将指定基因插入个体的首位，成为第一个基因
	 * @param genes 个体中所有的基因
	 * @param sourceIndex 将要插入头部的基因
	 */
	private void transportParaDetermination(List<Gene> genes,int sourceIndex){
		Gene gene=genes.remove(sourceIndex);
		genes.add(0, gene);
	}
	/**
	 * 确定IS和RIS转座相关的参数，并通过调用有关方法开始转座
	 * @param gene 待转座基因
	 * @param transportEnum 转座类型枚举类
	 * @param headerLength 转座基因头长
	 * @param tailLength 转座基因尾长
	 */
	private void transportParaDetermination(Gene gene,TransportEnum transportEnum,int headerLength,int tailLength){
		Random sourceLocRandom=new Random();
		Random destLocRandom=new Random();
		Random elementLengthRandom=new Random();
		int elementLength=0;
		int sourceLoc=0;
		int destLoc=0;
		switch (transportEnum) {
		case IS:
			elementLength=transportEnum.transportElement[elementLengthRandom.nextInt(transportEnum.transportElement.length)];
			sourceLoc=sourceLocRandom.nextInt(headerLength+tailLength-elementLength);
			destLoc=destLocRandom.nextInt(headerLength-elementLength-1)+1;
			break;
		case RIS:
			elementLength=transportEnum.transportElement[elementLengthRandom.nextInt(transportEnum.transportElement.length)];
			sourceLoc=searchFunction(gene, destLocRandom.nextInt(headerLength));
			destLoc=0;
			break;
		}
		if(sourceLoc!=-1){
			transportBegin(gene.getGenePieces(), sourceLoc, destLoc, elementLength, headerLength, transportEnum);
		}
	}
	/**
	 * 在给定的基因中指定为位置后面寻找第一个函数，若找到则返回函数的index，若找不到则返回－1
	 * @param gene 待搜索的基因
	 * @param index 开始搜索的位置
	 * @return 结果
	 */
	private int searchFunction(Gene gene,int index){
		int result=-1;
		for(int i=index;i<gene.getGenePieces().size();i++){
			if(gene.getGenePieces().get(i).getGenePieceType()==GenePieceType.Function){
				result=i;
				break;
			}
		}
		return result;
	}
	/**
	 * 开始转座
	 * @param genePieces 待转座的基因片段
	 * @param source 转座开始的地方
	 * @param dest 转座的目标
	 * @param length 转座的长度
	 * @param headerLength 基因头长
	 * @param transportEnum 转座枚举类型
	 */
	private void transportBegin(List<GenePiece> genePieces,int source,int dest,int length,int headerLength,TransportEnum transportEnum){
		List<GenePiece> copiedSource=new ArrayList<GenePiece>(length);
		for(int i=0;i<length;i++)
			copiedSource.add((genePieces.get(i+source).clone()));
		int forLength=headerLength-dest-length;
		for(int i=0;i<forLength;i++){
			genePieces.set(headerLength-i-1, genePieces.get(headerLength-i-1-length));
		}
		for(int i=0;i<length;i++){
			genePieces.set(dest+i, copiedSource.get(i));
		}
	}
	/**
	 * 遍历种群中的每一个个体，进行重组，如果发生重组，每个个体只能在本函数调用中发生一次重组
	 * @param individualConfiguration 个体配置信息
	 * @param population 种群
	 * @param recombine 重组枚举类型
	 */
	private void iterateGeneInRecombine(IndividualConfiguration individualConfiguration,Population population,Recombine recombine){
		Random recombineOneRandom=new Random();
		Random recombineOtherRandom=new Random();
		for(int i=0;i<population.getIndividuals().size()-1;i++){
			if(recombineOneRandom.nextFloat()<recombine.getRate()){
				for(int j=i+1;j<population.getIndividuals().size();j++){
					if(recombineOtherRandom.nextFloat()<recombine.getRate()){
						recombineParaDetermination(population.getIndividuals().get(i), population.getIndividuals().get(j), recombine, individualConfiguration);
						break;
					}
				}
			}
		}
	}
	/**
	 * 确定重组的各种参数
	 * @param a 参加重组的个体a
	 * @param b 参加重组的个体b
	 * @param recombine 重组的枚举变量
	 * @param individualConfiguration 个体配置信息
	 */
	private void recombineParaDetermination(Individual a,Individual b,Recombine recombine,IndividualConfiguration individualConfiguration){
		Random startRandom=new Random();
		Random endRandom=new Random();
		GeneConfiguration geneConfiguration=individualConfiguration.getGeneConfiguration();
		int start=-1;
		int end=-1;
		switch (recombine) {
		case OnePoint:
			end=individualConfiguration.getNormalGeneTotalLength();
			start=startRandom.nextInt(end);
			break;
		case TwoPoint:
			start=startRandom.nextInt(individualConfiguration.getNormalGeneTotalLength());
			end=endRandom.nextInt(individualConfiguration.getNormalGeneTotalLength());
			if(start>end){
				int temp=start;
				start=end;
				end=temp;
			}
			if (start==end) {
				return;
			}
			break;
		case GENE:
			int geneNo=startRandom.nextInt(geneConfiguration.getNormalGeneNumber());
			start=geneNo*geneConfiguration.getNormalGeneLength();
			end=start+geneConfiguration.getNormalGeneLength();
			break;
		}
		beginRecombine(start, end, a, b,geneConfiguration);
	}
	/**
	 * 开始正式进行重组
	 * @param start 重组开始的位置，这个位置是在个体所有基因位里面的index
	 * @param end 重组结束的位置，这个位置是在个体所有基因位里面的index
	 * @param a 参加重组的个体a
	 * @param b 参加重组的个体b
	 * @param geneConfiguration 基因配置信息
	 */
	private void beginRecombine(int start,int end,Individual a,Individual b,GeneConfiguration geneConfiguration){
		Gene gene;
		GenePiece genePiece;
		List<GenePiece> aGenePieces;
		List<GenePiece> bGenePieces;
		int startGeneNo=start/geneConfiguration.getNormalGeneLength();
		int startGenePieceNo=start%geneConfiguration.getNormalGeneLength();
		int endGeneNo=end/geneConfiguration.getNormalGeneLength();
		int endGenePieceNo=end%geneConfiguration.getNormalGeneLength();
		if(endGenePieceNo==0){
			endGeneNo--;
			endGenePieceNo=geneConfiguration.getNormalGeneLength();
		}
		aGenePieces=a.getGenes().get(startGeneNo).getGenePieces();
		bGenePieces=b.getGenes().get(startGeneNo).getGenePieces();
		for(int i=startGenePieceNo;i<geneConfiguration.getNormalGeneLength();i++){
			genePiece=aGenePieces.get(i);
			aGenePieces.set(i , bGenePieces.get(i));
			bGenePieces.set(i, genePiece);
		}
		if(startGeneNo!=endGeneNo){
			for(int i=0;i<endGeneNo-startGeneNo-1;i++){
				gene=a.getGenes().get(i+startGeneNo+1);
				a.getGenes().set(i+startGeneNo+1, b.getGenes().get(i+startGeneNo+1));
				b.getGenes().set(i+startGeneNo+1, gene);
			}
			aGenePieces=a.getGenes().get(endGeneNo).getGenePieces();
			bGenePieces=b.getGenes().get(endGeneNo).getGenePieces();
			for(int i=0;i<endGenePieceNo;i++){
				genePiece=aGenePieces.get(i);
				aGenePieces.set(i, bGenePieces.get(i));
				bGenePieces.set(i, genePiece);
			}			
		}
	}
}

test\ConfigurationTest.java
package test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;
import domain.iservice.algConfiguration.IgepConfigurationService;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.iservice.algOutput.IAlgOutputService;
import domain.iservice.algOutput.IAlgRunStep;
import domain.service.algConfiguration.GepConfigurationService;
import domain.service.algInputDataProcess.DataInputService;
import domain.service.algOutput.AlgOutputService;
import domain.service.algOutput.AlgRunStep;

public class ConfigurationTest {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		GepAlgConfiguration gepAlgConfiguration=new GepAlgConfiguration();
		gepAlgConfiguration.setAccuracy((float) 0.01);
		gepAlgConfiguration.setSelectionRange((float) 100);
		gepAlgConfiguration.setName("测试");
		gepAlgConfiguration.setMaxGeneration((long) 100000);
		IndividualConfiguration individualConfiguration=new IndividualConfiguration();
		individualConfiguration.setIndividualNumber(20);
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		individualConfiguration.setGeneConfiguration(geneConfiguration);
		gepAlgConfiguration.setIndividualConfiguration(individualConfiguration);	
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		gepAlgConfiguration.setOperatorConfiguration(operatorConfiguration);
		IgepConfigurationService gepConfigurationService=new GepConfigurationService();
		gepAlgConfiguration=gepConfigurationService.setGepAlgConfiguration(gepAlgConfiguration, dataSet);
		run(gepAlgConfiguration,dataSet);
	}
	private static void run(GepAlgConfiguration gepAlgConfiguration,DataSet dataSet){
		IAlgOutputService algOutputService=new AlgOutputService();
		IAlgRunStep runStep=new AlgRunStep();
		GepAlgRun gepAlgRun=algOutputService.run(gepAlgConfiguration, runStep, dataSet);
		System.out.println(gepAlgRun.getMaxFitness());
		System.out.println(gepAlgRun.getBestIndividual().getFitness());
	}
}

test\ConfigurationTest.java
package test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algOutput.GepAlgRun;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;
import domain.iservice.algConfiguration.IgepConfigurationService;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.iservice.algOutput.IAlgOutputService;
import domain.iservice.algOutput.IAlgRunStep;
import domain.service.algConfiguration.GepConfigurationService;
import domain.service.algInputDataProcess.DataInputService;
import domain.service.algOutput.AlgOutputService;
import domain.service.algOutput.AlgRunStep;

public class ConfigurationTest {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		GepAlgConfiguration gepAlgConfiguration=new GepAlgConfiguration();
		gepAlgConfiguration.setAccuracy((float) 0.01);
		gepAlgConfiguration.setSelectionRange((float) 100);
		gepAlgConfiguration.setName("测试");
		gepAlgConfiguration.setMaxGeneration((long) 100000);
		IndividualConfiguration individualConfiguration=new IndividualConfiguration();
		individualConfiguration.setIndividualNumber(20);
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		individualConfiguration.setGeneConfiguration(geneConfiguration);
		gepAlgConfiguration.setIndividualConfiguration(individualConfiguration);	
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		gepAlgConfiguration.setOperatorConfiguration(operatorConfiguration);
		IgepConfigurationService gepConfigurationService=new GepConfigurationService();
		gepAlgConfiguration=gepConfigurationService.setGepAlgConfiguration(gepAlgConfiguration, dataSet);
		run(gepAlgConfiguration,dataSet);
	}
	private static void run(GepAlgConfiguration gepAlgConfiguration,DataSet dataSet){
		IAlgOutputService algOutputService=new AlgOutputService();
		IAlgRunStep runStep=new AlgRunStep();
		GepAlgRun gepAlgRun=algOutputService.run(gepAlgConfiguration, runStep, dataSet);
		System.out.println(gepAlgRun.getMaxFitness());
		System.out.println(gepAlgRun.getBestIndividual().getFitness());
	}
}

test\HibernateGeneConfigurationTest.java
package test;

import java.util.Arrays;
import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;

public class HibernateGeneConfigurationTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		hibernateDataContext.save(geneConfiguration);
		List<GeneConfiguration> operatorConfigurations=hibernateDataContext.findAll(GeneConfiguration.class);
		System.out.println(operatorConfigurations.get(0).getFunctionUsed().size());
	}

}

test\HibernateGeneConfigurationTest.java
package test;

import java.util.Arrays;
import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;

public class HibernateGeneConfigurationTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		hibernateDataContext.save(geneConfiguration);
		List<GeneConfiguration> operatorConfigurations=hibernateDataContext.findAll(GeneConfiguration.class);
		System.out.println(operatorConfigurations.get(0).getFunctionUsed().size());
	}

}

test\HibernateOperatorTest.java
package test;

import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algconfiguration.OperatorConfiguration;

public class HibernateOperatorTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		hibernateDataContext.save(operatorConfiguration);
		List<OperatorConfiguration> operatorConfigurations=hibernateDataContext.findAll(OperatorConfiguration.class);
		System.out.println(operatorConfigurations.get(0).getRisElement().length);
	}

}

test\HibernateOperatorTest.java
package test;

import java.util.List;

import data.dao.HibernateDataContext;
import data.dao.IHibernateDataContext;
import domain.core.algconfiguration.OperatorConfiguration;

public class HibernateOperatorTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		IHibernateDataContext hibernateDataContext=new HibernateDataContext();
		hibernateDataContext.save(operatorConfiguration);
		List<OperatorConfiguration> operatorConfigurations=hibernateDataContext.findAll(OperatorConfiguration.class);
		System.out.println(operatorConfigurations.get(0).getRisElement().length);
	}

}

test\HibernateTest.java
package test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;
import domain.iservice.algConfiguration.IgepConfigurationService;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.service.algConfiguration.GepConfigurationService;
import domain.service.algInputDataProcess.DataInputService;

public class HibernateTest {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		GepAlgConfiguration gepAlgConfiguration=new GepAlgConfiguration();
		gepAlgConfiguration.setAccuracy((float) 0.01);
		gepAlgConfiguration.setSelectionRange((float) 100);
		gepAlgConfiguration.setName("测试1");
		gepAlgConfiguration.setMaxGeneration((long) 1000);

		IndividualConfiguration individualConfiguration=new IndividualConfiguration();
		individualConfiguration.setIndividualNumber(20);
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		individualConfiguration.setGeneConfiguration(geneConfiguration);
		gepAlgConfiguration.setIndividualConfiguration(individualConfiguration);	
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		gepAlgConfiguration.setOperatorConfiguration(operatorConfiguration);
		IgepConfigurationService gepConfigurationService=new GepConfigurationService();
		gepAlgConfiguration=gepConfigurationService.setGepAlgConfiguration(gepAlgConfiguration, dataSet);
//		System.out.println(gepConfigurationService.saveGepAlgConfiguration(gepAlgConfiguration));
		System.out.println(gepConfigurationService.getAllGepAlgConfiguration().get(0).getOperatorConfiguration().getGeneRecombineRate());
	}

}

test\HibernateTest.java
package test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.core.algconfiguration.GeneConfiguration;
import domain.core.algconfiguration.GepAlgConfiguration;
import domain.core.algconfiguration.IndividualConfiguration;
import domain.core.algconfiguration.OperatorConfiguration;
import domain.core.algconfiguration.function.Additioin;
import domain.core.algconfiguration.function.Divide;
import domain.core.algconfiguration.function.Minus;
import domain.core.algconfiguration.function.Multiply;
import domain.iservice.algConfiguration.IgepConfigurationService;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.service.algConfiguration.GepConfigurationService;
import domain.service.algInputDataProcess.DataInputService;

public class HibernateTest {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		GepAlgConfiguration gepAlgConfiguration=new GepAlgConfiguration();
		gepAlgConfiguration.setAccuracy((float) 0.01);
		gepAlgConfiguration.setSelectionRange((float) 100);
		gepAlgConfiguration.setName("测试1");
		gepAlgConfiguration.setMaxGeneration((long) 1000);

		IndividualConfiguration individualConfiguration=new IndividualConfiguration();
		individualConfiguration.setIndividualNumber(20);
		GeneConfiguration geneConfiguration=new GeneConfiguration();
		geneConfiguration.setHomeoticGeneHeaderLength(5);
		geneConfiguration.setHomeoticGeneNumber(1);
		geneConfiguration.setNormalGeneHeaderLength(7);
		geneConfiguration.setNormalGeneNumber(3);
		geneConfiguration.setFunctionUsed(Arrays.asList(new Additioin(),new Minus(),new Multiply(),new Divide()));
		individualConfiguration.setGeneConfiguration(geneConfiguration);
		gepAlgConfiguration.setIndividualConfiguration(individualConfiguration);	
		OperatorConfiguration operatorConfiguration=new OperatorConfiguration();
		operatorConfiguration.setGeneRecombineRate((float) 0.1);
		operatorConfiguration.setGeneTransportRate((float) 0.1);
		operatorConfiguration.setIsElement(new Integer[]{1,2,3});
		operatorConfiguration.setIsTransportRate((float) 0.1);
		operatorConfiguration.setMutateRate((float) 0.0444);
		operatorConfiguration.setOnePointRecombineRate((float) 0.4);
		operatorConfiguration.setRisElement(new Integer[]{1,2,3});
		operatorConfiguration.setRisTransportRate((float) 0.1);
		operatorConfiguration.setTwoPointRecombineRate((float) 0.2);
		gepAlgConfiguration.setOperatorConfiguration(operatorConfiguration);
		IgepConfigurationService gepConfigurationService=new GepConfigurationService();
		gepAlgConfiguration=gepConfigurationService.setGepAlgConfiguration(gepAlgConfiguration, dataSet);
//		System.out.println(gepConfigurationService.saveGepAlgConfiguration(gepAlgConfiguration));
		System.out.println(gepConfigurationService.getAllGepAlgConfiguration().get(0).getOperatorConfiguration().getGeneRecombineRate());
	}

}

test\ReadFile.java
package test;

import java.io.File;
import java.io.IOException;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.service.algInputDataProcess.DataInputService;

public class ReadFile {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		System.out.println(dataSet.getDataRow().get(9).getResultColumn().getColumnName());
		
	}

}

test\ReadFile.java
package test;

import java.io.File;
import java.io.IOException;

import jxl.read.biff.BiffException;

import domain.core.algInputDataProcess.DataSet;
import domain.iservice.algInputDataProcess.IDataInputService;
import domain.service.algInputDataProcess.DataInputService;

public class ReadFile {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws BiffException 
	 */
	public static void main(String[] args) throws BiffException, IOException {
		// TODO Auto-generated method stub
		IDataInputService dataInputService=new DataInputService();
		DataSet dataSet=dataInputService.processInputDataSet(new File("InputDemo.xls"));
		System.out.println(dataSet.getDataRow().get(9).getResultColumn().getColumnName());
		
	}

}

tool\Directory.java
package tool;
import java.util.regex.*;
import java.io.*;
import java.util.*;

public final class Directory {
	
	public static File[] local(File dir, final String regex) {
		return dir.listFiles(new FilenameFilter() {
			private Pattern pattern = Pattern.compile(regex);

			public boolean accept(File dir, String name) {
				return pattern.matcher(new File(name).getName()).matches();
			}
		});
	}

	public static File[] local(String path, final String regex) { // Overloaded
		return local(new File(path), regex);
	}

	// A two-tuple for returning a pair of objects:
	public static class TreeInfo implements Iterable<File> {
		public List<File> files = new ArrayList<File>();
		public List<File> dirs = new ArrayList<File>();

		// The default iterable element is the file list:
		public Iterator<File> iterator() {
			return files.iterator();
		}

		void addAll(TreeInfo other) {
			files.addAll(other.files);
			dirs.addAll(other.dirs);
		}

		public String toString() {
			return "dirs: " + dirs + "\n\nfiles: " + files;
		}
	}

	public static TreeInfo walk(String start, String regex) { // Begin recursion
		return recurseDirs(new File(start), regex);
	}

	public static TreeInfo walk(File start, String regex) { // Overloaded
		return recurseDirs(start, regex);
	}

	public static TreeInfo walk(File start) { // Everything
		return recurseDirs(start, ".*");
	}

	public static TreeInfo walk(String start) {
		return recurseDirs(new File(start), ".*");
	}

	static TreeInfo recurseDirs(File startDir, String regex) {
		TreeInfo result = new TreeInfo();
		for (File item : startDir.listFiles()) {
			if (item.isDirectory()) {
				result.dirs.add(item);
				result.addAll(recurseDirs(item, regex));
			} else // Regular file
			if (item.getName().matches(regex))
				result.files.add(item);
		}
		return result;
	}

	// Simple validation test:
	public static void main(String[] args) {
		if (args.length == 0)
			System.out.println(walk("."));
		else
			for (String arg : args)
				System.out.println(walk(arg));
	}
}

tool\Directory.java
package tool;
import java.util.regex.*;
import java.io.*;
import java.util.*;

public final class Directory {
	
	public static File[] local(File dir, final String regex) {
		return dir.listFiles(new FilenameFilter() {
			private Pattern pattern = Pattern.compile(regex);

			public boolean accept(File dir, String name) {
				return pattern.matcher(new File(name).getName()).matches();
			}
		});
	}

	public static File[] local(String path, final String regex) { // Overloaded
		return local(new File(path), regex);
	}

	// A two-tuple for returning a pair of objects:
	public static class TreeInfo implements Iterable<File> {
		public List<File> files = new ArrayList<File>();
		public List<File> dirs = new ArrayList<File>();

		// The default iterable element is the file list:
		public Iterator<File> iterator() {
			return files.iterator();
		}

		void addAll(TreeInfo other) {
			files.addAll(other.files);
			dirs.addAll(other.dirs);
		}

		public String toString() {
			return "dirs: " + dirs + "\n\nfiles: " + files;
		}
	}

	public static TreeInfo walk(String start, String regex) { // Begin recursion
		return recurseDirs(new File(start), regex);
	}

	public static TreeInfo walk(File start, String regex) { // Overloaded
		return recurseDirs(start, regex);
	}

	public static TreeInfo walk(File start) { // Everything
		return recurseDirs(start, ".*");
	}

	public static TreeInfo walk(String start) {
		return recurseDirs(new File(start), ".*");
	}

	static TreeInfo recurseDirs(File startDir, String regex) {
		TreeInfo result = new TreeInfo();
		for (File item : startDir.listFiles()) {
			if (item.isDirectory()) {
				result.dirs.add(item);
				result.addAll(recurseDirs(item, regex));
			} else // Regular file
			if (item.getName().matches(regex))
				result.files.add(item);
		}
		return result;
	}

	// Simple validation test:
	public static void main(String[] args) {
		if (args.length == 0)
			System.out.println(walk("."));
		else
			for (String arg : args)
				System.out.println(walk(arg));
	}
}

tool\HibernateSchemaExport.java
package tool;


import java.io.File;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;


public class HibernateSchemaExport {

	static Session session;
	static Configuration config = null;
	static Transaction tx = null;
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/** 
		/**
		 * 根据映射文件创建数据库结构
		 */
		SessionFactory sessionFactory=null;
		try {
			config = new Configuration().configure(new File(
					"src/data/configure/hibernate.cfg.xml"));

			System.out.println("Creating tables...");

			sessionFactory = config.buildSessionFactory();
			session = sessionFactory.openSession();

			SchemaExport schemaExport = new SchemaExport(config);
			schemaExport.setOutputFile("src\\data\\sql\\sql.sql");
			schemaExport.setFormat(true);
			schemaExport.setHaltOnError(true);
			schemaExport.create(true, true);

			System.out.println("Table created.");

			session.flush();

		} 
		catch (HibernateException e)
		{
			e.printStackTrace();
			tx.rollback();
			
		}
		catch (Exception e)
		{
			e.printStackTrace();	
		}
		finally 
		{
			session.close();
			sessionFactory.close();
			
		}
	}

}

tool\HibernateSchemaExport.java
package tool;


import java.io.File;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;


public class HibernateSchemaExport {

	static Session session;
	static Configuration config = null;
	static Transaction tx = null;
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/** 
		/**
		 * 根据映射文件创建数据库结构
		 */
		SessionFactory sessionFactory=null;
		try {
			config = new Configuration().configure(new File(
					"src/data/configure/hibernate.cfg.xml"));

			System.out.println("Creating tables...");

			sessionFactory = config.buildSessionFactory();
			session = sessionFactory.openSession();

			SchemaExport schemaExport = new SchemaExport(config);
			schemaExport.setOutputFile("src\\data\\sql\\sql.sql");
			schemaExport.setFormat(true);
			schemaExport.setHaltOnError(true);
			schemaExport.create(true, true);

			System.out.println("Table created.");

			session.flush();

		} 
		catch (HibernateException e)
		{
			e.printStackTrace();
			tx.rollback();
			
		}
		catch (Exception e)
		{
			e.printStackTrace();	
		}
		finally 
		{
			session.close();
			sessionFactory.close();
			
		}
	}

}

tool\MergeFile.java
package tool;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

public class MergeFile {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Iterator<File> allFile=Directory.walk("src",".+java").iterator();
		File mergedFile=new File("merged.txt");
		File nextFile;
		BufferedWriter bufferedWriter;
		String contextString;
		try {
			bufferedWriter=new BufferedWriter(new FileWriter(mergedFile));

		} catch (IOException e1) {
			// TODO Auto-generated catch block
			System.out.println("目标文件无法打开");
			e1.printStackTrace();
			return;
		}
		while(allFile.hasNext()){
			nextFile=allFile.next();
			if(nextFile.exists()){
				try {
					contextString=readFileToString(nextFile);
					writeToFile(bufferedWriter, contextString);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					System.out.println("文件不存在");
					e.printStackTrace();
					continue;
				} catch (IOException e) {
					// TODO Auto-generated catch block
					System.out.println("无法打开文件");
					e.printStackTrace();
					continue;
				}
				writeToFile(bufferedWriter, contextString);
			}
		}
	}
	private static String readFileToString(File file) throws IOException{
		BufferedReader bufferedReader=new BufferedReader(new FileReader(file));
		String s;
		StringBuilder stringBuilder=new StringBuilder();
		stringBuilder.append(file.getPath().substring(4)+"\n");
		while((s=bufferedReader.readLine())!=null)
			stringBuilder.append(s+"\n");
		return stringBuilder.toString();
	}
	private static boolean writeToFile(BufferedWriter bufferedWriter,String context){
		boolean result=true;
		try {
			bufferedWriter.write(context+"\n");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			result=false;
		}
		return result;
	}
}

tool\MergeFile.java
package tool;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

public class MergeFile {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Iterator<File> allFile=Directory.walk("src",".+java").iterator();
		File mergedFile=new File("merged.txt");
		File nextFile;
		BufferedWriter bufferedWriter;
		String contextString;
		try {
			bufferedWriter=new BufferedWriter(new FileWriter(mergedFile));

		} catch (IOException e1) {
			// TODO Auto-generated catch block
			System.out.println("目标文件无法打开");
			e1.printStackTrace();
			return;
		}
		while(allFile.hasNext()){
			nextFile=allFile.next();
			if(nextFile.exists()){
				try {
					contextString=readFileToString(nextFile);
					writeToFile(bufferedWriter, contextString);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					System.out.println("文件不存在");
					e.printStackTrace();
					continue;
				} catch (IOException e) {
					// TODO Auto-generated catch block
					System.out.println("无法打开文件");
					e.printStackTrace();
					continue;
				}
				writeToFile(bufferedWriter, contextString);
			}
		}
	}
	private static String readFileToString(File file) throws IOException{
		BufferedReader bufferedReader=new BufferedReader(new FileReader(file));
		String s;
		StringBuilder stringBuilder=new StringBuilder();
		stringBuilder.append(file.getPath().substring(4)+"\n");
		while((s=bufferedReader.readLine())!=null)
			stringBuilder.append(s+"\n");
		return stringBuilder.toString();
	}
	private static boolean writeToFile(BufferedWriter bufferedWriter,String context){
		boolean result=true;
		try {
			bufferedWriter.write(context+"\n");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			result=false;
		}
		return result;
	}
}

ui\alg\controller\FunctionPanelController.java
package ui.alg.controller;

import java.util.ArrayList;

import javax.swing.JComboBox;

public class FunctionPanelController {
	static int addTime=0;
	static ArrayList<String> items = new ArrayList<String>();
    public static void functionComboBoxController(JComboBox comboBox,JComboBox JComboBoxOfSelectdFunctions){
    	boolean isaddItem = true;
		if (addTime == 0) {
			items.add(comboBox.getSelectedItem().toString());
			JComboBoxOfSelectdFunctions.addItem(comboBox
					.getSelectedItem().toString());
			JComboBoxOfSelectdFunctions.setSelectedItem(comboBox
					.getSelectedItem().toString());
		} 
		else {
			for (int i = 0; i < items.size(); i++) {
				String item = comboBox.getSelectedItem().toString();
				if (item.equals(items.get(i))) {
					isaddItem = false;
				}
	        }
			if (isaddItem == true) {
				items.add(comboBox.getSelectedItem().toString());
				JComboBoxOfSelectdFunctions.addItem(comboBox
						.getSelectedItem().toString());
				JComboBoxOfSelectdFunctions.setSelectedItem(comboBox
						.getSelectedItem().toString());
			}
		}

		addTime++;

	}
    
}

ui\alg\controller\FunctionPanelController.java
package ui.alg.controller;

import java.util.ArrayList;

import javax.swing.JComboBox;

public class FunctionPanelController {
	static int addTime=0;
	static ArrayList<String> items = new ArrayList<String>();
    public static void functionComboBoxController(JComboBox comboBox,JComboBox JComboBoxOfSelectdFunctions){
    	boolean isaddItem = true;
		if (addTime == 0) {
			items.add(comboBox.getSelectedItem().toString());
			JComboBoxOfSelectdFunctions.addItem(comboBox
					.getSelectedItem().toString());
			JComboBoxOfSelectdFunctions.setSelectedItem(comboBox
					.getSelectedItem().toString());
		} 
		else {
			for (int i = 0; i < items.size(); i++) {
				String item = comboBox.getSelectedItem().toString();
				if (item.equals(items.get(i))) {
					isaddItem = false;
				}
	        }
			if (isaddItem == true) {
				items.add(comboBox.getSelectedItem().toString());
				JComboBoxOfSelectdFunctions.addItem(comboBox
						.getSelectedItem().toString());
				JComboBoxOfSelectdFunctions.setSelectedItem(comboBox
						.getSelectedItem().toString());
			}
		}

		addTime++;

	}
    
}

ui\alg\controller\HostPanelController.java
package ui.alg.controller;

import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;

import jxl.read.biff.BiffException;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.view.*;



public class HostPanelController {
   
 
   
   
  
   
   public static void btnNext0Controller(DefaultMutableTreeNode node1,JTree tree_1, HostPanel configurationPanel,JPanelForStopSetting inputPathPanel) {
		
		TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node1));
		tree_1.setSelectionPath(visiblePath);
		configurationPanel.setVisible(false);
	    inputPathPanel.setVisible(true);
	   
	}
	public static void btnSetConfigController(DefaultMutableTreeNode node1,JTree tree_1, HostPanel configurationPanel,JPanelForStopSetting inputPathPanel) {
		TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node1));
		tree_1.setSelectionPath(visiblePath);
		configurationPanel.setVisible(false);
		inputPathPanel.setVisible(true);
		
	}
	public static String jcomboBoxItemController(ItemEvent ie,HostPanel configurationPanel,JPanelForStopSetting stopSettingPanel,
			JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,JPanelForFooter footerPanel,JPanelForInputFile  inputFilePanel,GepConfiguration myConfigurationFromDB,List<GepConfiguration> configurationsOfHistory,
			IgepAlgService myGepService) {
		
		if (ie.getStateChange()==ItemEvent.SELECTED){
	  		
	  		   footerPanel.setVisible(true);
	       	   configurationPanel.btnSetConfig.setVisible(false);
	       	   configurationPanel.setVisible(false);
	       	   stopSettingPanel.setVisible(true);
	    }
		return handler(configurationPanel, stopSettingPanel, populationPanel, genePanel, functionPanel,inputFilePanel, myConfigurationFromDB, configurationsOfHistory, myGepService);
   }

	public static void jcomboBoxEditorController(KeyEvent e,JButton btnSetConfig) {
		 if(e.getKeyCode() == KeyEvent.VK_ENTER){  
	        	btnSetConfig.setVisible(true);
	       }
		
	}
	
	public static String handler(HostPanel configurationPanel,JPanelForStopSetting stopSettingPanel,
		    JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,
		    JPanelForInputFile  inputFilePanel,
		    GepConfiguration myConfigurationFromDB,List<GepConfiguration> configurationsOfHistory,
		    IgepAlgService myGepService){
		    	
		    	inputFilePanel.txtInputPath.setText(myConfigurationFromDB.getInputFile());
				stopSettingPanel.txtAccuracy.setText(myConfigurationFromDB.getAccuray());
				functionPanel.txtConstantListSize.setText(myConfigurationFromDB.getConstantListSize());
				genePanel.txtGeneOnePointRecombineRate.setText(myConfigurationFromDB.getOnePointRecombineRate());
				genePanel.txtGeneRecombineRate.setText(myConfigurationFromDB.getGeneRecombineRate());
				genePanel.txtGeneTransportRate.setText(myConfigurationFromDB.getGeneTransportRate());
				genePanel.txtHomeoticGeneNums.setText(myConfigurationFromDB.getHomeoticGeneNumber());
				genePanel.txtHomeoticHeaderLength.setText(myConfigurationFromDB.getHomeoticHeaderLength());
				
				genePanel.txtIsTransportRate.setText(myConfigurationFromDB.getIsTransportRate());
				stopSettingPanel.txtMaxGeneration.setText(myConfigurationFromDB.getMaxGeneration());
				genePanel.txtMutateRate.setText(myConfigurationFromDB.getMutateRate());
				genePanel.txtNormalGeneNumber.setText(myConfigurationFromDB.getNormalGeneNumber());
				genePanel.txtNormalHeaderLength.setText(myConfigurationFromDB.getNormalHeaderLength());
				genePanel.txtofIsElement.setText(myConfigurationFromDB.getIsElement());
				genePanel.txtofRisElement.setText(myConfigurationFromDB.getRisElement());
				populationPanel.txtPopulationSize.setText(myConfigurationFromDB.getPopulationSize());
				functionPanel.txtRandomConstantStart.setText(myConfigurationFromDB.getRandomConstantStart());
				genePanel.txtRisTransportRate.setText(myConfigurationFromDB.getRisTransportRate());
				populationPanel.txtSelectionRange.setText(myConfigurationFromDB.getSelectionRange());
				genePanel.txtTwoPointRecombineRate.setText(myConfigurationFromDB.getTwoPointRecombineRate());
				

				String[] functions = myConfigurationFromDB.getFunctionList()
						.split(",");
				for (int i = 0; i < functions.length; i++) {
					System.out.println(functions[i].toString());
					if (functions[i].toString().equals("domain.service.alg.userdefined.Additioin")) {
					   functionPanel.JComboBoxOfSelectdFunctions.addItem("+");
					} else if (functions[i].toString().equals("domain.service.alg.userdefined.Minus")) {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("-");
					} else if (functions[i].toString().equals("domain.service.alg.userdefined.Multiply")) {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("*");
					} else {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("/");
					}
				}
				populationPanel.JcomboBoxOfPopulationCreator.setSelectedItem(myConfigurationFromDB.getCreator());
				genePanel.JComboBoxOfAvailableModifyings.setSelectedItem(myConfigurationFromDB.getModify());
				populationPanel.JComboBoxAvailableCalculator.setSelectedItem(myConfigurationFromDB.getCalculator());
				configurationPanel.setVisible(false);
				stopSettingPanel.setVisible(true);
				stopSettingPanel.txtMaxGeneration.grabFocus();
				return null;
		    }
	public static void btnSetConfigController(JPanelForStopSetting stopSettingPanel,
		    JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,
		    JPanelForInputFile  inputFilePanel){
		    initialiseController(stopSettingPanel,populationPanel,genePanel,functionPanel,inputFilePanel);
	}
	private static void initialiseController(JPanelForStopSetting stopSettingPanel,JPanelForPopulation populationPanel, JPanelForGene genePanel,JPanelForFunction functionPanel, JPanelForInputFile inputFilePanel) {
		inputFilePanel.txtInputPath.setText("");
		stopSettingPanel.txtAccuracy.setText("");
		functionPanel.txtConstantListSize.setText("");
		genePanel.txtGeneOnePointRecombineRate.setText("");
		genePanel.txtGeneRecombineRate.setText("");
		genePanel.txtGeneTransportRate.setText("");
		genePanel.txtHomeoticGeneNums.setText("");
		genePanel.txtHomeoticHeaderLength.setText("");
		
		genePanel.txtIsTransportRate.setText("");
		stopSettingPanel.txtMaxGeneration.setText("");
		genePanel.txtMutateRate.setText("");
		genePanel.txtNormalGeneNumber.setText("");
		genePanel.txtNormalHeaderLength.setText("");
		genePanel.txtofIsElement.setText("");
		genePanel.txtofRisElement.setText("");
		populationPanel.txtPopulationSize.setText("");
		functionPanel.txtRandomConstantStart.setText("");
		genePanel.txtRisTransportRate.setText("");
		populationPanel.txtSelectionRange.setText("");
		genePanel.txtTwoPointRecombineRate.setText("");
		
	}

}

ui\alg\controller\HostPanelController.java
package ui.alg.controller;

import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;

import jxl.read.biff.BiffException;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.view.*;



public class HostPanelController {
   
 
   
   
  
   
   public static void btnNext0Controller(DefaultMutableTreeNode node1,JTree tree_1, HostPanel configurationPanel,JPanelForStopSetting inputPathPanel) {
		
		TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node1));
		tree_1.setSelectionPath(visiblePath);
		configurationPanel.setVisible(false);
	    inputPathPanel.setVisible(true);
	   
	}
	public static void btnSetConfigController(DefaultMutableTreeNode node1,JTree tree_1, HostPanel configurationPanel,JPanelForStopSetting inputPathPanel) {
		TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node1));
		tree_1.setSelectionPath(visiblePath);
		configurationPanel.setVisible(false);
		inputPathPanel.setVisible(true);
		
	}
	public static String jcomboBoxItemController(ItemEvent ie,HostPanel configurationPanel,JPanelForStopSetting stopSettingPanel,
			JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,JPanelForFooter footerPanel,JPanelForInputFile  inputFilePanel,GepConfiguration myConfigurationFromDB,List<GepConfiguration> configurationsOfHistory,
			IgepAlgService myGepService) {
		
		if (ie.getStateChange()==ItemEvent.SELECTED){
	  		
	  		   footerPanel.setVisible(true);
	       	   configurationPanel.btnSetConfig.setVisible(false);
	       	   configurationPanel.setVisible(false);
	       	   stopSettingPanel.setVisible(true);
	    }
		return handler(configurationPanel, stopSettingPanel, populationPanel, genePanel, functionPanel,inputFilePanel, myConfigurationFromDB, configurationsOfHistory, myGepService);
   }

	public static void jcomboBoxEditorController(KeyEvent e,JButton btnSetConfig) {
		 if(e.getKeyCode() == KeyEvent.VK_ENTER){  
	        	btnSetConfig.setVisible(true);
	       }
		
	}
	
	public static String handler(HostPanel configurationPanel,JPanelForStopSetting stopSettingPanel,
		    JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,
		    JPanelForInputFile  inputFilePanel,
		    GepConfiguration myConfigurationFromDB,List<GepConfiguration> configurationsOfHistory,
		    IgepAlgService myGepService){
		    	
		    	inputFilePanel.txtInputPath.setText(myConfigurationFromDB.getInputFile());
				stopSettingPanel.txtAccuracy.setText(myConfigurationFromDB.getAccuray());
				functionPanel.txtConstantListSize.setText(myConfigurationFromDB.getConstantListSize());
				genePanel.txtGeneOnePointRecombineRate.setText(myConfigurationFromDB.getOnePointRecombineRate());
				genePanel.txtGeneRecombineRate.setText(myConfigurationFromDB.getGeneRecombineRate());
				genePanel.txtGeneTransportRate.setText(myConfigurationFromDB.getGeneTransportRate());
				genePanel.txtHomeoticGeneNums.setText(myConfigurationFromDB.getHomeoticGeneNumber());
				genePanel.txtHomeoticHeaderLength.setText(myConfigurationFromDB.getHomeoticHeaderLength());
				
				genePanel.txtIsTransportRate.setText(myConfigurationFromDB.getIsTransportRate());
				stopSettingPanel.txtMaxGeneration.setText(myConfigurationFromDB.getMaxGeneration());
				genePanel.txtMutateRate.setText(myConfigurationFromDB.getMutateRate());
				genePanel.txtNormalGeneNumber.setText(myConfigurationFromDB.getNormalGeneNumber());
				genePanel.txtNormalHeaderLength.setText(myConfigurationFromDB.getNormalHeaderLength());
				genePanel.txtofIsElement.setText(myConfigurationFromDB.getIsElement());
				genePanel.txtofRisElement.setText(myConfigurationFromDB.getRisElement());
				populationPanel.txtPopulationSize.setText(myConfigurationFromDB.getPopulationSize());
				functionPanel.txtRandomConstantStart.setText(myConfigurationFromDB.getRandomConstantStart());
				genePanel.txtRisTransportRate.setText(myConfigurationFromDB.getRisTransportRate());
				populationPanel.txtSelectionRange.setText(myConfigurationFromDB.getSelectionRange());
				genePanel.txtTwoPointRecombineRate.setText(myConfigurationFromDB.getTwoPointRecombineRate());
				

				String[] functions = myConfigurationFromDB.getFunctionList()
						.split(",");
				for (int i = 0; i < functions.length; i++) {
					System.out.println(functions[i].toString());
					if (functions[i].toString().equals("domain.service.alg.userdefined.Additioin")) {
					   functionPanel.JComboBoxOfSelectdFunctions.addItem("+");
					} else if (functions[i].toString().equals("domain.service.alg.userdefined.Minus")) {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("-");
					} else if (functions[i].toString().equals("domain.service.alg.userdefined.Multiply")) {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("*");
					} else {
						functionPanel.JComboBoxOfSelectdFunctions.addItem("/");
					}
				}
				populationPanel.JcomboBoxOfPopulationCreator.setSelectedItem(myConfigurationFromDB.getCreator());
				genePanel.JComboBoxOfAvailableModifyings.setSelectedItem(myConfigurationFromDB.getModify());
				populationPanel.JComboBoxAvailableCalculator.setSelectedItem(myConfigurationFromDB.getCalculator());
				configurationPanel.setVisible(false);
				stopSettingPanel.setVisible(true);
				stopSettingPanel.txtMaxGeneration.grabFocus();
				return null;
		    }
	public static void btnSetConfigController(JPanelForStopSetting stopSettingPanel,
		    JPanelForPopulation populationPanel,JPanelForGene genePanel,JPanelForFunction functionPanel,
		    JPanelForInputFile  inputFilePanel){
		    initialiseController(stopSettingPanel,populationPanel,genePanel,functionPanel,inputFilePanel);
	}
	private static void initialiseController(JPanelForStopSetting stopSettingPanel,JPanelForPopulation populationPanel, JPanelForGene genePanel,JPanelForFunction functionPanel, JPanelForInputFile inputFilePanel) {
		inputFilePanel.txtInputPath.setText("");
		stopSettingPanel.txtAccuracy.setText("");
		functionPanel.txtConstantListSize.setText("");
		genePanel.txtGeneOnePointRecombineRate.setText("");
		genePanel.txtGeneRecombineRate.setText("");
		genePanel.txtGeneTransportRate.setText("");
		genePanel.txtHomeoticGeneNums.setText("");
		genePanel.txtHomeoticHeaderLength.setText("");
		
		genePanel.txtIsTransportRate.setText("");
		stopSettingPanel.txtMaxGeneration.setText("");
		genePanel.txtMutateRate.setText("");
		genePanel.txtNormalGeneNumber.setText("");
		genePanel.txtNormalHeaderLength.setText("");
		genePanel.txtofIsElement.setText("");
		genePanel.txtofRisElement.setText("");
		populationPanel.txtPopulationSize.setText("");
		functionPanel.txtRandomConstantStart.setText("");
		genePanel.txtRisTransportRate.setText("");
		populationPanel.txtSelectionRange.setText("");
		genePanel.txtTwoPointRecombineRate.setText("");
		
	}

}

ui\alg\Model\ModelForJPanelConfig.java
package ui.alg.Model;

public class ModelForJPanelConfig {
    String configName;
    public ModelForJPanelConfig(String configName){
    	this.configName=configName;
    }
    public void setConfig(String config){
       configName=config;
    }
    public String getConfig(){
    	return this.configName;
    }
}

ui\alg\Model\ModelForJPanelConfig.java
package ui.alg.Model;

public class ModelForJPanelConfig {
    String configName;
    public ModelForJPanelConfig(String configName){
    	this.configName=configName;
    }
    public void setConfig(String config){
       configName=config;
    }
    public String getConfig(){
    	return this.configName;
    }
}

ui\alg\Model\ModelForJPanelFunction.java
package ui.alg.Model;



public class ModelForJPanelFunction {
  
   StringBuffer functions;
   
   public ModelForJPanelFunction(StringBuffer functions){
	   this.functions=functions;
   }
   public StringBuffer getFunctions() {
		return functions;
	}

	public void setFunctions(StringBuffer functions) {
		this.functions = functions;
	}

   
}

ui\alg\Model\ModelForJPanelFunction.java
package ui.alg.Model;



public class ModelForJPanelFunction {
  
   StringBuffer functions;
   
   public ModelForJPanelFunction(StringBuffer functions){
	   this.functions=functions;
   }
   public StringBuffer getFunctions() {
		return functions;
	}

	public void setFunctions(StringBuffer functions) {
		this.functions = functions;
	}

   
}

ui\alg\Model\ModelForJPanelGEne.java
package ui.alg.Model;


public class ModelForJPanelGEne {
	
	String normalGeneNumber;
    String normalHeaderLength;
    String homeoticGeneNums;
    String homeoticHeaderLength;
    String geneRecombineRate;
    String risTransportRate;
    String risElement;
    String isTransportRate;
    String isElement;
    String geneTransportRate;
    String mutateRate;
    String twoPointRecombineRate;
    String geneOnePointRecombineRate;
    int availableModifyingsIndex;
    public ModelForJPanelGEne(String normalGeneNumber,String normalHeaderLength,String homeoticGeneNums,String homeoticHeaderLength,String geneRecombineRate,
    		String risTransportRate,String risElement,String isTransportRate, String isElement,String geneTransportRate,String mutateRate,String twoPointRecombineRate,String geneOnePointRecombineRate,int availableModifyings){
    	this.normalGeneNumber= normalGeneNumber;
        this.normalHeaderLength=normalHeaderLength;
        this.homeoticGeneNums=homeoticGeneNums;
        this.homeoticHeaderLength= homeoticHeaderLength;
        this.geneRecombineRate=geneRecombineRate;
        this.risTransportRate=risTransportRate;
        this.risElement=risElement;
        this.isTransportRate=isTransportRate;
        this.isElement=isElement;
        this.geneTransportRate=geneTransportRate;
        this.mutateRate=mutateRate;
        this.twoPointRecombineRate=twoPointRecombineRate;
        this.geneOnePointRecombineRate=geneOnePointRecombineRate;
        this.availableModifyingsIndex=availableModifyings;
    	
    }
    public String getNormalGeneNumber() {
		return normalGeneNumber;
	}
	public void setNormalGeneNumber(String normalGeneNumber) {
		this.normalGeneNumber = normalGeneNumber;
	}
	public String getNormalHeaderLength() {
		return normalHeaderLength;
	}
	public void setNormalHeaderLength(String normalHeaderLength) {
		this.normalHeaderLength = normalHeaderLength;
	}
	public String getHomeoticGeneNums() {
		return homeoticGeneNums;
	}
	public void setHomeoticGeneNums(String homeoticGeneNums) {
		this.homeoticGeneNums = homeoticGeneNums;
	}
	public String getHomeoticHeaderLength() {
		return homeoticHeaderLength;
	}
	public void setHomeoticHeaderLength(String homeoticHeaderLength) {
		this.homeoticHeaderLength = homeoticHeaderLength;
	}
	public String getGeneRecombineRate() {
		return geneRecombineRate;
	}
	public void setGeneRecombineRate(String geneRecombineRate) {
		this.geneRecombineRate = geneRecombineRate;
	}
	public String getRisTransportRate() {
		return risTransportRate;
	}
	public void setRisTransportRate(String risTransportRate) {
		this.risTransportRate = risTransportRate;
	}
	public String getRisElement() {
		return risElement;
	}
	public void setRisElement(String risElement) {
		this.risElement = risElement;
	}
	public String getIsTransportRate() {
		return isTransportRate;
	}
	public void setIsTransportRate(String isTransportRate) {
		this.isTransportRate = isTransportRate;
	}
	public String getIsElement() {
		return isElement;
	}
	public void setIsElement(String isElement) {
		this.isElement = isElement;
	}
	public String getGeneTransportRate() {
		return geneTransportRate;
	}
	public void setGeneTransportRate(String geneTransportRate) {
		this.geneTransportRate = geneTransportRate;
	}
	public String getMutateRate() {
		return mutateRate;
	}
	public void setMutateRate(String mutateRate) {
		this.mutateRate = mutateRate;
	}
	public String getTwoPointRecombineRate() {
		return twoPointRecombineRate;
	}
	public void setTwoPointRecombineRate(String twoPointRecombineRate) {
		this.twoPointRecombineRate = twoPointRecombineRate;
	}
	public String getGeneOnePointRecombineRate() {
		return geneOnePointRecombineRate;
	}
	public void setGeneOnePointRecombineRate(String geneOnePointRecombineRate) {
		this.geneOnePointRecombineRate = geneOnePointRecombineRate;
	}
	public int getAvailableModifyingsIndex() {
		return availableModifyingsIndex;
	}
	public void setAvailableModifyings(int availableModifyings) {
		this.availableModifyingsIndex = availableModifyings;
	}
}

ui\alg\Model\ModelForJPanelGEne.java
package ui.alg.Model;


public class ModelForJPanelGEne {
	
	String normalGeneNumber;
    String normalHeaderLength;
    String homeoticGeneNums;
    String homeoticHeaderLength;
    String geneRecombineRate;
    String risTransportRate;
    String risElement;
    String isTransportRate;
    String isElement;
    String geneTransportRate;
    String mutateRate;
    String twoPointRecombineRate;
    String geneOnePointRecombineRate;
    int availableModifyingsIndex;
    public ModelForJPanelGEne(String normalGeneNumber,String normalHeaderLength,String homeoticGeneNums,String homeoticHeaderLength,String geneRecombineRate,
    		String risTransportRate,String risElement,String isTransportRate, String isElement,String geneTransportRate,String mutateRate,String twoPointRecombineRate,String geneOnePointRecombineRate,int availableModifyings){
    	this.normalGeneNumber= normalGeneNumber;
        this.normalHeaderLength=normalHeaderLength;
        this.homeoticGeneNums=homeoticGeneNums;
        this.homeoticHeaderLength= homeoticHeaderLength;
        this.geneRecombineRate=geneRecombineRate;
        this.risTransportRate=risTransportRate;
        this.risElement=risElement;
        this.isTransportRate=isTransportRate;
        this.isElement=isElement;
        this.geneTransportRate=geneTransportRate;
        this.mutateRate=mutateRate;
        this.twoPointRecombineRate=twoPointRecombineRate;
        this.geneOnePointRecombineRate=geneOnePointRecombineRate;
        this.availableModifyingsIndex=availableModifyings;
    	
    }
    public String getNormalGeneNumber() {
		return normalGeneNumber;
	}
	public void setNormalGeneNumber(String normalGeneNumber) {
		this.normalGeneNumber = normalGeneNumber;
	}
	public String getNormalHeaderLength() {
		return normalHeaderLength;
	}
	public void setNormalHeaderLength(String normalHeaderLength) {
		this.normalHeaderLength = normalHeaderLength;
	}
	public String getHomeoticGeneNums() {
		return homeoticGeneNums;
	}
	public void setHomeoticGeneNums(String homeoticGeneNums) {
		this.homeoticGeneNums = homeoticGeneNums;
	}
	public String getHomeoticHeaderLength() {
		return homeoticHeaderLength;
	}
	public void setHomeoticHeaderLength(String homeoticHeaderLength) {
		this.homeoticHeaderLength = homeoticHeaderLength;
	}
	public String getGeneRecombineRate() {
		return geneRecombineRate;
	}
	public void setGeneRecombineRate(String geneRecombineRate) {
		this.geneRecombineRate = geneRecombineRate;
	}
	public String getRisTransportRate() {
		return risTransportRate;
	}
	public void setRisTransportRate(String risTransportRate) {
		this.risTransportRate = risTransportRate;
	}
	public String getRisElement() {
		return risElement;
	}
	public void setRisElement(String risElement) {
		this.risElement = risElement;
	}
	public String getIsTransportRate() {
		return isTransportRate;
	}
	public void setIsTransportRate(String isTransportRate) {
		this.isTransportRate = isTransportRate;
	}
	public String getIsElement() {
		return isElement;
	}
	public void setIsElement(String isElement) {
		this.isElement = isElement;
	}
	public String getGeneTransportRate() {
		return geneTransportRate;
	}
	public void setGeneTransportRate(String geneTransportRate) {
		this.geneTransportRate = geneTransportRate;
	}
	public String getMutateRate() {
		return mutateRate;
	}
	public void setMutateRate(String mutateRate) {
		this.mutateRate = mutateRate;
	}
	public String getTwoPointRecombineRate() {
		return twoPointRecombineRate;
	}
	public void setTwoPointRecombineRate(String twoPointRecombineRate) {
		this.twoPointRecombineRate = twoPointRecombineRate;
	}
	public String getGeneOnePointRecombineRate() {
		return geneOnePointRecombineRate;
	}
	public void setGeneOnePointRecombineRate(String geneOnePointRecombineRate) {
		this.geneOnePointRecombineRate = geneOnePointRecombineRate;
	}
	public int getAvailableModifyingsIndex() {
		return availableModifyingsIndex;
	}
	public void setAvailableModifyings(int availableModifyings) {
		this.availableModifyingsIndex = availableModifyings;
	}
}

ui\alg\Model\ModelForJPanelPopulation.java
package ui.alg.Model;

public class ModelForJPanelPopulation {
	
	String populationSize;
	String selectionRange;
    int populationCreatorIndex;
    int selectionStrategyIndex;
    int availableCalculatorIndex;
    public ModelForJPanelPopulation(String populationSize,String selectionRange,int populationCreator,int selectionStrategy,int availableCalculator){
    	this.availableCalculatorIndex=availableCalculator;
    	this.populationCreatorIndex=populationCreator;
    	this.selectionStrategyIndex=selectionStrategy;
    	this.selectionRange=selectionRange;
    	this.populationSize=populationSize;
    	
    }
    public String getPopulationSize() {
		return populationSize;
	}
	public void setPopulationSize(String populationSize) {
		this.populationSize = populationSize;
	}
	public String getSelectionRange() {
		return selectionRange;
	}
	public void setSelectionRange(String selectionRange) {
		this.selectionRange = selectionRange;
	}
	public int getPopulationCreatorIndex() {
		return populationCreatorIndex;
	}
	public void setPopulationCreatorIndex(int populationCreatorIndex) {
		this.populationCreatorIndex = populationCreatorIndex;
	}
	public int getSelectionStrategyIndex() {
		return selectionStrategyIndex;
	}
	public void setSelectionStrategyIndex(int selectionStrategyIndex) {
		this.selectionStrategyIndex = selectionStrategyIndex;
	}
	public int getAvailableCalculatorIndex() {
		return availableCalculatorIndex;
	}
	public void setAvailableCalculatorIndex(int availableCalculatorIndex) {
		this.availableCalculatorIndex = availableCalculatorIndex;
	}
}

ui\alg\Model\ModelForJPanelPopulation.java
package ui.alg.Model;

public class ModelForJPanelPopulation {
	
	String populationSize;
	String selectionRange;
    int populationCreatorIndex;
    int selectionStrategyIndex;
    int availableCalculatorIndex;
    public ModelForJPanelPopulation(String populationSize,String selectionRange,int populationCreator,int selectionStrategy,int availableCalculator){
    	this.availableCalculatorIndex=availableCalculator;
    	this.populationCreatorIndex=populationCreator;
    	this.selectionStrategyIndex=selectionStrategy;
    	this.selectionRange=selectionRange;
    	this.populationSize=populationSize;
    	
    }
    public String getPopulationSize() {
		return populationSize;
	}
	public void setPopulationSize(String populationSize) {
		this.populationSize = populationSize;
	}
	public String getSelectionRange() {
		return selectionRange;
	}
	public void setSelectionRange(String selectionRange) {
		this.selectionRange = selectionRange;
	}
	public int getPopulationCreatorIndex() {
		return populationCreatorIndex;
	}
	public void setPopulationCreatorIndex(int populationCreatorIndex) {
		this.populationCreatorIndex = populationCreatorIndex;
	}
	public int getSelectionStrategyIndex() {
		return selectionStrategyIndex;
	}
	public void setSelectionStrategyIndex(int selectionStrategyIndex) {
		this.selectionStrategyIndex = selectionStrategyIndex;
	}
	public int getAvailableCalculatorIndex() {
		return availableCalculatorIndex;
	}
	public void setAvailableCalculatorIndex(int availableCalculatorIndex) {
		this.availableCalculatorIndex = availableCalculatorIndex;
	}
}

ui\alg\view\HostPanel.java
package ui.alg.view;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.ComboBoxEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;


public class HostPanel extends JPanel {

	
	int count=0;
	public JComboBox jcomboBoxConfiguration;
	public JButton btnNext0=new JButton(),
                   btnSetConfig=new JButton();
	
	public HostPanel(JComboBox jcomboBoxConfiguration) {
		
		setBounds(155, 115, 631, 447);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(true);
		JLabel lblNewLabel_28 = new JLabel("\u7B97\u6CD5\u540D\u79F0");
		lblNewLabel_28.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_28.setBounds(20, 58, 83, 33);
		add(lblNewLabel_28);
		setBorder(new LineBorder(new Color(0, 0, 0)));
        jcomboBoxConfiguration.setSelectedIndex(-1);
		jcomboBoxConfiguration.setFont(new Font("宋体", Font.PLAIN, 14));
		jcomboBoxConfiguration.setEditable(true);
		jcomboBoxConfiguration.setBackground(Color.WHITE);
		jcomboBoxConfiguration.setBounds(140, 60, 362, 33);
		final ComboBoxEditor editor=jcomboBoxConfiguration.getEditor();
	    jcomboBoxConfiguration.configureEditor(editor,null);
		add(jcomboBoxConfiguration);
	    jcomboBoxConfiguration.setVisible(true);
	   
	    
	    
	
	
	    
	    
	   
        btnSetConfig = new JButton("\u914D\u7F6E\u53C2\u6570");
		btnSetConfig.setBounds(515, 67, 93, 23);
		btnSetConfig.setVisible(true);
		add(btnSetConfig);
		
		
		JLabel lblNewLabel_27 = new JLabel("\u8F93\u5165\u7B97\u6CD5\u540D\u79F0/\u9009\u62E9\u7B97\u6CD5");
		lblNewLabel_27.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_27.setBounds(20, 20, 305, 25);
		add(lblNewLabel_27);
		btnNext0 = new JButton("\u4E0B\u4E00\u6B65");
		btnNext0.setBounds(528, 414, 93, 23);
		add(btnNext0);
		
		
		
	    
		
	}

}

ui\alg\view\HostPanel.java
package ui.alg.view;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.ComboBoxEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;


public class HostPanel extends JPanel {

	
	int count=0;
	public JComboBox jcomboBoxConfiguration;
	public JButton btnNext0=new JButton(),
                   btnSetConfig=new JButton();
	
	public HostPanel(JComboBox jcomboBoxConfiguration) {
		
		setBounds(155, 115, 631, 447);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(true);
		JLabel lblNewLabel_28 = new JLabel("\u7B97\u6CD5\u540D\u79F0");
		lblNewLabel_28.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_28.setBounds(20, 58, 83, 33);
		add(lblNewLabel_28);
		setBorder(new LineBorder(new Color(0, 0, 0)));
        jcomboBoxConfiguration.setSelectedIndex(-1);
		jcomboBoxConfiguration.setFont(new Font("宋体", Font.PLAIN, 14));
		jcomboBoxConfiguration.setEditable(true);
		jcomboBoxConfiguration.setBackground(Color.WHITE);
		jcomboBoxConfiguration.setBounds(140, 60, 362, 33);
		final ComboBoxEditor editor=jcomboBoxConfiguration.getEditor();
	    jcomboBoxConfiguration.configureEditor(editor,null);
		add(jcomboBoxConfiguration);
	    jcomboBoxConfiguration.setVisible(true);
	   
	    
	    
	
	
	    
	    
	   
        btnSetConfig = new JButton("\u914D\u7F6E\u53C2\u6570");
		btnSetConfig.setBounds(515, 67, 93, 23);
		btnSetConfig.setVisible(true);
		add(btnSetConfig);
		
		
		JLabel lblNewLabel_27 = new JLabel("\u8F93\u5165\u7B97\u6CD5\u540D\u79F0/\u9009\u62E9\u7B97\u6CD5");
		lblNewLabel_27.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_27.setBounds(20, 20, 305, 25);
		add(lblNewLabel_27);
		btnNext0 = new JButton("\u4E0B\u4E00\u6B65");
		btnNext0.setBounds(528, 414, 93, 23);
		add(btnNext0);
		
		
		
	    
		
	}

}

ui\alg\view\JPanelForFunction.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForFunction extends JPanel {

	
	public  JTextField txtConstantListSize=new JTextField(),
	                   txtRandomConstantStart=new JTextField();
	public  JButton btnDelFunction = new JButton("\u5220\u9664\u6240\u9009\u51FD\u6570"),
	                btnDelAllFunction = new JButton("\u5220\u9664\u5168\u90E8\u51FD\u6570");
	public 	JComboBox comboBox = new JComboBox(),
	                  JComboBoxOfSelectdFunctions = new JComboBox();
	
	public JPanelForFunction() {
		   
			setBorder(new LineBorder(new Color(0, 0, 0)));
			setBackground(Color.WHITE);
			setBounds(155, 115, 631, 447);
			setVisible(false);
			setLayout(null);
			
			JLabel lblNewLabel_24 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u51FD\u6570\u96C6\u548C\u968F\u673A\u6570");
			lblNewLabel_24.setFont(new Font("宋体", Font.PLAIN, 18));
			lblNewLabel_24.setBounds(20, 20, 216, 25);
			add(lblNewLabel_24);
			
			JLabel lblNewLabel_18 = new JLabel("\u53EF\u4F9B\u9009\u62E9\u7684\u51FD\u6570");
			lblNewLabel_18.setFont(new Font("宋体", Font.PLAIN, 15));
			lblNewLabel_18.setBounds(20, 60, 120, 25);
			add(lblNewLabel_18);
			
		
			comboBox.setBounds(160, 62, 141, 25);
			add(comboBox);
			
			JLabel lblNewLabel_19 = new JLabel("\u5DF2\u9009\u62E9\u7684\u51FD\u6570");
			lblNewLabel_19.setFont(new Font("宋体", Font.PLAIN, 15));
			lblNewLabel_19.setBounds(20, 100, 100, 25);
			add(lblNewLabel_19);
			
			

			
			
			btnDelFunction.setBounds(323, 102, 104, 20);
			add(btnDelFunction);
			btnDelFunction.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					Object selectItem = JComboBoxOfSelectdFunctions
							.getSelectedItem();
					JComboBoxOfSelectdFunctions.removeItem(selectItem);
				}
			});
			
			btnDelAllFunction.setBounds(473, 102, 110, 20);
			add(btnDelAllFunction);
			btnDelAllFunction.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					JComboBoxOfSelectdFunctions.removeAllItems();
				}
			});
			JComboBoxOfSelectdFunctions.setBounds(160, 102, 141, 25);
			add(JComboBoxOfSelectdFunctions);
			
	}

}

ui\alg\view\JPanelForFunction.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForFunction extends JPanel {

	
	public  JTextField txtConstantListSize=new JTextField(),
	                   txtRandomConstantStart=new JTextField();
	public  JButton btnDelFunction = new JButton("\u5220\u9664\u6240\u9009\u51FD\u6570"),
	                btnDelAllFunction = new JButton("\u5220\u9664\u5168\u90E8\u51FD\u6570");
	public 	JComboBox comboBox = new JComboBox(),
	                  JComboBoxOfSelectdFunctions = new JComboBox();
	
	public JPanelForFunction() {
		   
			setBorder(new LineBorder(new Color(0, 0, 0)));
			setBackground(Color.WHITE);
			setBounds(155, 115, 631, 447);
			setVisible(false);
			setLayout(null);
			
			JLabel lblNewLabel_24 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u51FD\u6570\u96C6\u548C\u968F\u673A\u6570");
			lblNewLabel_24.setFont(new Font("宋体", Font.PLAIN, 18));
			lblNewLabel_24.setBounds(20, 20, 216, 25);
			add(lblNewLabel_24);
			
			JLabel lblNewLabel_18 = new JLabel("\u53EF\u4F9B\u9009\u62E9\u7684\u51FD\u6570");
			lblNewLabel_18.setFont(new Font("宋体", Font.PLAIN, 15));
			lblNewLabel_18.setBounds(20, 60, 120, 25);
			add(lblNewLabel_18);
			
		
			comboBox.setBounds(160, 62, 141, 25);
			add(comboBox);
			
			JLabel lblNewLabel_19 = new JLabel("\u5DF2\u9009\u62E9\u7684\u51FD\u6570");
			lblNewLabel_19.setFont(new Font("宋体", Font.PLAIN, 15));
			lblNewLabel_19.setBounds(20, 100, 100, 25);
			add(lblNewLabel_19);
			
			

			
			
			btnDelFunction.setBounds(323, 102, 104, 20);
			add(btnDelFunction);
			btnDelFunction.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					Object selectItem = JComboBoxOfSelectdFunctions
							.getSelectedItem();
					JComboBoxOfSelectdFunctions.removeItem(selectItem);
				}
			});
			
			btnDelAllFunction.setBounds(473, 102, 110, 20);
			add(btnDelAllFunction);
			btnDelAllFunction.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					JComboBoxOfSelectdFunctions.removeAllItems();
				}
			});
			JComboBoxOfSelectdFunctions.setBounds(160, 102, 141, 25);
			add(JComboBoxOfSelectdFunctions);
			
	}

}

ui\alg\view\JPanelForGene.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForGene extends JPanel {

	
	public JTextField txtNormalGeneNumber=new JTextField(),
	                   txtNormalHeaderLength=new JTextField(),
                       txtHomeoticGeneNums=new JTextField(),
	                   txtHomeoticHeaderLength=new JTextField(),
                       txtGeneRecombineRate=new JTextField(),
	                   txtRisTransportRate=new JTextField(),
	                   txtofRisElement=new JTextField(),
	                   txtIsTransportRate=new JTextField(),
	                   txtofIsElement=new JTextField(),
	                   txtGeneTransportRate=new JTextField(),
	                   txtMutateRate=new JTextField(),
	                   txtTwoPointRecombineRate=new JTextField(),
	                   txtGeneOnePointRecombineRate=new JTextField();
	public JComboBox JComboBoxOfAvailableModifyings = new JComboBox();
	
	public JPanelForGene() {
		
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBackground(Color.WHITE);
		setBounds(155, 115, 631, 447);
		setLayout(null);
		setVisible(false);
		JLabel lblNewLabel_6 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u57FA\u56E0\u4FE1\u606F");
		lblNewLabel_6.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_6.setBounds(20, 20, 167, 25);
		add(lblNewLabel_6);
		
		JLabel lblNewLabel_7 = new JLabel("\u57FA\u56E0\u4E2A\u6570");
		lblNewLabel_7.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_7.setBounds(20, 60, 100, 25);
		add(lblNewLabel_7);
		
		
		txtNormalGeneNumber.setBounds(160, 60, 120, 25);
		add(txtNormalGeneNumber);
		txtNormalGeneNumber.setColumns(10);
		txtNormalGeneNumber.grabFocus();
		
		txtNormalGeneNumber.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtNormalHeaderLength.grabFocus();
		        }  
		    }  
		}); 
		JLabel lblNewLabel_8 = new JLabel("\u57FA\u56E0\u5934\u90E8\u5927\u5C0F");
		lblNewLabel_8.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_8.setBounds(340, 60, 100, 25);
		add(lblNewLabel_8);
		
		
		txtNormalHeaderLength.setBounds(485, 62, 120, 25);
		add(txtNormalHeaderLength);
		txtNormalHeaderLength.setColumns(10);
		txtNormalHeaderLength.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtHomeoticGeneNums.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_9 = new JLabel("\u540C\u6E90\u67D3\u8272\u4F53\u4E2A\u6570");
		lblNewLabel_9.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_9.setBounds(20, 100, 120, 25);
		add(lblNewLabel_9);
		
		
		txtHomeoticGeneNums.setBounds(160, 100, 120, 25);
		add(txtHomeoticGeneNums);
		txtHomeoticGeneNums.setColumns(10);
		txtHomeoticGeneNums.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtHomeoticHeaderLength.grabFocus();
		        }  
		    }  
		}); 
		JLabel lblNewLabel_10 = new JLabel("\u540C\u6E90\u67D3\u8272\u4F53\u5934\u90E8\u5927\u5C0F");
		lblNewLabel_10.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_10.setBounds(340, 100, 142, 25);
		add(lblNewLabel_10);
		
		
		txtHomeoticHeaderLength.setBounds(485, 100, 120, 25);
		add(txtHomeoticHeaderLength);
		txtHomeoticHeaderLength.setColumns(10);
		txtHomeoticHeaderLength.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneRecombineRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_11 = new JLabel("\u57FA\u56E0\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_11.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_11.setBounds(20, 140, 100, 25);
		add(lblNewLabel_11);
		
		
		txtGeneRecombineRate.setBounds(160, 140, 120, 25);
		add(txtGeneRecombineRate);
		txtGeneRecombineRate.setColumns(10);
		txtGeneRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneOnePointRecombineRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_12 = new JLabel("\u57FA\u56E0\u5355\u70B9\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_12.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_12.setBounds(340, 140, 142, 25);
	    add(lblNewLabel_12);
		
		txtGeneOnePointRecombineRate.setBounds(485, 140, 120, 25);
		add(txtGeneOnePointRecombineRate);
		txtGeneOnePointRecombineRate.setColumns(10);
		txtGeneOnePointRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtTwoPointRecombineRate.grabFocus();
		        }  
		    }  
		});  
		JLabel lblNewLabel_13 = new JLabel("\u57FA\u56E0\u591A\u70B9\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_13.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_13.setBounds(20, 180, 131, 25);
		add(lblNewLabel_13);
		
		
		txtTwoPointRecombineRate.setBounds(160, 180, 120, 25);
		add(txtTwoPointRecombineRate);
		txtTwoPointRecombineRate.setColumns(10);
		txtTwoPointRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtMutateRate.grabFocus();
		        }  
		    }  
		}); 
		
		JLabel lblNewLabel_30 = new JLabel("\u57FA\u56E0\u7A81\u53D8\u6982\u7387");
		lblNewLabel_30.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_30.setBounds(340, 180, 100, 25);
		add(lblNewLabel_30);
		
		
		txtMutateRate.setBounds(485, 180, 120, 25);
		add(txtMutateRate);
		txtMutateRate.setColumns(10);
		txtMutateRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneTransportRate.grabFocus();
		        }  
		    }  
		}); 
		
		JLabel lblNewLabel_31 = new JLabel("\u57FA\u56E0\u8F6C\u5EA7\u6982\u7387");
		lblNewLabel_31.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_31.setBounds(20, 220, 100, 25);
		add(lblNewLabel_31);
		
	    txtGeneTransportRate.setBounds(160, 220, 120, 25);
		add(txtGeneTransportRate);
		txtGeneTransportRate.setColumns(10);
		txtGeneTransportRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtofIsElement.grabFocus();
		        }  
		    }  
		}); 
		
		JComboBoxOfAvailableModifyings.setBounds(485, 220, 120, 25);
		add(JComboBoxOfAvailableModifyings);
		
		JLabel lblNewLabel_32 = new JLabel("\u57FA\u56E0\u9009\u62E9\u53D8\u5F02\u7B56\u7565");
		lblNewLabel_32.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_32.setBounds(340, 220, 120, 25);
		add(lblNewLabel_32);
		
		JLabel lblNewLabel_14 = new JLabel("IS\u957F\u5EA6");
		lblNewLabel_14.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_14.setBounds(20, 260, 100, 25);
		add(lblNewLabel_14);
		
		
		txtofIsElement.setBounds(160, 260, 120, 25);
		add(txtofIsElement);
		txtofIsElement.setColumns(10);
		txtofIsElement.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtIsTransportRate.grabFocus();
		        }  
		    }  
		});  
		JLabel lblNewLabel_15 = new JLabel("IS\u8F6C\u5EA7\u7387");
		lblNewLabel_15.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_15.setBounds(340, 260, 100, 25);
		add(lblNewLabel_15);
		
		
		txtIsTransportRate.setBounds(485, 260, 120, 25);
		add(txtIsTransportRate);
		txtIsTransportRate.setColumns(10);
		txtIsTransportRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtofRisElement.grabFocus();
		        }  
		    }  
		});  
		
		txtofRisElement.setBounds(160, 300, 120, 25);
		add(txtofRisElement);
		txtofRisElement.setColumns(10);
		txtofRisElement.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtRisTransportRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_16 = new JLabel("RIS\u957F\u5EA6");
		lblNewLabel_16.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_16.setBounds(20, 300, 100, 25);
		add(lblNewLabel_16);
		
		JLabel lblNewLabel_17 = new JLabel("RIS\u8F6C\u5EA7\u7387");
		lblNewLabel_17.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_17.setBounds(340, 300, 100, 25);
		add(lblNewLabel_17);
		
		
		txtRisTransportRate.setBounds(485, 300, 120, 25);
		add(txtRisTransportRate);
		txtRisTransportRate.setColumns(10);
        /*btnForward3.addActionListener(new ActionListener(){
              public void actionPerformed(ActionEvent e) {
				TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node2));
				tree_1.setSelectionPath(visiblePath);
				HostPane.setVisible(false);
        		panel_1.setVisible(false);
        		panel_2.setVisible(true);
        		panel_3.setVisible(false);
        		panel_4.setVisible(false);
				
			}
			});*/
		//panel_0.add(panel_3);
	}

}

ui\alg\view\JPanelForGene.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForGene extends JPanel {

	
	public JTextField txtNormalGeneNumber=new JTextField(),
	                   txtNormalHeaderLength=new JTextField(),
                       txtHomeoticGeneNums=new JTextField(),
	                   txtHomeoticHeaderLength=new JTextField(),
                       txtGeneRecombineRate=new JTextField(),
	                   txtRisTransportRate=new JTextField(),
	                   txtofRisElement=new JTextField(),
	                   txtIsTransportRate=new JTextField(),
	                   txtofIsElement=new JTextField(),
	                   txtGeneTransportRate=new JTextField(),
	                   txtMutateRate=new JTextField(),
	                   txtTwoPointRecombineRate=new JTextField(),
	                   txtGeneOnePointRecombineRate=new JTextField();
	public JComboBox JComboBoxOfAvailableModifyings = new JComboBox();
	
	public JPanelForGene() {
		
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBackground(Color.WHITE);
		setBounds(155, 115, 631, 447);
		setLayout(null);
		setVisible(false);
		JLabel lblNewLabel_6 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u57FA\u56E0\u4FE1\u606F");
		lblNewLabel_6.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_6.setBounds(20, 20, 167, 25);
		add(lblNewLabel_6);
		
		JLabel lblNewLabel_7 = new JLabel("\u57FA\u56E0\u4E2A\u6570");
		lblNewLabel_7.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_7.setBounds(20, 60, 100, 25);
		add(lblNewLabel_7);
		
		
		txtNormalGeneNumber.setBounds(160, 60, 120, 25);
		add(txtNormalGeneNumber);
		txtNormalGeneNumber.setColumns(10);
		txtNormalGeneNumber.grabFocus();
		
		txtNormalGeneNumber.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtNormalHeaderLength.grabFocus();
		        }  
		    }  
		}); 
		JLabel lblNewLabel_8 = new JLabel("\u57FA\u56E0\u5934\u90E8\u5927\u5C0F");
		lblNewLabel_8.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_8.setBounds(340, 60, 100, 25);
		add(lblNewLabel_8);
		
		
		txtNormalHeaderLength.setBounds(485, 62, 120, 25);
		add(txtNormalHeaderLength);
		txtNormalHeaderLength.setColumns(10);
		txtNormalHeaderLength.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtHomeoticGeneNums.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_9 = new JLabel("\u540C\u6E90\u67D3\u8272\u4F53\u4E2A\u6570");
		lblNewLabel_9.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_9.setBounds(20, 100, 120, 25);
		add(lblNewLabel_9);
		
		
		txtHomeoticGeneNums.setBounds(160, 100, 120, 25);
		add(txtHomeoticGeneNums);
		txtHomeoticGeneNums.setColumns(10);
		txtHomeoticGeneNums.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtHomeoticHeaderLength.grabFocus();
		        }  
		    }  
		}); 
		JLabel lblNewLabel_10 = new JLabel("\u540C\u6E90\u67D3\u8272\u4F53\u5934\u90E8\u5927\u5C0F");
		lblNewLabel_10.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_10.setBounds(340, 100, 142, 25);
		add(lblNewLabel_10);
		
		
		txtHomeoticHeaderLength.setBounds(485, 100, 120, 25);
		add(txtHomeoticHeaderLength);
		txtHomeoticHeaderLength.setColumns(10);
		txtHomeoticHeaderLength.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneRecombineRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_11 = new JLabel("\u57FA\u56E0\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_11.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_11.setBounds(20, 140, 100, 25);
		add(lblNewLabel_11);
		
		
		txtGeneRecombineRate.setBounds(160, 140, 120, 25);
		add(txtGeneRecombineRate);
		txtGeneRecombineRate.setColumns(10);
		txtGeneRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneOnePointRecombineRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_12 = new JLabel("\u57FA\u56E0\u5355\u70B9\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_12.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_12.setBounds(340, 140, 142, 25);
	    add(lblNewLabel_12);
		
		txtGeneOnePointRecombineRate.setBounds(485, 140, 120, 25);
		add(txtGeneOnePointRecombineRate);
		txtGeneOnePointRecombineRate.setColumns(10);
		txtGeneOnePointRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtTwoPointRecombineRate.grabFocus();
		        }  
		    }  
		});  
		JLabel lblNewLabel_13 = new JLabel("\u57FA\u56E0\u591A\u70B9\u91CD\u7EC4\u6982\u7387");
		lblNewLabel_13.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_13.setBounds(20, 180, 131, 25);
		add(lblNewLabel_13);
		
		
		txtTwoPointRecombineRate.setBounds(160, 180, 120, 25);
		add(txtTwoPointRecombineRate);
		txtTwoPointRecombineRate.setColumns(10);
		txtTwoPointRecombineRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtMutateRate.grabFocus();
		        }  
		    }  
		}); 
		
		JLabel lblNewLabel_30 = new JLabel("\u57FA\u56E0\u7A81\u53D8\u6982\u7387");
		lblNewLabel_30.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_30.setBounds(340, 180, 100, 25);
		add(lblNewLabel_30);
		
		
		txtMutateRate.setBounds(485, 180, 120, 25);
		add(txtMutateRate);
		txtMutateRate.setColumns(10);
		txtMutateRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtGeneTransportRate.grabFocus();
		        }  
		    }  
		}); 
		
		JLabel lblNewLabel_31 = new JLabel("\u57FA\u56E0\u8F6C\u5EA7\u6982\u7387");
		lblNewLabel_31.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_31.setBounds(20, 220, 100, 25);
		add(lblNewLabel_31);
		
	    txtGeneTransportRate.setBounds(160, 220, 120, 25);
		add(txtGeneTransportRate);
		txtGeneTransportRate.setColumns(10);
		txtGeneTransportRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtofIsElement.grabFocus();
		        }  
		    }  
		}); 
		
		JComboBoxOfAvailableModifyings.setBounds(485, 220, 120, 25);
		add(JComboBoxOfAvailableModifyings);
		
		JLabel lblNewLabel_32 = new JLabel("\u57FA\u56E0\u9009\u62E9\u53D8\u5F02\u7B56\u7565");
		lblNewLabel_32.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_32.setBounds(340, 220, 120, 25);
		add(lblNewLabel_32);
		
		JLabel lblNewLabel_14 = new JLabel("IS\u957F\u5EA6");
		lblNewLabel_14.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_14.setBounds(20, 260, 100, 25);
		add(lblNewLabel_14);
		
		
		txtofIsElement.setBounds(160, 260, 120, 25);
		add(txtofIsElement);
		txtofIsElement.setColumns(10);
		txtofIsElement.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtIsTransportRate.grabFocus();
		        }  
		    }  
		});  
		JLabel lblNewLabel_15 = new JLabel("IS\u8F6C\u5EA7\u7387");
		lblNewLabel_15.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_15.setBounds(340, 260, 100, 25);
		add(lblNewLabel_15);
		
		
		txtIsTransportRate.setBounds(485, 260, 120, 25);
		add(txtIsTransportRate);
		txtIsTransportRate.setColumns(10);
		txtIsTransportRate.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtofRisElement.grabFocus();
		        }  
		    }  
		});  
		
		txtofRisElement.setBounds(160, 300, 120, 25);
		add(txtofRisElement);
		txtofRisElement.setColumns(10);
		txtofRisElement.addKeyListener(new KeyAdapter(){
		    public void keyPressed(KeyEvent e) {  
		        if(e.getKeyCode() == KeyEvent.VK_ENTER){   
		        	txtRisTransportRate.grabFocus();
		        }  
		    }  
		});
		JLabel lblNewLabel_16 = new JLabel("RIS\u957F\u5EA6");
		lblNewLabel_16.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_16.setBounds(20, 300, 100, 25);
		add(lblNewLabel_16);
		
		JLabel lblNewLabel_17 = new JLabel("RIS\u8F6C\u5EA7\u7387");
		lblNewLabel_17.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_17.setBounds(340, 300, 100, 25);
		add(lblNewLabel_17);
		
		
		txtRisTransportRate.setBounds(485, 300, 120, 25);
		add(txtRisTransportRate);
		txtRisTransportRate.setColumns(10);
        /*btnForward3.addActionListener(new ActionListener(){
              public void actionPerformed(ActionEvent e) {
				TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node2));
				tree_1.setSelectionPath(visiblePath);
				HostPane.setVisible(false);
        		panel_1.setVisible(false);
        		panel_2.setVisible(true);
        		panel_3.setVisible(false);
        		panel_4.setVisible(false);
				
			}
			});*/
		//panel_0.add(panel_3);
	}

}

ui\alg\view\JPanelForPopulation.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForPopulation extends JPanel {


	
    public JTextField 
	txtPopulationSize = new JTextField();
    public JTextField txtSelectionRange = new JTextField();
	public JComboBox JcomboBoxOfPopulationCreator = new JComboBox(),
	          JComboBoxofSelectionStrategy = new JComboBox();
	public JComboBox JComboBoxAvailableCalculator = new JComboBox();
	
	
	public JPanelForPopulation() {
		
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 631, 447);
		setForeground(Color.DARK_GRAY);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(false);
		
		JLabel lblNewLabel = new JLabel("\u586B\u5199\u6240\u9700\u7684\u79CD\u7FA4\u4FE1\u606F");
		lblNewLabel.setForeground(Color.BLACK);
		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 20));
		lblNewLabel.setBounds(20, 20, 189, 25);
		add(lblNewLabel);
		
		JLabel lblNewLabel_1 = new JLabel("\u79CD\u7FA4\u521D\u59CB\u5316\u5927\u5C0F");
		lblNewLabel_1.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_1.setBounds(20, 60, 120, 25);
		add(lblNewLabel_1);
		
		
		txtPopulationSize.setBounds(160, 60, 120, 25);
		add(txtPopulationSize);
		txtPopulationSize.setColumns(10);
		txtPopulationSize.grabFocus();
		
		
		JLabel lblNewLabel_3 = new JLabel("\u79CD\u7FA4\u521D\u59CB\u5316\u65B9\u5F0F");
		lblNewLabel_3.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_3.setBounds(340, 60, 134, 25);
		add(lblNewLabel_3);
		
		
		JcomboBoxOfPopulationCreator.setBounds(485, 60, 120, 21);
		add(JcomboBoxOfPopulationCreator);
		
		JLabel  lblNewLabel_5= new JLabel("\u9009\u62E9\u4E2A\u4F53\u7684\u8303\u56F4");
		lblNewLabel_5.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_5.setBounds(340, 100, 120, 25);
		add(lblNewLabel_5);
		
		
		txtSelectionRange.setBounds(485, 100, 120, 25);
		add(txtSelectionRange);
		txtSelectionRange.setColumns(10);
		
		JLabel lblNewLabel_4 = new JLabel("\u9009\u62E9\u4E2A\u4F53\u7684\u7B56\u7565");
		lblNewLabel_4.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_4.setBounds(20, 100, 120, 25);
		add(lblNewLabel_4);
		
		
		JComboBoxofSelectionStrategy.setBounds(160, 100, 120, 21);
		add(JComboBoxofSelectionStrategy);
		
		JLabel lblNewLabel_33 = new JLabel("\u9002\u5E94\u503C\u8BA1\u7B97\u65B9\u5F0F");
		lblNewLabel_33.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_33.setBounds(20, 140, 120, 25);
	    add(lblNewLabel_33);
		
		
		JComboBoxAvailableCalculator.setBounds(160, 140, 120, 21);
		add(JComboBoxAvailableCalculator);
		/*btnNext2.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node3));
				tree_1.setSelectionPath(visiblePath);
				
				

				HostPane.setVisible(false);
        		panel_1.setVisible(false);
        		panel_2.setVisible(true);
        		panel_3.setVisible(false);
        		panel_4.setVisible(false);
				
			}
			
		});*/
	}

}

ui\alg\view\JPanelForPopulation.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForPopulation extends JPanel {


	
    public JTextField 
	txtPopulationSize = new JTextField();
    public JTextField txtSelectionRange = new JTextField();
	public JComboBox JcomboBoxOfPopulationCreator = new JComboBox(),
	          JComboBoxofSelectionStrategy = new JComboBox();
	public JComboBox JComboBoxAvailableCalculator = new JComboBox();
	
	
	public JPanelForPopulation() {
		
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 631, 447);
		setForeground(Color.DARK_GRAY);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(false);
		
		JLabel lblNewLabel = new JLabel("\u586B\u5199\u6240\u9700\u7684\u79CD\u7FA4\u4FE1\u606F");
		lblNewLabel.setForeground(Color.BLACK);
		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 20));
		lblNewLabel.setBounds(20, 20, 189, 25);
		add(lblNewLabel);
		
		JLabel lblNewLabel_1 = new JLabel("\u79CD\u7FA4\u521D\u59CB\u5316\u5927\u5C0F");
		lblNewLabel_1.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_1.setBounds(20, 60, 120, 25);
		add(lblNewLabel_1);
		
		
		txtPopulationSize.setBounds(160, 60, 120, 25);
		add(txtPopulationSize);
		txtPopulationSize.setColumns(10);
		txtPopulationSize.grabFocus();
		
		
		JLabel lblNewLabel_3 = new JLabel("\u79CD\u7FA4\u521D\u59CB\u5316\u65B9\u5F0F");
		lblNewLabel_3.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_3.setBounds(340, 60, 134, 25);
		add(lblNewLabel_3);
		
		
		JcomboBoxOfPopulationCreator.setBounds(485, 60, 120, 21);
		add(JcomboBoxOfPopulationCreator);
		
		JLabel  lblNewLabel_5= new JLabel("\u9009\u62E9\u4E2A\u4F53\u7684\u8303\u56F4");
		lblNewLabel_5.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_5.setBounds(340, 100, 120, 25);
		add(lblNewLabel_5);
		
		
		txtSelectionRange.setBounds(485, 100, 120, 25);
		add(txtSelectionRange);
		txtSelectionRange.setColumns(10);
		
		JLabel lblNewLabel_4 = new JLabel("\u9009\u62E9\u4E2A\u4F53\u7684\u7B56\u7565");
		lblNewLabel_4.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_4.setBounds(20, 100, 120, 25);
		add(lblNewLabel_4);
		
		
		JComboBoxofSelectionStrategy.setBounds(160, 100, 120, 21);
		add(JComboBoxofSelectionStrategy);
		
		JLabel lblNewLabel_33 = new JLabel("\u9002\u5E94\u503C\u8BA1\u7B97\u65B9\u5F0F");
		lblNewLabel_33.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_33.setBounds(20, 140, 120, 25);
	    add(lblNewLabel_33);
		
		
		JComboBoxAvailableCalculator.setBounds(160, 140, 120, 21);
		add(JComboBoxAvailableCalculator);
		/*btnNext2.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node3));
				tree_1.setSelectionPath(visiblePath);
				
				

				HostPane.setVisible(false);
        		panel_1.setVisible(false);
        		panel_2.setVisible(true);
        		panel_3.setVisible(false);
        		panel_4.setVisible(false);
				
			}
			
		});*/
	}

}

ui\alg\view\JPanelForStopSetting.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;






public class JPanelForStopSetting extends JPanel {

	
	public JTextField txtMaxGeneration=new JTextField(),
	                  txtAccuracy=new JTextField();
	
	
	

	public JPanelForStopSetting() {
		   
		    setBounds(155, 115, 631, 447);
		    setVisible(false);
		    setBorder(new LineBorder(new Color(0, 0, 0)));
		    setBackground(Color.WHITE);
		    setLayout(null);
		    
		  
		    
		    JPanel panel = new JPanel();
		    panel.setBounds(0, 561, 813, 87);
		    
		    panel.setLayout(null);
		    
		    JLabel lblNewLabel_38 = new JLabel("-----------1.0\u7248\u672C\uFF08c\uFF09Miscrosoft Cooperation------------");
		    lblNewLabel_38.setBounds(162, 35, 463, 28);
		    lblNewLabel_38.setFont(new Font("宋体", Font.PLAIN, 13));
		    lblNewLabel_38.setForeground(Color.RED);
		    panel.add(lblNewLabel_38);
		    JLabel lblNewLabel_40 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u7B97\u6CD5\u7EC8\u6B62\u6761\u4EF6");
		    lblNewLabel_40.setFont(new Font("宋体", Font.PLAIN, 18));
		    lblNewLabel_40.setBounds(20, 20, 208, 25);
		    add(lblNewLabel_40);
		    
		    JLabel lblNewLabel_41 = new JLabel("\u6F14\u5316\u4EE3\u6570");
		    lblNewLabel_41.setFont(new Font("宋体", Font.PLAIN, 17));
		    lblNewLabel_41.setBounds(20, 60, 120, 25);
		    add(lblNewLabel_41);
		    
		    txtMaxGeneration.setBounds(160, 60, 160, 25);
		    add(txtMaxGeneration);
		    txtMaxGeneration.setColumns(10);
		    
		    JLabel lblNewLabel_42 = new JLabel("\u7B97\u6CD5\u7ED3\u679C\u7684\u7CBE\u5EA6");
		    lblNewLabel_42.setFont(new Font("宋体", Font.PLAIN, 17));
		    lblNewLabel_42.setBounds(20, 120, 120, 25);
		    add(lblNewLabel_42);
		    
		    txtAccuracy = new JTextField();
		    txtAccuracy.setBounds(160, 120, 160, 25);
		    add(txtAccuracy);
		    txtAccuracy.setColumns(10);
		
		}
	  
}

ui\alg\view\JPanelForStopSetting.java
package ui.alg.view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;






public class JPanelForStopSetting extends JPanel {

	
	public JTextField txtMaxGeneration=new JTextField(),
	                  txtAccuracy=new JTextField();
	
	
	

	public JPanelForStopSetting() {
		   
		    setBounds(155, 115, 631, 447);
		    setVisible(false);
		    setBorder(new LineBorder(new Color(0, 0, 0)));
		    setBackground(Color.WHITE);
		    setLayout(null);
		    
		  
		    
		    JPanel panel = new JPanel();
		    panel.setBounds(0, 561, 813, 87);
		    
		    panel.setLayout(null);
		    
		    JLabel lblNewLabel_38 = new JLabel("-----------1.0\u7248\u672C\uFF08c\uFF09Miscrosoft Cooperation------------");
		    lblNewLabel_38.setBounds(162, 35, 463, 28);
		    lblNewLabel_38.setFont(new Font("宋体", Font.PLAIN, 13));
		    lblNewLabel_38.setForeground(Color.RED);
		    panel.add(lblNewLabel_38);
		    JLabel lblNewLabel_40 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u7B97\u6CD5\u7EC8\u6B62\u6761\u4EF6");
		    lblNewLabel_40.setFont(new Font("宋体", Font.PLAIN, 18));
		    lblNewLabel_40.setBounds(20, 20, 208, 25);
		    add(lblNewLabel_40);
		    
		    JLabel lblNewLabel_41 = new JLabel("\u6F14\u5316\u4EE3\u6570");
		    lblNewLabel_41.setFont(new Font("宋体", Font.PLAIN, 17));
		    lblNewLabel_41.setBounds(20, 60, 120, 25);
		    add(lblNewLabel_41);
		    
		    txtMaxGeneration.setBounds(160, 60, 160, 25);
		    add(txtMaxGeneration);
		    txtMaxGeneration.setColumns(10);
		    
		    JLabel lblNewLabel_42 = new JLabel("\u7B97\u6CD5\u7ED3\u679C\u7684\u7CBE\u5EA6");
		    lblNewLabel_42.setFont(new Font("宋体", Font.PLAIN, 17));
		    lblNewLabel_42.setBounds(20, 120, 120, 25);
		    add(lblNewLabel_42);
		    
		    txtAccuracy = new JTextField();
		    txtAccuracy.setBounds(160, 120, 160, 25);
		    add(txtAccuracy);
		    txtAccuracy.setColumns(10);
		
		}
	  
}

ui\input\controller\DownLoadInterfaceController.java
package ui.input.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;


public class DownLoadInterfaceController {
	   private static String fileName;
	   private static File saveDir;
	   static StringBuffer buffer;
	   static File file;
	   public static int btnDownLoadController(ModelForDownLoadInterface downLoadInterface) throws IOException{
		   fileName=downLoadInterface.getInterfaceName();
		   System.out.print("fileName"+fileName);
		   saveDir=downLoadInterface.getSaveDir();
		   System.out.println("saveDir"+saveDir.getName());
		   buffer=ReadFile(fileName,saveDir);
		   return WriteFile(buffer,file.getName());
	   }
	
	private static StringBuffer ReadFile(String interfaceName, File saveDir) {
		
		if(interfaceName.equals("Calculator")){
			 file=new File(".\\src\\domain\\service\\alg\\baseclass\\Calculator.java");
		}
		else if(interfaceName.equals("Creator")){
			file=new File(".\\src\\domain\\service\\alg\\baseclass\\Creator.java");
		}
		else if(interfaceName.equals("Selector")){
		    file=new File(".\\src\\domain\\service\\alg\\baseclass\\Selector.java");
		}
		else if(interfaceName.equals("Modifying")){
			 file=new File(".\\src\\domain\\service\\alg\\baseclass\\Modifying.java");
		}
		else{
			 file=new File(".\\src\\domain\\core\\algmodel\\genepiece\\Function.java");
		}
		System.out.println(file.toString());
		try{
		       
		       BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),"GBK"));
		       String data=null;
		       StringBuffer buffer=new StringBuffer();
		       while((data=reader.readLine())!=null){
		    	
		    	   buffer.append(data+"\n");
		       }
		        reader.close();
		        return buffer;
		 }catch(IOException e){
			     throw new RuntimeException();
		}
    }
	private static int WriteFile(StringBuffer buffer, String name) throws IOException {
		 //检查指定路径是否存在
		 File newInterface=new File(saveDir.toString()+"\\"+file.getName());
		 
		 if(!saveDir.exists()&&!saveDir.isDirectory()){//检查文件夹是否存在，不存在就生成
			 saveDir.mkdirs();
			 
		 }
		 System.out.println(newInterface.toString());
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newInterface),"GBK"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generate d catch block
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	     writer.write(buffer.toString());
		 writer.flush();
	     writer.close();
	     return 0;
	}
}

ui\input\controller\DownLoadInterfaceController.java
package ui.input.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;


public class DownLoadInterfaceController {
	   private static String fileName;
	   private static File saveDir;
	   static StringBuffer buffer;
	   static File file;
	   public static int btnDownLoadController(ModelForDownLoadInterface downLoadInterface) throws IOException{
		   fileName=downLoadInterface.getInterfaceName();
		   System.out.print("fileName"+fileName);
		   saveDir=downLoadInterface.getSaveDir();
		   System.out.println("saveDir"+saveDir.getName());
		   buffer=ReadFile(fileName,saveDir);
		   return WriteFile(buffer,file.getName());
	   }
	
	private static StringBuffer ReadFile(String interfaceName, File saveDir) {
		
		if(interfaceName.equals("Calculator")){
			 file=new File(".\\src\\domain\\service\\alg\\baseclass\\Calculator.java");
		}
		else if(interfaceName.equals("Creator")){
			file=new File(".\\src\\domain\\service\\alg\\baseclass\\Creator.java");
		}
		else if(interfaceName.equals("Selector")){
		    file=new File(".\\src\\domain\\service\\alg\\baseclass\\Selector.java");
		}
		else if(interfaceName.equals("Modifying")){
			 file=new File(".\\src\\domain\\service\\alg\\baseclass\\Modifying.java");
		}
		else{
			 file=new File(".\\src\\domain\\core\\algmodel\\genepiece\\Function.java");
		}
		System.out.println(file.toString());
		try{
		       
		       BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),"GBK"));
		       String data=null;
		       StringBuffer buffer=new StringBuffer();
		       while((data=reader.readLine())!=null){
		    	
		    	   buffer.append(data+"\n");
		       }
		        reader.close();
		        return buffer;
		 }catch(IOException e){
			     throw new RuntimeException();
		}
    }
	private static int WriteFile(StringBuffer buffer, String name) throws IOException {
		 //检查指定路径是否存在
		 File newInterface=new File(saveDir.toString()+"\\"+file.getName());
		 
		 if(!saveDir.exists()&&!saveDir.isDirectory()){//检查文件夹是否存在，不存在就生成
			 saveDir.mkdirs();
			 
		 }
		 System.out.println(newInterface.toString());
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newInterface),"GBK"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generate d catch block
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	     writer.write(buffer.toString());
		 writer.flush();
	     writer.close();
	     return 0;
	}
}

ui\input\controller\FooterPanelController.java
package ui.input.controller;

import java.awt.CardLayout;
import java.io.IOException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import ui.alg.Model.ModelForJPanelConfig;
import ui.alg.Model.ModelForJPanelFunction;
import ui.alg.Model.ModelForJPanelGEne;
import ui.alg.Model.ModelForJPanelPopulation;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.model.ModelForJPanelInputPath;
import ui.input.view.JPanelForFooter;

import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import domain.service.alg.baseclass.GepAlgService;

import jxl.read.biff.BiffException;
import exception.Duplicated;


public class FooterPanelController {
	
    
	 public static int btnNextController(DefaultMutableTreeNode[] node,JTree tree_1,JPanelForFooter footPanel,JPanel panel_0,CardLayout card,int count) {
		footPanel.btnBefore.setEnabled(true);
  		card.next(panel_0);
  		switch(count){
  		  case 0:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[1]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第-个Node"+node[1].toString());
    		break; 
  		  }
  		  case 1:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[2]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第二个Node"+node[2].toString());
    		break;
  		  }
  		  case 2:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第三个Node"+node[3].toString());
    		break;
  		  }
  		  case 3:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[4]));
    		tree_1.setSelectionPath(visiblePath);
    	    System.out.println("第四个Node"+node[4].toString());
    		break;
  		  }
  		 default:{
  			break;
  			
  		  }
  		}
  		if(count==3){
  			footPanel.btnNext.setEnabled(false);
  			footPanel.btnRun.setEnabled(true);
  		}
  		if(count==4){
  			return count;
  		}
  		count++;
  		System.out.println(count);
  		return count;
	}
    public static int btnBeforeController(DefaultMutableTreeNode node[],JTree tree_1,JButton  btnNext,JButton btnBefore,JPanel panel_0,CardLayout card,int count) {
    	count--;
  		if(count==0){
  			btnBefore.setEnabled(false);
  		}
  			btnNext.setEnabled(true);
  		
  		System.out.println(count);
  		switch(count){
  		  case 0:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[0]));
    		tree_1.setSelectionPath(visiblePath);
    	    System.out.println("第0个Node"+node[0].toString());
    		break;
  		  }
  		  case 1:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[1]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第1个Node"+node[1].toString());
    		break;
  		  }
  		  case 2:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[2]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第2个Node"+node[2].toString());
    		break;
  		  }
  		  case 3:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第3个Node"+node[3].toString());
    		break;
  		  }
  		 default:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第3个Node"+node[3].toString());
    		break;
  		  }
  		}
  		card.previous(panel_0);
  		return count;
		
	}
	public static boolean btnRunController(ModelForJPanelConfig configuration,ModelForJPanelInputPath inputPath,
	   ModelForJPanelPopulation population,ModelForJPanelGEne gene,ModelForJPanelFunction function,
	   GepConfiguration myParameter,IgepAlgService myGepService,GepConfiguration myConfigurationFromDB,int flag){
		String risElement = gene.getRisElement();
		String strRisElement = "";
		for (int i = 0; i < risElement.length(); i++) {
				if (i != 0) {
					if (risElement.charAt(i) != ','
							&& (risElement.substring(0, i).indexOf(
									risElement.charAt(i)) < 0)) {
						strRisElement = strRisElement
								+ risElement.charAt(i);
					}
				} else {
					if (risElement.charAt(i) != ',') {
						strRisElement = strRisElement
								+ risElement.charAt(i);
					}
				}
			}
		String isElement = gene.getIsElement();
		String strIsElement = "";
		for (int i = 0; i < isElement.length(); i++) {
				if (i != 0) {
					if (isElement.charAt(i) != ','
							&& (isElement.substring(0, i).indexOf(
									isElement.charAt(i)) < 0)) {
						strIsElement = strIsElement + isElement.charAt(i);
					}
				} else {
					if (isElement.charAt(i) != ',') {
						strIsElement = strIsElement + isElement.charAt(i);
					}
				}
			}
		
		myParameter.setInputFile(inputPath.getInputPath());
		myParameter.setName(configuration.getConfig());
		myParameter.setAccuray(inputPath.getAccuracy());
		myParameter.setNormalGeneNumber(gene.getNormalGeneNumber());
		myParameter.setGeneRecombineRate(gene.getGeneRecombineRate());
		myParameter.setGeneTransportRate(gene.getGeneTransportRate());
		myParameter.setNormalHeaderLength(gene.getNormalHeaderLength());
		myParameter.setIsTransportRate(gene.getIsTransportRate());
		myParameter.setMaxGeneration(inputPath.getMaxgeneration());
		myParameter.setOnePointRecombineRate(gene.getGeneOnePointRecombineRate());
		myParameter.setPopulationSize(population.getPopulationSize());
		myParameter.setRisTransportRate(gene.getRisTransportRate());
		myParameter.setSelectionRange(population.getSelectionRange());
		myParameter.setTwoPointRecombineRate(gene.getTwoPointRecombineRate());
		myParameter.setIsElement(gene.getIsElement());
        myParameter.setRisElement(gene.getRisElement());
		myParameter.setHomeoticGeneNumber(gene.getHomeoticGeneNums());
	    myParameter.setHomeoticHeaderLength(gene.getHomeoticHeaderLength());
		myParameter.setFunctionList(function.getFunctions().toString());
		myParameter.setMutateRate(gene.getMutateRate());

				
	    try {
	    	System.out.println(myGepService.getAvailableSelector().get(population.getSelectionStrategyIndex()).getClass().getName());
			myParameter.setSelector(myGepService.getAvailableSelector().get(population.getSelectionStrategyIndex()).getClass().getName());
			myParameter.setCalculator(myGepService.getAvailableCalculator().get(population.getAvailableCalculatorIndex()).getClass().getName());
			myParameter.setCreator(myGepService.getAvailableCreator().get(population.getPopulationCreatorIndex()).getClass().getName());
			myParameter.setModify(myGepService.getAvailableModifyings().get(gene.getAvailableModifyingsIndex()).getClass().getName());
			
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InstantiationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

			
			
		    
		try {
			myGepService.setParameters(myParameter);
		} catch (BiffException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (InstantiationException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (IllegalAccessException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (ClassNotFoundException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (IOException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		}
		
		
		
       myGepService.run();
       
       
       
       if (flag == -1) {
				if (myParameter.equals(myConfigurationFromDB) == false) {
					return true;
					}
				else{
					return false;
				}
		} 
		else {
				try {
					myGepService.saveArgumentsToDb(myParameter);
				} catch (Duplicated e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return true;
				
		}
		
		

	}
    
}

ui\input\controller\FooterPanelController.java
package ui.input.controller;

import java.awt.CardLayout;
import java.io.IOException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import ui.alg.Model.ModelForJPanelConfig;
import ui.alg.Model.ModelForJPanelFunction;
import ui.alg.Model.ModelForJPanelGEne;
import ui.alg.Model.ModelForJPanelPopulation;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.model.ModelForJPanelInputPath;
import ui.input.view.JPanelForFooter;

import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import domain.service.alg.baseclass.GepAlgService;

import jxl.read.biff.BiffException;
import exception.Duplicated;


public class FooterPanelController {
	
    
	 public static int btnNextController(DefaultMutableTreeNode[] node,JTree tree_1,JPanelForFooter footPanel,JPanel panel_0,CardLayout card,int count) {
		footPanel.btnBefore.setEnabled(true);
  		card.next(panel_0);
  		switch(count){
  		  case 0:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[1]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第-个Node"+node[1].toString());
    		break; 
  		  }
  		  case 1:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[2]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第二个Node"+node[2].toString());
    		break;
  		  }
  		  case 2:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第三个Node"+node[3].toString());
    		break;
  		  }
  		  case 3:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[4]));
    		tree_1.setSelectionPath(visiblePath);
    	    System.out.println("第四个Node"+node[4].toString());
    		break;
  		  }
  		 default:{
  			break;
  			
  		  }
  		}
  		if(count==3){
  			footPanel.btnNext.setEnabled(false);
  			footPanel.btnRun.setEnabled(true);
  		}
  		if(count==4){
  			return count;
  		}
  		count++;
  		System.out.println(count);
  		return count;
	}
    public static int btnBeforeController(DefaultMutableTreeNode node[],JTree tree_1,JButton  btnNext,JButton btnBefore,JPanel panel_0,CardLayout card,int count) {
    	count--;
  		if(count==0){
  			btnBefore.setEnabled(false);
  		}
  			btnNext.setEnabled(true);
  		
  		System.out.println(count);
  		switch(count){
  		  case 0:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[0]));
    		tree_1.setSelectionPath(visiblePath);
    	    System.out.println("第0个Node"+node[0].toString());
    		break;
  		  }
  		  case 1:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[1]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第1个Node"+node[1].toString());
    		break;
  		  }
  		  case 2:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[2]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第2个Node"+node[2].toString());
    		break;
  		  }
  		  case 3:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第3个Node"+node[3].toString());
    		break;
  		  }
  		 default:{
  			TreePath visiblePath=new TreePath(((DefaultTreeModel)tree_1.getModel()).getPathToRoot(node[3]));
    		tree_1.setSelectionPath(visiblePath);
    		System.out.println("第3个Node"+node[3].toString());
    		break;
  		  }
  		}
  		card.previous(panel_0);
  		return count;
		
	}
	public static boolean btnRunController(ModelForJPanelConfig configuration,ModelForJPanelInputPath inputPath,
	   ModelForJPanelPopulation population,ModelForJPanelGEne gene,ModelForJPanelFunction function,
	   GepConfiguration myParameter,IgepAlgService myGepService,GepConfiguration myConfigurationFromDB,int flag){
		String risElement = gene.getRisElement();
		String strRisElement = "";
		for (int i = 0; i < risElement.length(); i++) {
				if (i != 0) {
					if (risElement.charAt(i) != ','
							&& (risElement.substring(0, i).indexOf(
									risElement.charAt(i)) < 0)) {
						strRisElement = strRisElement
								+ risElement.charAt(i);
					}
				} else {
					if (risElement.charAt(i) != ',') {
						strRisElement = strRisElement
								+ risElement.charAt(i);
					}
				}
			}
		String isElement = gene.getIsElement();
		String strIsElement = "";
		for (int i = 0; i < isElement.length(); i++) {
				if (i != 0) {
					if (isElement.charAt(i) != ','
							&& (isElement.substring(0, i).indexOf(
									isElement.charAt(i)) < 0)) {
						strIsElement = strIsElement + isElement.charAt(i);
					}
				} else {
					if (isElement.charAt(i) != ',') {
						strIsElement = strIsElement + isElement.charAt(i);
					}
				}
			}
		
		myParameter.setInputFile(inputPath.getInputPath());
		myParameter.setName(configuration.getConfig());
		myParameter.setAccuray(inputPath.getAccuracy());
		myParameter.setNormalGeneNumber(gene.getNormalGeneNumber());
		myParameter.setGeneRecombineRate(gene.getGeneRecombineRate());
		myParameter.setGeneTransportRate(gene.getGeneTransportRate());
		myParameter.setNormalHeaderLength(gene.getNormalHeaderLength());
		myParameter.setIsTransportRate(gene.getIsTransportRate());
		myParameter.setMaxGeneration(inputPath.getMaxgeneration());
		myParameter.setOnePointRecombineRate(gene.getGeneOnePointRecombineRate());
		myParameter.setPopulationSize(population.getPopulationSize());
		myParameter.setRisTransportRate(gene.getRisTransportRate());
		myParameter.setSelectionRange(population.getSelectionRange());
		myParameter.setTwoPointRecombineRate(gene.getTwoPointRecombineRate());
		myParameter.setIsElement(gene.getIsElement());
        myParameter.setRisElement(gene.getRisElement());
		myParameter.setHomeoticGeneNumber(gene.getHomeoticGeneNums());
	    myParameter.setHomeoticHeaderLength(gene.getHomeoticHeaderLength());
		myParameter.setFunctionList(function.getFunctions().toString());
		myParameter.setMutateRate(gene.getMutateRate());

				
	    try {
	    	System.out.println(myGepService.getAvailableSelector().get(population.getSelectionStrategyIndex()).getClass().getName());
			myParameter.setSelector(myGepService.getAvailableSelector().get(population.getSelectionStrategyIndex()).getClass().getName());
			myParameter.setCalculator(myGepService.getAvailableCalculator().get(population.getAvailableCalculatorIndex()).getClass().getName());
			myParameter.setCreator(myGepService.getAvailableCreator().get(population.getPopulationCreatorIndex()).getClass().getName());
			myParameter.setModify(myGepService.getAvailableModifyings().get(gene.getAvailableModifyingsIndex()).getClass().getName());
			
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InstantiationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

			
			
		    
		try {
			myGepService.setParameters(myParameter);
		} catch (BiffException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (InstantiationException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (IllegalAccessException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (ClassNotFoundException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		} catch (IOException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		}
		
		
		
       myGepService.run();
       
       
       
       if (flag == -1) {
				if (myParameter.equals(myConfigurationFromDB) == false) {
					return true;
					}
				else{
					return false;
				}
		} 
		else {
				try {
					myGepService.saveArgumentsToDb(myParameter);
				} catch (Duplicated e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return true;
				
		}
		
		

	}
    
}

ui\input\controller\ModelForDownLoadInterface.java
package ui.input.controller;

import java.io.File;

public class ModelForDownLoadInterface {
	   String saveDirName;
	   String interfaceName;
	   File saveDir;
	   
	   public String getSaveDirName() {
			return saveDirName;
		}
		public void setSaveDirName(String fileName) {
			this.saveDirName = fileName;
		}
		
		public String getInterfaceName() {
				return interfaceName;
		}
		public void setInterfaceName(String interfacePath) {
				this.interfaceName = interfacePath;
		}
		
		
		 public File getSaveDir() {
				return saveDir;
		}
		public void setDir(File dir) {
				this.saveDir = dir;
	    }
		
		public ModelForDownLoadInterface(File dir,String interfaceName, String interfacePath) {
			super();
			this.saveDir=dir;
            this.saveDirName =interfacePath;
			this.interfaceName=interfaceName;
		}
		
		
}

ui\input\controller\ModelForDownLoadInterface.java
package ui.input.controller;

import java.io.File;

public class ModelForDownLoadInterface {
	   String saveDirName;
	   String interfaceName;
	   File saveDir;
	   
	   public String getSaveDirName() {
			return saveDirName;
		}
		public void setSaveDirName(String fileName) {
			this.saveDirName = fileName;
		}
		
		public String getInterfaceName() {
				return interfaceName;
		}
		public void setInterfaceName(String interfacePath) {
				this.interfaceName = interfacePath;
		}
		
		
		 public File getSaveDir() {
				return saveDir;
		}
		public void setDir(File dir) {
				this.saveDir = dir;
	    }
		
		public ModelForDownLoadInterface(File dir,String interfaceName, String interfacePath) {
			super();
			this.saveDir=dir;
            this.saveDirName =interfacePath;
			this.interfaceName=interfaceName;
		}
		
		
}

ui\input\controller\SaveConfigPanelController.java
package ui.input.controller;

import javax.swing.JPanel;

import ui.input.view.JPanelForJTree;
import ui.output.view.JPanelForOutput;
import ui.input.view.JPanelForSaveConfig;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import exception.Duplicated;

public class SaveConfigPanelController {
	
   public static void btnSaveController(IgepAlgService myGepService,GepConfiguration myParameter,ui.output.view.JPanelForOutput outputPanel,JPanelForSaveConfig savePanel,JPanelForJTree treePanel,JPanel panel_0){
	    
		outputPanel.setVisible(true);
		savePanel.setVisible(false);
		treePanel.setVisible(false);
   }
}

ui\input\controller\SaveConfigPanelController.java
package ui.input.controller;

import javax.swing.JPanel;

import ui.input.view.JPanelForJTree;
import ui.output.view.JPanelForOutput;
import ui.input.view.JPanelForSaveConfig;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import exception.Duplicated;

public class SaveConfigPanelController {
	
   public static void btnSaveController(IgepAlgService myGepService,GepConfiguration myParameter,ui.output.view.JPanelForOutput outputPanel,JPanelForSaveConfig savePanel,JPanelForJTree treePanel,JPanel panel_0){
	    
		outputPanel.setVisible(true);
		savePanel.setVisible(false);
		treePanel.setVisible(false);
   }
}

ui\input\controller\TreePanelController.java
package ui.input.controller;

import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

public class TreePanelController {
   public static int  treeMouseListener(MouseEvent e,JPanel[] panels,JButton btnBefore,JButton btnNext,int count){
	   JTree tree = (JTree) e.getSource();
       int selRow = tree.getRowForLocation(e.getX(), e.getY());
      TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
      if (selRow != -1)
      {
          if (e.getClickCount() == 1)
          {
          	TreeNode node = (TreeNode) selPath.getLastPathComponent();
          	if(node.toString()=="算法系统"){
          		panels[0].setVisible(true);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(false);
          		btnNext.setEnabled(true);
          		count=0;
          	}
          	if(node.toString()=="算法名称"){
          		panels[0].setVisible(true);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=0;
          	}
          	if(node.toString()=="算法终止条件"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(true);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=1;
          	}
          	if(node.toString()=="种群信息"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(true);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=2;
          	}
          	if(node.toString()=="基因信息"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(true);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=3;
          	}
          	if(node.toString()=="所需函数和随机数"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(true);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(false);
          		count=4;
          	}
          	if(node.toString()=="输入系统"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(true);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	} 
          	if(node.toString()=="上传/下载接口"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(true);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	} 
          	if(node.toString()=="输入路径"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(true);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	}
          	if(node.toString()=="输出系统"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[8].setVisible(false);
          	    panels[9].setVisible(false);
          		panels[7].setVisible(true);
          		panels[10].setVisible(false);
          	}  
          	if(node.toString()=="输出结果"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[8].setVisible(false);
          	    panels[9].setVisible(false);
          		panels[7].setVisible(true);
          		panels[10].setVisible(false);
          	}  
          	
          } 
      }
	return count;

   }
}

ui\input\controller\TreePanelController.java
package ui.input.controller;

import java.awt.event.MouseEvent;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

public class TreePanelController {
   public static int  treeMouseListener(MouseEvent e,JPanel[] panels,JButton btnBefore,JButton btnNext,int count){
	   JTree tree = (JTree) e.getSource();
       int selRow = tree.getRowForLocation(e.getX(), e.getY());
      TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
      if (selRow != -1)
      {
          if (e.getClickCount() == 1)
          {
          	TreeNode node = (TreeNode) selPath.getLastPathComponent();
          	if(node.toString()=="算法系统"){
          		panels[0].setVisible(true);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(false);
          		btnNext.setEnabled(true);
          		count=0;
          	}
          	if(node.toString()=="算法名称"){
          		panels[0].setVisible(true);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=0;
          	}
          	if(node.toString()=="算法终止条件"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(true);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=1;
          	}
          	if(node.toString()=="种群信息"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(true);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=2;
          	}
          	if(node.toString()=="基因信息"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(true);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(true);
          		count=3;
          	}
          	if(node.toString()=="所需函数和随机数"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(true);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(true);
          		panels[9].setVisible(true);
          		btnBefore.setEnabled(true);
          		btnNext.setEnabled(false);
          		count=4;
          	}
          	if(node.toString()=="输入系统"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(true);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	} 
          	if(node.toString()=="上传/下载接口"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(true);
          		panels[6].setVisible(false);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	} 
          	if(node.toString()=="输入路径"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(true);
          		panels[7].setVisible(false);
          		panels[8].setVisible(false);
          		panels[9].setVisible(false);
          	}
          	if(node.toString()=="输出系统"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[8].setVisible(false);
          	    panels[9].setVisible(false);
          		panels[7].setVisible(true);
          		panels[10].setVisible(false);
          	}  
          	if(node.toString()=="输出结果"){
          		panels[0].setVisible(false);
          		panels[1].setVisible(false);
          		panels[2].setVisible(false);
          		panels[3].setVisible(false);
          		panels[4].setVisible(false);
          		panels[5].setVisible(false);
          		panels[6].setVisible(false);
          		panels[8].setVisible(false);
          	    panels[9].setVisible(false);
          		panels[7].setVisible(true);
          		panels[10].setVisible(false);
          	}  
          	
          } 
      }
	return count;

   }
}

ui\input\controller\UploadInterfaceController.java
package ui.input.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;

import jxl.read.biff.BiffException;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;

import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.model.ModelForUploadInterface;


public class UploadInterfaceController {

   private static String fileName;
   private static boolean available;
   private static String defaultFileSavePath=".\\bin\\domain\\service\\alg\\userdefined\\";
   private static File file;
   private static File saveDir;
   static String packagePath;
   static StringBuffer buffer;
   public static int btnUploadController(ModelForUploadInterface uploadInterface) throws IOException{
	   file=uploadInterface.getFile();
	   saveDir=new File(defaultFileSavePath);
	   try {
		buffer=ReadFile(file,saveDir);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	   return WriteFile(buffer,file.getName());
   }





   public static StringBuffer ReadFile(File file,File saveDir)throws IOException{
		
	     try{
	       
	       BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),"GBK"));
	       String data=null;
	       StringBuffer buffer=new StringBuffer();
	       
	     
	    	 buffer.append("package domain.service.alg.userdefined;"+"\n"); 
	    	//会报错
	       
	       
	       int j=1;//当第一次读时替换package
	       
	       while((data=reader.readLine())!=null){
	    	 if(j!=1&&j!=2){
	    	   buffer.append(data+"\n");
	    	   fileName=file.getName().substring(0,file.getName().indexOf(".java"));//得到类名
	    	   char[] dataToChar =new char[data.length()];
	    	   String dataStr=new String();
	    	   for(int i=0;i<data.length();i++ ){
	    		   if(data.charAt(i)!=' '&&data.charAt(i)!='	'){
	    			   dataToChar[i]=data.charAt(i);
	    			   dataStr=dataStr+dataToChar[i];
	    		   }
	    		   
	    	   }
	    	 
	    	   
	    	 }
	    	 j++;
	       }
	        reader.close();
	        return buffer;
	       }catch(IOException e){
		     throw new RuntimeException();
	      }
	  }
	   
	   
	   
	   
	  public static <T> int WriteFile(StringBuffer buffer,String fileName) throws IOException{
		  
		  
		  
		
		  
		 //检查指定路径是否存在
		 File newInterface=new File(defaultFileSavePath+file.getName());
		 
		 if(!saveDir.exists()&&!saveDir.isDirectory()){//检查文件夹是否存在，不存在就生成
			 newInterface.mkdirs();
			 
		 }
		 File[] filesBeforeUpload=saveDir.listFiles();
		 
		 List<File> filesListBeforeUpload=new ArrayList<File>();
		 for(int i = 0; i< filesBeforeUpload.length;i++){
			   filesListBeforeUpload.add(filesBeforeUpload[i]);
		       if(file.getName().equals(filesBeforeUpload[i].getName())){
		    	  
		    	 //相同文件名的文件已存在
		    	   
					 System.out.println("文件已存在");
					 newInterface.delete();
				   return -1;//文件已存在
		       }
		   }
			   
         
	     
		 
		
		 
	     BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newInterface),"GBK"));
	     writer.write(buffer.toString());
		 writer.flush();
	     writer.close();
	     //生成。class文件
	     JavaCompiler complier=ToolProvider.getSystemJavaCompiler();
	     //通过TOOlProvider类的静态方法getSystemJavaCompiler来得到一个JAvaCompiler接口的实例,不能有效的控制输入输出
	     StandardJavaFileManager fileMgr=complier.getStandardFileManager(null, null, null);
	     //
	     Iterable units=fileMgr.getJavaFileObjects(defaultFileSavePath+file.getName());
	     System.out.print(defaultFileSavePath+file.getName());
	     CompilationTask t=complier.getTask(null,fileMgr,null,null,null,units);
	     //writer out：用于输出错误的流，默认为System。err
	     //javaFileManager fileManager：标准的文件管理
	     //DiagnosticListener diagnosticListener:编译器的默认行为
	     //iterable option:编译器选项
	     //iterable class:参与编译的文件
	     //iterable compiliationUnis不能为null,保存编译的java文件
	     t.call();//编译源程序
	     fileMgr.close();
	    
		
		try {
			fileName=file.getName().substring(0,file.getName().indexOf(".java"));//得到类名
			
			File classfiles=new File(".\\bin\\domain\\service\\alg\\baseclass\\");
		    System.out.println(classfiles.toString());
			//---检查实现的接口
			
			Class<?> myClass=Class.forName("domain.service.alg.userdefined."+fileName);
			for(String string:classfiles.list()){
				available=myClass.isInstance(string);
			}
			File classfileForfunction=new File(".\\bin\\domain\\core\\algmodel\\genepiece\\function");
			available=myClass.isInstance(classfileForfunction.getName());
			
			if(available==false){
				File[] filesAfterUpload=saveDir.listFiles();
				
				for(int i = 0; i< filesAfterUpload.length;i++){
					if(!filesListBeforeUpload.contains(filesAfterUpload[i])){
						filesAfterUpload[i].delete();
					 }
				}
				
				return -2;//没有实现接口
				
			}
			int i=0;
			//检查实现构造函数
			Constructor<?>[] constructorArray=myClass.getConstructors();
			for(Constructor<?> constructor:constructorArray){
				if(constructor.getParameterTypes().length==0){
					break;
				}
				else{
					i++;
				}
				
			}
			if(i==constructorArray.length){
				File[] filesAfterUpload=saveDir.listFiles();
				for(int j = 0; j< filesAfterUpload.length;i++){
					if(!filesListBeforeUpload.contains(filesAfterUpload[j])){
						filesAfterUpload[j].delete();
					 }
				}
				return -3;//没有默认构造函数
				
			}
		 } catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
		
		
	    
	     return 0;//可以上传
	   }
}
	  


ui\input\controller\UploadInterfaceController.java
package ui.input.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;

import jxl.read.biff.BiffException;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;

import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.model.ModelForUploadInterface;


public class UploadInterfaceController {

   private static String fileName;
   private static boolean available;
   private static String defaultFileSavePath=".\\bin\\domain\\service\\alg\\userdefined\\";
   private static File file;
   private static File saveDir;
   static String packagePath;
   static StringBuffer buffer;
   public static int btnUploadController(ModelForUploadInterface uploadInterface) throws IOException{
	   file=uploadInterface.getFile();
	   saveDir=new File(defaultFileSavePath);
	   try {
		buffer=ReadFile(file,saveDir);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	   return WriteFile(buffer,file.getName());
   }





   public static StringBuffer ReadFile(File file,File saveDir)throws IOException{
		
	     try{
	       
	       BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),"GBK"));
	       String data=null;
	       StringBuffer buffer=new StringBuffer();
	       
	     
	    	 buffer.append("package domain.service.alg.userdefined;"+"\n"); 
	    	//会报错
	       
	       
	       int j=1;//当第一次读时替换package
	       
	       while((data=reader.readLine())!=null){
	    	 if(j!=1&&j!=2){
	    	   buffer.append(data+"\n");
	    	   fileName=file.getName().substring(0,file.getName().indexOf(".java"));//得到类名
	    	   char[] dataToChar =new char[data.length()];
	    	   String dataStr=new String();
	    	   for(int i=0;i<data.length();i++ ){
	    		   if(data.charAt(i)!=' '&&data.charAt(i)!='	'){
	    			   dataToChar[i]=data.charAt(i);
	    			   dataStr=dataStr+dataToChar[i];
	    		   }
	    		   
	    	   }
	    	 
	    	   
	    	 }
	    	 j++;
	       }
	        reader.close();
	        return buffer;
	       }catch(IOException e){
		     throw new RuntimeException();
	      }
	  }
	   
	   
	   
	   
	  public static <T> int WriteFile(StringBuffer buffer,String fileName) throws IOException{
		  
		  
		  
		
		  
		 //检查指定路径是否存在
		 File newInterface=new File(defaultFileSavePath+file.getName());
		 
		 if(!saveDir.exists()&&!saveDir.isDirectory()){//检查文件夹是否存在，不存在就生成
			 newInterface.mkdirs();
			 
		 }
		 File[] filesBeforeUpload=saveDir.listFiles();
		 
		 List<File> filesListBeforeUpload=new ArrayList<File>();
		 for(int i = 0; i< filesBeforeUpload.length;i++){
			   filesListBeforeUpload.add(filesBeforeUpload[i]);
		       if(file.getName().equals(filesBeforeUpload[i].getName())){
		    	  
		    	 //相同文件名的文件已存在
		    	   
					 System.out.println("文件已存在");
					 newInterface.delete();
				   return -1;//文件已存在
		       }
		   }
			   
         
	     
		 
		
		 
	     BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newInterface),"GBK"));
	     writer.write(buffer.toString());
		 writer.flush();
	     writer.close();
	     //生成。class文件
	     JavaCompiler complier=ToolProvider.getSystemJavaCompiler();
	     //通过TOOlProvider类的静态方法getSystemJavaCompiler来得到一个JAvaCompiler接口的实例,不能有效的控制输入输出
	     StandardJavaFileManager fileMgr=complier.getStandardFileManager(null, null, null);
	     //
	     Iterable units=fileMgr.getJavaFileObjects(defaultFileSavePath+file.getName());
	     System.out.print(defaultFileSavePath+file.getName());
	     CompilationTask t=complier.getTask(null,fileMgr,null,null,null,units);
	     //writer out：用于输出错误的流，默认为System。err
	     //javaFileManager fileManager：标准的文件管理
	     //DiagnosticListener diagnosticListener:编译器的默认行为
	     //iterable option:编译器选项
	     //iterable class:参与编译的文件
	     //iterable compiliationUnis不能为null,保存编译的java文件
	     t.call();//编译源程序
	     fileMgr.close();
	    
		
		try {
			fileName=file.getName().substring(0,file.getName().indexOf(".java"));//得到类名
			
			File classfiles=new File(".\\bin\\domain\\service\\alg\\baseclass\\");
		    System.out.println(classfiles.toString());
			//---检查实现的接口
			
			Class<?> myClass=Class.forName("domain.service.alg.userdefined."+fileName);
			for(String string:classfiles.list()){
				available=myClass.isInstance(string);
			}
			File classfileForfunction=new File(".\\bin\\domain\\core\\algmodel\\genepiece\\function");
			available=myClass.isInstance(classfileForfunction.getName());
			
			if(available==false){
				File[] filesAfterUpload=saveDir.listFiles();
				
				for(int i = 0; i< filesAfterUpload.length;i++){
					if(!filesListBeforeUpload.contains(filesAfterUpload[i])){
						filesAfterUpload[i].delete();
					 }
				}
				
				return -2;//没有实现接口
				
			}
			int i=0;
			//检查实现构造函数
			Constructor<?>[] constructorArray=myClass.getConstructors();
			for(Constructor<?> constructor:constructorArray){
				if(constructor.getParameterTypes().length==0){
					break;
				}
				else{
					i++;
				}
				
			}
			if(i==constructorArray.length){
				File[] filesAfterUpload=saveDir.listFiles();
				for(int j = 0; j< filesAfterUpload.length;i++){
					if(!filesListBeforeUpload.contains(filesAfterUpload[j])){
						filesAfterUpload[j].delete();
					 }
				}
				return -3;//没有默认构造函数
				
			}
		 } catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
		
		
	    
	     return 0;//可以上传
	   }
}
	  


ui\input\model\ModelForJPanelInputPath.java
package ui.input.model;

public class ModelForJPanelInputPath {
    String inputPath;
    String maxGeneration;
    String accuracy;
    public ModelForJPanelInputPath(String inputPath,String maxGeneration,String accuracy){
    	this.inputPath=inputPath;
    	this.maxGeneration=maxGeneration;
    	this.accuracy=accuracy;
    	
    }
    public void setInputPath(String inputPath){
    	this.inputPath=inputPath;
    }
    public void setMaxGeneration(String maxGeneration){
    	this.maxGeneration=maxGeneration;
    }
    public void setAccuracy(String accuracy){
    	this.accuracy=accuracy;
    }
    public String getInputPath(){
        return inputPath;
    }
    public String getMaxgeneration(){
    	return maxGeneration;
    }
    public String getAccuracy(){
    	return accuracy;
    }
}

ui\input\model\ModelForJPanelInputPath.java
package ui.input.model;

public class ModelForJPanelInputPath {
    String inputPath;
    String maxGeneration;
    String accuracy;
    public ModelForJPanelInputPath(String inputPath,String maxGeneration,String accuracy){
    	this.inputPath=inputPath;
    	this.maxGeneration=maxGeneration;
    	this.accuracy=accuracy;
    	
    }
    public void setInputPath(String inputPath){
    	this.inputPath=inputPath;
    }
    public void setMaxGeneration(String maxGeneration){
    	this.maxGeneration=maxGeneration;
    }
    public void setAccuracy(String accuracy){
    	this.accuracy=accuracy;
    }
    public String getInputPath(){
        return inputPath;
    }
    public String getMaxgeneration(){
    	return maxGeneration;
    }
    public String getAccuracy(){
    	return accuracy;
    }
}

ui\input\model\ModelForUploadInterface.java
package ui.input.model;

import java.io.File;

public class ModelForUploadInterface {
   
   String fileName;
   String interfacePath;
   File file;
   File dir;
   
   public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	public String getInterfacePath() {
			return interfacePath;
	}
	public void setInterfacePath(String interfacePath) {
			this.interfacePath = interfacePath;
	}
	public File getFile() {
			return file;
    }
	public void setFile(File file) {
			this.file = file;
	}
	 public File getDir() {
			return dir;
	}
	public void setDir(File dir) {
			this.dir = dir;
    }
	
	public ModelForUploadInterface(File file,File dir,String fileName, String interfacePath) {
		super();
		this.file=file;
		this.dir=dir;
		this.fileName = fileName;
		this.interfacePath=interfacePath;
	}
	
}

ui\input\model\ModelForUploadInterface.java
package ui.input.model;

import java.io.File;

public class ModelForUploadInterface {
   
   String fileName;
   String interfacePath;
   File file;
   File dir;
   
   public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	public String getInterfacePath() {
			return interfacePath;
	}
	public void setInterfacePath(String interfacePath) {
			this.interfacePath = interfacePath;
	}
	public File getFile() {
			return file;
    }
	public void setFile(File file) {
			this.file = file;
	}
	 public File getDir() {
			return dir;
	}
	public void setDir(File dir) {
			this.dir = dir;
    }
	
	public ModelForUploadInterface(File file,File dir,String fileName, String interfacePath) {
		super();
		this.file=file;
		this.dir=dir;
		this.fileName = fileName;
		this.interfacePath=interfacePath;
	}
	
}

ui\input\view\JPanelForFooter.java
package ui.input.view;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;


public class JPanelForFooter extends JPanel {
	
	public JButton btnNext = new JButton("下一步 >");
    public JButton btnBefore = new JButton("< 上一步");
    public JButton btnRun = new JButton("\u6267\u884C\u7B97\u6CD5");
    
	public JPanelForFooter() {
		
	      setBorder(new LineBorder(new Color(0, 0, 0)));
	      setBackground(Color.WHITE);
	      setBounds(160, 523, 669, 39);
	      setLayout(null);
	      	      
	      btnNext.setBounds(523, 10, 93, 23);
	      add(btnNext);
	      
	      
	      btnBefore.setEnabled(false);
	      
	      btnBefore.setBounds(105, 10, 93, 23);
	      add(btnBefore);
	      
	      
	      btnRun.setBounds(312, 10, 93, 23);
	      add(btnRun);
	}

}

ui\input\view\JPanelForFooter.java
package ui.input.view;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;


public class JPanelForFooter extends JPanel {
	
	public JButton btnNext = new JButton("下一步 >");
    public JButton btnBefore = new JButton("< 上一步");
    public JButton btnRun = new JButton("\u6267\u884C\u7B97\u6CD5");
    
	public JPanelForFooter() {
		
	      setBorder(new LineBorder(new Color(0, 0, 0)));
	      setBackground(Color.WHITE);
	      setBounds(160, 523, 669, 39);
	      setLayout(null);
	      	      
	      btnNext.setBounds(523, 10, 93, 23);
	      add(btnNext);
	      
	      
	      btnBefore.setEnabled(false);
	      
	      btnBefore.setBounds(105, 10, 93, 23);
	      add(btnBefore);
	      
	      
	      btnRun.setBounds(312, 10, 93, 23);
	      add(btnRun);
	}

}

ui\input\view\JPanelForInputFile.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import ui.alg.view.JPanelForStopSetting;
import ui.input.controller.ModelForDownLoadInterface;
import ui.input.controller.UploadInterfaceController;
import ui.input.model.ModelForUploadInterface;
import ui.input.view.JPanelForUploadInterface.OpenHandler;
import javax.swing.JComboBox;
import javax.swing.border.LineBorder;

public class JPanelForInputFile extends JPanel {
	public JTextField txtInputPath = new JTextField();
	public JButton btnInputBrowse = new JButton("\u6D4F\u89C8");
	public JPanelForInputFile() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 631, 532);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(true);
		
		 JLabel lblNewLabel_26 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u6570\u636E\u8F93\u5165\u8DEF\u5F84");
		 lblNewLabel_26.setFont(new Font("宋体", Font.PLAIN, 18));
		 lblNewLabel_26.setBounds(20, 20, 208, 25);
		 add(lblNewLabel_26);
		
		 JLabel lblNewLabel_25 = new JLabel("\u6570\u636E\u8F93\u5165\u8DEF\u5F84");
		 lblNewLabel_25.setBackground(SystemColor.inactiveCaptionBorder);
		 lblNewLabel_25.setFont(new Font("宋体", Font.PLAIN, 17));
		 lblNewLabel_25.setBounds(20, 60, 120, 33);
		 add(lblNewLabel_25);
		    
		   
		 txtInputPath.setBounds(160, 60, 362, 33);
		 add(txtInputPath);
		 txtInputPath.setColumns(10);
		    
		    
		   
		 btnInputBrowse.setBounds(532, 66, 93, 23);
		 btnInputBrowse.addActionListener(new OpenHandler());
		 add(btnInputBrowse);
	}
	 class OpenHandler implements  ActionListener{
         public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForInputFile.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
				File dir=jc.getCurrentDirectory();
				File file=jc.getSelectedFile();
				txtInputPath.setText(file.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 txtInputPath.setText("You pressed cancel");
			
			}
		}
	}
}

ui\input\view\JPanelForInputFile.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import ui.alg.view.JPanelForStopSetting;
import ui.input.controller.ModelForDownLoadInterface;
import ui.input.controller.UploadInterfaceController;
import ui.input.model.ModelForUploadInterface;
import ui.input.view.JPanelForUploadInterface.OpenHandler;
import javax.swing.JComboBox;
import javax.swing.border.LineBorder;

public class JPanelForInputFile extends JPanel {
	public JTextField txtInputPath = new JTextField();
	public JButton btnInputBrowse = new JButton("\u6D4F\u89C8");
	public JPanelForInputFile() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 631, 532);
		setBackground(Color.WHITE);
		setLayout(null);
		setVisible(true);
		
		 JLabel lblNewLabel_26 = new JLabel("\u586B\u5199\u6240\u9700\u7684\u6570\u636E\u8F93\u5165\u8DEF\u5F84");
		 lblNewLabel_26.setFont(new Font("宋体", Font.PLAIN, 18));
		 lblNewLabel_26.setBounds(20, 20, 208, 25);
		 add(lblNewLabel_26);
		
		 JLabel lblNewLabel_25 = new JLabel("\u6570\u636E\u8F93\u5165\u8DEF\u5F84");
		 lblNewLabel_25.setBackground(SystemColor.inactiveCaptionBorder);
		 lblNewLabel_25.setFont(new Font("宋体", Font.PLAIN, 17));
		 lblNewLabel_25.setBounds(20, 60, 120, 33);
		 add(lblNewLabel_25);
		    
		   
		 txtInputPath.setBounds(160, 60, 362, 33);
		 add(txtInputPath);
		 txtInputPath.setColumns(10);
		    
		    
		   
		 btnInputBrowse.setBounds(532, 66, 93, 23);
		 btnInputBrowse.addActionListener(new OpenHandler());
		 add(btnInputBrowse);
	}
	 class OpenHandler implements  ActionListener{
         public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForInputFile.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
				File dir=jc.getCurrentDirectory();
				File file=jc.getSelectedFile();
				txtInputPath.setText(file.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 txtInputPath.setText("You pressed cancel");
			
			}
		}
	}
}

ui\input\view\JPanelForJTree.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

public class JPanelForJTree extends JPanel {
	  
	  DefaultMutableTreeNode root = new DefaultMutableTreeNode("所有系统");
	  DefaultMutableTreeNode root1 = new DefaultMutableTreeNode("算法系统");
	  final DefaultMutableTreeNode node0 = new DefaultMutableTreeNode("算法名称");
	  final DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("算法终止条件");
	  final DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("种群信息");
	  final DefaultMutableTreeNode node3 = new DefaultMutableTreeNode("基因信息");
	  final DefaultMutableTreeNode node4 = new DefaultMutableTreeNode("所需函数和随机数");
	  DefaultMutableTreeNode root2 = new DefaultMutableTreeNode("输入系统");
	  final DefaultMutableTreeNode node5 = new DefaultMutableTreeNode("上传/下载接口");
	  final DefaultMutableTreeNode node6 = new DefaultMutableTreeNode("输入路径");
	  DefaultMutableTreeNode root3 = new DefaultMutableTreeNode("输出系统");
	  final DefaultMutableTreeNode node7 = new DefaultMutableTreeNode("输出结果");
	  
	  
	  final DefaultMutableTreeNode Node[]={node0,node1,node2,node3,node4,node5,node6,node7};
	  DefaultTreeModel treeModel = new DefaultTreeModel(root);
	  final JTree tree_1 ;
	  public JPanelForJTree() {
	 	setBackground(Color.WHITE);
		//树
	 	  treeModel.insertNodeInto(root1, root, root.getChildCount());
		  treeModel.insertNodeInto(root2, root, root.getChildCount());
		  treeModel.insertNodeInto(root3, root, root.getChildCount());
		  
		  treeModel.insertNodeInto(node0, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node1, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node2, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node3, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node4, root1, root1.getChildCount());
		 
		  
		  treeModel.insertNodeInto(node5, root2, root2.getChildCount());
		  treeModel.insertNodeInto(node6, root2, root2.getChildCount());
	      
		  treeModel.insertNodeInto(node7, root3, root3.getChildCount());
		  
		  
		  
		  UIManager.getLookAndFeelDefaults().put("ClassLoader",getClass().getClassLoader());
		  tree_1 = new JTree(treeModel);
		  tree_1.setRowHeight(20);
		  DefaultTreeCellRenderer cellRenderer = (DefaultTreeCellRenderer) tree_1.getCellRenderer();
		  cellRenderer.setLeafIcon(new ImageIcon("//leaf.jpg"));
		  cellRenderer.setOpenIcon(new ImageIcon("//leaf.jpg"));
		  cellRenderer.setClosedIcon(new ImageIcon("//leaf.jpg"));

		  cellRenderer.setFont(new Font("宋体", Font.PLAIN, 15));// 设置字体.
		  cellRenderer.setBackgroundNonSelectionColor(Color.white);
		  cellRenderer.setBorderSelectionColor(Color.red);
		  cellRenderer.setTextNonSelectionColor(Color.black);
		  cellRenderer.setTextSelectionColor(Color.WHITE);
		  cellRenderer.setBorderSelectionColor(Color.blue);
		
		
		/*
		 * 设置选时或不选时，文字的变化颜色
		 */
		  cellRenderer.setTextNonSelectionColor(Color.black);
		  cellRenderer.setTextSelectionColor(Color.WHITE);
		  cellRenderer.setBorderSelectionColor(Color.blue);
		  tree_1.addMouseListener(new MouseAdapter(){});
		  tree_1.setRowHeight(20);
		  JScrollPane scrollPane = new JScrollPane(tree_1);
		  scrollPane.setBounds(0, 0, 155, 455);
		  scrollPane.setVisible(true);
		  setLayout(null);
		  add(scrollPane);
	}

}

ui\input\view\JPanelForJTree.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

public class JPanelForJTree extends JPanel {
	  
	  DefaultMutableTreeNode root = new DefaultMutableTreeNode("所有系统");
	  DefaultMutableTreeNode root1 = new DefaultMutableTreeNode("算法系统");
	  final DefaultMutableTreeNode node0 = new DefaultMutableTreeNode("算法名称");
	  final DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("算法终止条件");
	  final DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("种群信息");
	  final DefaultMutableTreeNode node3 = new DefaultMutableTreeNode("基因信息");
	  final DefaultMutableTreeNode node4 = new DefaultMutableTreeNode("所需函数和随机数");
	  DefaultMutableTreeNode root2 = new DefaultMutableTreeNode("输入系统");
	  final DefaultMutableTreeNode node5 = new DefaultMutableTreeNode("上传/下载接口");
	  final DefaultMutableTreeNode node6 = new DefaultMutableTreeNode("输入路径");
	  DefaultMutableTreeNode root3 = new DefaultMutableTreeNode("输出系统");
	  final DefaultMutableTreeNode node7 = new DefaultMutableTreeNode("输出结果");
	  
	  
	  final DefaultMutableTreeNode Node[]={node0,node1,node2,node3,node4,node5,node6,node7};
	  DefaultTreeModel treeModel = new DefaultTreeModel(root);
	  final JTree tree_1 ;
	  public JPanelForJTree() {
	 	setBackground(Color.WHITE);
		//树
	 	  treeModel.insertNodeInto(root1, root, root.getChildCount());
		  treeModel.insertNodeInto(root2, root, root.getChildCount());
		  treeModel.insertNodeInto(root3, root, root.getChildCount());
		  
		  treeModel.insertNodeInto(node0, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node1, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node2, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node3, root1, root1.getChildCount());
		  treeModel.insertNodeInto(node4, root1, root1.getChildCount());
		 
		  
		  treeModel.insertNodeInto(node5, root2, root2.getChildCount());
		  treeModel.insertNodeInto(node6, root2, root2.getChildCount());
	      
		  treeModel.insertNodeInto(node7, root3, root3.getChildCount());
		  
		  
		  
		  UIManager.getLookAndFeelDefaults().put("ClassLoader",getClass().getClassLoader());
		  tree_1 = new JTree(treeModel);
		  tree_1.setRowHeight(20);
		  DefaultTreeCellRenderer cellRenderer = (DefaultTreeCellRenderer) tree_1.getCellRenderer();
		  cellRenderer.setLeafIcon(new ImageIcon("//leaf.jpg"));
		  cellRenderer.setOpenIcon(new ImageIcon("//leaf.jpg"));
		  cellRenderer.setClosedIcon(new ImageIcon("//leaf.jpg"));

		  cellRenderer.setFont(new Font("宋体", Font.PLAIN, 15));// 设置字体.
		  cellRenderer.setBackgroundNonSelectionColor(Color.white);
		  cellRenderer.setBorderSelectionColor(Color.red);
		  cellRenderer.setTextNonSelectionColor(Color.black);
		  cellRenderer.setTextSelectionColor(Color.WHITE);
		  cellRenderer.setBorderSelectionColor(Color.blue);
		
		
		/*
		 * 设置选时或不选时，文字的变化颜色
		 */
		  cellRenderer.setTextNonSelectionColor(Color.black);
		  cellRenderer.setTextSelectionColor(Color.WHITE);
		  cellRenderer.setBorderSelectionColor(Color.blue);
		  tree_1.addMouseListener(new MouseAdapter(){});
		  tree_1.setRowHeight(20);
		  JScrollPane scrollPane = new JScrollPane(tree_1);
		  scrollPane.setBounds(0, 0, 155, 455);
		  scrollPane.setVisible(true);
		  setLayout(null);
		  add(scrollPane);
	}

}

ui\input\view\JPanelForSaveConfig.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;


import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForSaveConfig extends JPanel {

	JButton btnSave = new JButton("\u4FDD\u5B58");
	JTextField txtConfigurationName = new JTextField();
	public JPanelForSaveConfig() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		
		setBounds(155, 115, 673, 479);
		setBackground(Color.WHITE);
		setLayout(null);
		
		JLabel lblNewLabel_33 = new JLabel("\u8BF7\u4E3A\u66F4\u6539\u7684\u914D\u7F6E\u6587\u4EF6\u91CD\u547D\u540D");
		lblNewLabel_33.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_33.setBounds(20, 20, 216, 25);
		add(lblNewLabel_33);
		
		JLabel lblNewLabel_34 = new JLabel("\u914D\u7F6E\u6587\u4EF6\u540D");
		lblNewLabel_34.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_34.setBounds(20, 60, 106, 25);
		add(lblNewLabel_34);
		
		
		txtConfigurationName.setBounds(132, 62, 271, 25);
		add(txtConfigurationName);
		txtConfigurationName.setColumns(10);
		
		
		
		btnSave.setBounds(423, 62, 78, 23);
		add(btnSave);
	}

}

ui\input\view\JPanelForSaveConfig.java
package ui.input.view;

import java.awt.Color;
import java.awt.Font;


import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;


public class JPanelForSaveConfig extends JPanel {

	JButton btnSave = new JButton("\u4FDD\u5B58");
	JTextField txtConfigurationName = new JTextField();
	public JPanelForSaveConfig() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		
		setBounds(155, 115, 673, 479);
		setBackground(Color.WHITE);
		setLayout(null);
		
		JLabel lblNewLabel_33 = new JLabel("\u8BF7\u4E3A\u66F4\u6539\u7684\u914D\u7F6E\u6587\u4EF6\u91CD\u547D\u540D");
		lblNewLabel_33.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_33.setBounds(20, 20, 216, 25);
		add(lblNewLabel_33);
		
		JLabel lblNewLabel_34 = new JLabel("\u914D\u7F6E\u6587\u4EF6\u540D");
		lblNewLabel_34.setFont(new Font("宋体", Font.PLAIN, 15));
		lblNewLabel_34.setBounds(20, 60, 106, 25);
		add(lblNewLabel_34);
		
		
		txtConfigurationName.setBounds(132, 62, 271, 25);
		add(txtConfigurationName);
		txtConfigurationName.setColumns(10);
		
		
		
		btnSave.setBounds(423, 62, 78, 23);
		add(btnSave);
	}

}

ui\input\view\JPanelForUploadInterface.java
package ui.input.view;

import java.awt.Color;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;


import ui.input.controller.DownLoadInterfaceController;
import ui.input.controller.ModelForDownLoadInterface;
import ui.input.controller.UploadInterfaceController;
import ui.input.model.ModelForUploadInterface;
import ui.input.view.JPanelForInputFile.OpenHandler;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.border.LineBorder;

public class JPanelForUploadInterface extends JPanel {
    public JTextField textInterfaceName = new JTextField();
	public JLabel lblNewLabel = new JLabel("\u63A5\u53E3\u540D");
	public JButton button = new JButton("\u6D4F\u89C8");
	public JButton btnUpload = new JButton("\u4E0A\u4F20");
	public JTextField textInterfacePath = new JTextField();
	public JLabel lblNewLabel_2 = new JLabel("\u63A5\u53E3\u8DEF\u5F84");
	public File dir,file;
	//
	public JLabel lblNewLabel2 = new JLabel("\u53EF\u4F9B\u4E0B\u8F7D\u7684\u63A5\u53E3");
	public JButton buttonSaveDirBrowse = new JButton("\u6D4F\u89C8");
	public JButton btnDownLoad = new JButton("\u4E0B\u8F7D");
	public JTextField textInterfaceSavePath = new JTextField();
	public JLabel lblNewLabel3 = new JLabel("\u4FDD\u5B58\u8DEF\u5F84");
	public File dirForSavePath,fileForSeleInterface;
	String[] interfaceArr=new String[]{"Function","Calculator","Creator","Modifying","Selector"};
	JComboBox interfaceComboBox = new JComboBox(interfaceArr);
	/**
	 * Create the panel.
	 */
	public JPanelForUploadInterface() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 673, 479);
		setBackground(Color.WHITE);
		setLayout(null);
		
		
		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel.setBounds(30, 80, 76, 23);
		add(lblNewLabel);
		
		
		textInterfaceName.setBounds(192, 80, 262, 25);
		add(textInterfaceName);
		textInterfaceName.setColumns(10);
		
		
		button.addActionListener(
				new OpenHandler()
		);
		button.setBounds(505, 80, 93, 23);
		add(button);
		btnUpload.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ModelForUploadInterface uploadInterface=new ModelForUploadInterface(file,dir,textInterfaceName.getText(),textInterfacePath.getText());
				try {
					int result=UploadInterfaceController.btnUploadController(uploadInterface);
					if(result==-1){
						JOptionPane.showMessageDialog(null, "该文件已存在，请重新选择上传文件");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					else if(result==0){
						JOptionPane.showMessageDialog(null, "上传成功");
					}
					else if(result==-2){
						JOptionPane.showMessageDialog(null, "该文件没有实现指定接口，上传失败");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					else{
						JOptionPane.showMessageDialog(null, "该文件没有缺省的构造函数，上传失败");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		
		
		btnUpload.setBounds(505, 140, 93, 23);
		add(btnUpload);
		
		
		lblNewLabel_2.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_2.setBounds(30, 140, 76, 25);
		add(lblNewLabel_2);
		
		
		textInterfacePath.setBounds(192, 140, 262, 25);
		add(textInterfacePath);
		textInterfacePath.setColumns(10);
		setVisible(true);
		
		
		
		
		
		
		
		
		//------------------------------------------------------
		lblNewLabel2.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel2.setBounds(30, 260, 141, 23);
		add(lblNewLabel2);
		
		
		buttonSaveDirBrowse.addActionListener(
				new SaveHandler()
		);
		buttonSaveDirBrowse.setBounds(505, 320, 93, 23);
		add(buttonSaveDirBrowse);
		btnDownLoad.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				interfaceComboBox.setSelectedItem(interfaceComboBox.getSelectedItem());
				System.out.println(interfaceComboBox.getSelectedItem().toString());
				ModelForDownLoadInterface downLoadInterface=new ModelForDownLoadInterface(dirForSavePath,interfaceComboBox.getSelectedItem().toString(),textInterfaceSavePath.getText());
				try {
					DownLoadInterfaceController.btnDownLoadController(downLoadInterface);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		
		
		btnDownLoad.setBounds(505, 390, 93, 23);
		add(btnDownLoad);
		
		
		lblNewLabel3.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel3.setBounds(30, 320, 76, 25);
		add(lblNewLabel3);
		
		
		textInterfaceSavePath.setBounds(192, 320, 262, 25);
		add(textInterfaceSavePath);
		textInterfaceSavePath.setColumns(10);
		
		
		interfaceComboBox.setBounds(192, 260, 262, 25);
		add(interfaceComboBox);
		
		JLabel label = new JLabel("\u4E0A\u4F20\u63A5\u53E3");
		label.setForeground(new Color(0, 0, 0));
		label.setFont(new Font("宋体", Font.PLAIN, 18));
		label.setBounds(30, 25, 84, 23);
		add(label);
		
		JLabel lblNewLabel_1 = new JLabel("\u4E0B\u8F7D\u63A5\u53E3");
		lblNewLabel_1.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_1.setBounds(30, 203, 72, 30);
		add(lblNewLabel_1);
		setVisible(true);
	}
	class OpenHandler implements  ActionListener{
        public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForUploadInterface.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
			    dir=jc.getCurrentDirectory();
				file=jc.getSelectedFile();
				textInterfaceName.setText(file.getName());
				textInterfacePath.setText(dir.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 textInterfaceName.setText("You pressed cancel");
			
			}
		}
	}
	class SaveHandler implements  ActionListener{
        public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForUploadInterface.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
			    dirForSavePath=jc.getCurrentDirectory();
				fileForSeleInterface=jc.getSelectedFile();
				textInterfaceSavePath.setText(dirForSavePath.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 textInterfaceSavePath.setText("You pressed cancel");
			
			}
		}
	}
}

ui\input\view\JPanelForUploadInterface.java
package ui.input.view;

import java.awt.Color;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;


import ui.input.controller.DownLoadInterfaceController;
import ui.input.controller.ModelForDownLoadInterface;
import ui.input.controller.UploadInterfaceController;
import ui.input.model.ModelForUploadInterface;
import ui.input.view.JPanelForInputFile.OpenHandler;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.border.LineBorder;

public class JPanelForUploadInterface extends JPanel {
    public JTextField textInterfaceName = new JTextField();
	public JLabel lblNewLabel = new JLabel("\u63A5\u53E3\u540D");
	public JButton button = new JButton("\u6D4F\u89C8");
	public JButton btnUpload = new JButton("\u4E0A\u4F20");
	public JTextField textInterfacePath = new JTextField();
	public JLabel lblNewLabel_2 = new JLabel("\u63A5\u53E3\u8DEF\u5F84");
	public File dir,file;
	//
	public JLabel lblNewLabel2 = new JLabel("\u53EF\u4F9B\u4E0B\u8F7D\u7684\u63A5\u53E3");
	public JButton buttonSaveDirBrowse = new JButton("\u6D4F\u89C8");
	public JButton btnDownLoad = new JButton("\u4E0B\u8F7D");
	public JTextField textInterfaceSavePath = new JTextField();
	public JLabel lblNewLabel3 = new JLabel("\u4FDD\u5B58\u8DEF\u5F84");
	public File dirForSavePath,fileForSeleInterface;
	String[] interfaceArr=new String[]{"Function","Calculator","Creator","Modifying","Selector"};
	JComboBox interfaceComboBox = new JComboBox(interfaceArr);
	/**
	 * Create the panel.
	 */
	public JPanelForUploadInterface() {
		setBorder(new LineBorder(new Color(0, 0, 0)));
		setBounds(155, 115, 673, 479);
		setBackground(Color.WHITE);
		setLayout(null);
		
		
		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel.setBounds(30, 80, 76, 23);
		add(lblNewLabel);
		
		
		textInterfaceName.setBounds(192, 80, 262, 25);
		add(textInterfaceName);
		textInterfaceName.setColumns(10);
		
		
		button.addActionListener(
				new OpenHandler()
		);
		button.setBounds(505, 80, 93, 23);
		add(button);
		btnUpload.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ModelForUploadInterface uploadInterface=new ModelForUploadInterface(file,dir,textInterfaceName.getText(),textInterfacePath.getText());
				try {
					int result=UploadInterfaceController.btnUploadController(uploadInterface);
					if(result==-1){
						JOptionPane.showMessageDialog(null, "该文件已存在，请重新选择上传文件");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					else if(result==0){
						JOptionPane.showMessageDialog(null, "上传成功");
					}
					else if(result==-2){
						JOptionPane.showMessageDialog(null, "该文件没有实现指定接口，上传失败");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					else{
						JOptionPane.showMessageDialog(null, "该文件没有缺省的构造函数，上传失败");
						textInterfaceName.setText("");
						textInterfacePath.setText("");
					}
					
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		
		
		btnUpload.setBounds(505, 140, 93, 23);
		add(btnUpload);
		
		
		lblNewLabel_2.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_2.setBounds(30, 140, 76, 25);
		add(lblNewLabel_2);
		
		
		textInterfacePath.setBounds(192, 140, 262, 25);
		add(textInterfacePath);
		textInterfacePath.setColumns(10);
		setVisible(true);
		
		
		
		
		
		
		
		
		//------------------------------------------------------
		lblNewLabel2.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel2.setBounds(30, 260, 141, 23);
		add(lblNewLabel2);
		
		
		buttonSaveDirBrowse.addActionListener(
				new SaveHandler()
		);
		buttonSaveDirBrowse.setBounds(505, 320, 93, 23);
		add(buttonSaveDirBrowse);
		btnDownLoad.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				interfaceComboBox.setSelectedItem(interfaceComboBox.getSelectedItem());
				System.out.println(interfaceComboBox.getSelectedItem().toString());
				ModelForDownLoadInterface downLoadInterface=new ModelForDownLoadInterface(dirForSavePath,interfaceComboBox.getSelectedItem().toString(),textInterfaceSavePath.getText());
				try {
					DownLoadInterfaceController.btnDownLoadController(downLoadInterface);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		
		
		btnDownLoad.setBounds(505, 390, 93, 23);
		add(btnDownLoad);
		
		
		lblNewLabel3.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel3.setBounds(30, 320, 76, 25);
		add(lblNewLabel3);
		
		
		textInterfaceSavePath.setBounds(192, 320, 262, 25);
		add(textInterfaceSavePath);
		textInterfaceSavePath.setColumns(10);
		
		
		interfaceComboBox.setBounds(192, 260, 262, 25);
		add(interfaceComboBox);
		
		JLabel label = new JLabel("\u4E0A\u4F20\u63A5\u53E3");
		label.setForeground(new Color(0, 0, 0));
		label.setFont(new Font("宋体", Font.PLAIN, 18));
		label.setBounds(30, 25, 84, 23);
		add(label);
		
		JLabel lblNewLabel_1 = new JLabel("\u4E0B\u8F7D\u63A5\u53E3");
		lblNewLabel_1.setFont(new Font("宋体", Font.PLAIN, 18));
		lblNewLabel_1.setBounds(30, 203, 72, 30);
		add(lblNewLabel_1);
		setVisible(true);
	}
	class OpenHandler implements  ActionListener{
        public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForUploadInterface.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
			    dir=jc.getCurrentDirectory();
				file=jc.getSelectedFile();
				textInterfaceName.setText(file.getName());
				textInterfacePath.setText(dir.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 textInterfaceName.setText("You pressed cancel");
			
			}
		}
	}
	class SaveHandler implements  ActionListener{
        public void actionPerformed(ActionEvent e) {
			JFileChooser jc=new JFileChooser();
			int rVal=jc.showOpenDialog(JPanelForUploadInterface.this);
			if(rVal==JFileChooser.APPROVE_OPTION){
			    dirForSavePath=jc.getCurrentDirectory();
				fileForSeleInterface=jc.getSelectedFile();
				textInterfaceSavePath.setText(dirForSavePath.toString());
			}
			if(rVal==JFileChooser.CANCEL_OPTION){
				 textInterfaceSavePath.setText("You pressed cancel");
			
			}
		}
	}
}

ui\input\view\New2.java
package ui.input.view;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.jvnet.substance.SubstanceLookAndFeel;

import ui.alg.Model.ModelForJPanelConfig;
import ui.alg.Model.ModelForJPanelFunction;
import ui.alg.Model.ModelForJPanelGEne;
import ui.alg.Model.ModelForJPanelPopulation;
import ui.alg.controller.FunctionPanelController;
import ui.alg.controller.HostPanelController;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.controller.*;
import ui.input.model.ModelForJPanelInputPath;
import ui.input.model.ModelForUploadInterface;
import ui.output.controller.OutputPanelController;
import ui.output.view.JPanelForOutput;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import domain.iservice.IgepInputService;
import domain.service.alg.baseclass.GepAlgService;
import domain.service.algInputDataProcess.GepInputService;
import exception.Duplicated;

public class New2 extends JFrame {
    JPanel contentPane;
    HostPanel configurationPanel;
	JPanelForStopSetting stopSettingPanel=new JPanelForStopSetting();
	JPanelForPopulation populationPanel=new JPanelForPopulation();
	JPanelForGene genePanel=new JPanelForGene();
	JPanelForFunction functionPanel=new JPanelForFunction();
	JPanelForFooter footPanel=new JPanelForFooter();
	JPanelForUploadInterface uploadInterfacePanel=new JPanelForUploadInterface();
	JPanelForInputFile inputFilePanel=new JPanelForInputFile();
	JPanelForJTree  treePanel;
	JPanelForSaveConfig scfigNamePanel=new JPanelForSaveConfig();
	JPanelForOutput outputPanel=new JPanelForOutput();
    JPanel panel_0 = new JPanel();

    CardLayout card;
   
	GepConfiguration myParameter=new GepConfiguration();
	IgepAlgService myGepService=new GepAlgService();	
	GepConfiguration myConfigurationFromDB;
	List<GepConfiguration> configurationsOfHistory=myGepService.readArgumentsFromDb();
	IgepInputService input =new GepInputService();
	int flag=0;//是否读取配置文件
	int count=0;
	int jcount=1;//标记jcomboBoxConfiguration的editor事件还是ItemSelectedchange事件
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					New2 frame = new New2();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	
	public New2() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.luna.LunaLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.bernstein.BernsteinLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
		javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.mint.MintLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.aero.AeroLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.fast.FastLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.noire.NoireLookAndFeel"); 
		

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 850, 686);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		
		
		panel_0.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_0.setBackground(Color.WHITE);
		panel_0.setBounds(165, 115, 659, 399);
	    card = new CardLayout(5, 5);
		panel_0.setLayout(card);
		contentPane.add(panel_0);
		
		
		
		
		   
		
	
		  
		  //算法名称面板-------------------------------------------------
		  
		 
		   String configurations[] = new String[configurationsOfHistory.size()];
		   for (int i = 0; i < configurationsOfHistory.size(); i++) {
				String configName = configurationsOfHistory.get(i).getName();
				configurations[i] = configName;
			}
			final JComboBox jcomboBoxConfiguration = new JComboBox(configurations);
			
			Component scrollBtn=jcomboBoxConfiguration.getComponent(0);
			configurationPanel=new HostPanel(jcomboBoxConfiguration);
			configurationPanel.setBorder(null);
			configurationPanel.setBounds(155, 115, 631, 447);
			configurationPanel.setVisible(true);
		    scrollBtn.addMouseListener(new MouseAdapter() {
		       public void mouseClicked(MouseEvent arg0) {
		    	   jcount=1;
		       }
           });
		  configurationPanel.btnSetConfig.addActionListener(new ActionListener(){
				public void actionPerformed(ActionEvent e) {
					HostPanelController.btnSetConfigController(stopSettingPanel, populationPanel, genePanel, functionPanel, inputFilePanel);
					card.next(panel_0);
					TreePath visiblePath=new TreePath(((DefaultTreeModel)treePanel.tree_1.getModel()).getPathToRoot(treePanel.node1));
		    		treePanel.tree_1.setSelectionPath(visiblePath);
					jcount=2;
					footPanel.btnRun.setEnabled(false);
					count=1;
					flag=0;
				}
				
			});
		  jcomboBoxConfiguration.getEditor().getEditorComponent().addKeyListener(new KeyAdapter(){    
			    public void keyPressed(KeyEvent e) {
			    	HostPanelController.jcomboBoxEditorController(e,configurationPanel.btnSetConfig);
			        footPanel.btnRun.setEnabled(false);
			        HostPanelController.btnSetConfigController(stopSettingPanel, populationPanel, genePanel, functionPanel, inputFilePanel);
			        jcount=2;
			        flag=0;
			    }  
			    
			});
		  
		  jcomboBoxConfiguration.addItemListener(new  ItemListener(){ 
              public void  itemStateChanged(ItemEvent   ie){ 
            	if(jcount!=2){
            	 myConfigurationFromDB = configurationsOfHistory.get(jcomboBoxConfiguration.getSelectedIndex());
            	 System.out.println(myConfigurationFromDB.toString());
            	 flag=-1;
            	 setTitle(myConfigurationFromDB.toString());
                 footPanel.btnRun.setEnabled(true);
            	 HostPanelController.jcomboBoxItemController(ie,configurationPanel, stopSettingPanel, populationPanel, genePanel, functionPanel, footPanel,inputFilePanel ,myConfigurationFromDB, configurationsOfHistory, myGepService);
            	 jcount=1;
            	}
               }
             }
		  );
		
		  panel_0.add(configurationPanel,"p1");
		  
		  //选择输入路径面板-------------------------------------------------
		  stopSettingPanel.setBorder(null);
		  stopSettingPanel.setVisible(false);
		  panel_0.add(stopSettingPanel,"p2");
		  
		  //种群面板------------------------------------------------
		  
		  populationPanel.setBorder(null);
		  populationPanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableSelector().size(); i++) {
					populationPanel.JComboBoxofSelectionStrategy.addItem(myGepService.getAvailableSelector().get(i).toString());
				}
				for (int i = 0; i < myGepService.getAvailableCalculator().size(); i++) {
	                 populationPanel.JComboBoxAvailableCalculator.addItem(myGepService.getAvailableCalculator().get(i).toString());
				}
				for (int i = 0; i < myGepService.getAvailableCreator().size(); i++) {
					populationPanel.JcomboBoxOfPopulationCreator.addItem(myGepService.getAvailableCreator().get(i).toString());
				}
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (InstantiationException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			
		  panel_0.add(populationPanel,"p3");
		  //基因面板---------------------------------------------
		  genePanel.setBorder(null);
		  genePanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableModifyings().size(); i++) {
					genePanel.JComboBoxOfAvailableModifyings.addItem(myGepService.getAvailableModifyings().get(i).toString());
				}
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			} catch (InstantiationException e1) {
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			}
		  panel_0.add(genePanel,"p4");
		  //函数面板----------------------------------
		 
		  functionPanel.setBorder(null);
		  functionPanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableFunctions().size(); i++) {
					functionPanel.comboBox.addItem(myGepService.getAvailableFunctions().get(i).toString());
					
				}
			} catch (ClassNotFoundException e1) {
				
				e1.printStackTrace();
			} catch (InstantiationException e1) {
			   
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			}
		  functionPanel.comboBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					FunctionPanelController.functionComboBoxController(functionPanel.comboBox, functionPanel.JComboBoxOfSelectdFunctions);
				}	
			});
			
	      panel_0.add(functionPanel,"p5");
	      
	      //保存配置面板-------------------------------
	      
	      scfigNamePanel.setSize(659, 399);
	      scfigNamePanel.setVisible(false);
	      scfigNamePanel.btnSave.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					SaveConfigPanelController.btnSaveController(myGepService, myParameter, outputPanel, scfigNamePanel, treePanel,panel_0);
				}
			});
	      contentPane.add(scfigNamePanel);
	      //----------------------------------------
	      uploadInterfacePanel.setBounds(165, 115, 659, 450);
	      uploadInterfacePanel.setVisible(false);
	      contentPane.add(uploadInterfacePanel);
	      inputFilePanel.setBounds(165, 115, 659, 455);
	      inputFilePanel.setVisible(false);
	      contentPane.add(inputFilePanel);
	      //底部按钮面板-----------------------------------
	      
	      footPanel.setBounds(165, 520, 659, 50);
	      footPanel.btnBefore.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		count=FooterPanelController.btnBeforeController(treePanel.Node,treePanel.tree_1,footPanel.btnNext,footPanel.btnBefore,panel_0,card,count);
		    	}
		      });
	      footPanel.btnRun.setEnabled(false);
	      
	      footPanel.btnRun.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		   
		    		    ModelForJPanelConfig config=new ModelForJPanelConfig(jcomboBoxConfiguration.getSelectedItem().toString());
		    		    ModelForJPanelInputPath inputPath=new ModelForJPanelInputPath(inputFilePanel.txtInputPath.getText(),stopSettingPanel.txtMaxGeneration.getText(),stopSettingPanel.txtAccuracy.getText());
		    		    int creatorSelectedIndex = populationPanel.JcomboBoxOfPopulationCreator.getSelectedIndex();
		    		    System.out.print("ww"+creatorSelectedIndex);
						int calculatorSelectedIndex = populationPanel.JComboBoxAvailableCalculator.getSelectedIndex();
						int strategySelectedIndex =populationPanel.JComboBoxofSelectionStrategy.getSelectedIndex();;
					    ModelForJPanelPopulation population=new ModelForJPanelPopulation(populationPanel.txtPopulationSize.getText(), populationPanel.txtSelectionRange.getText(), creatorSelectedIndex, strategySelectedIndex,calculatorSelectedIndex);
					   //--------
					    int modifyingSelectedIndex = genePanel.JComboBoxOfAvailableModifyings.getSelectedIndex();
					    ModelForJPanelGEne gene=new ModelForJPanelGEne(genePanel.txtNormalGeneNumber.getText(), genePanel.txtNormalHeaderLength.getText(), genePanel.txtHomeoticGeneNums.getText(),genePanel.txtHomeoticHeaderLength.getText(), genePanel.txtGeneRecombineRate.getText(), genePanel.txtRisTransportRate.getText(), genePanel.txtofRisElement.getText().trim(),genePanel.txtIsTransportRate.getText() ,genePanel.txtofRisElement.getText().trim(),genePanel.txtGeneTransportRate.getText() ,genePanel.txtMutateRate.getText(),genePanel.txtTwoPointRecombineRate.getText(),genePanel.txtGeneOnePointRecombineRate.getText(),modifyingSelectedIndex);
		    		    //----
					    StringBuffer result = new StringBuffer();
						String str = new String();
						
						for (int i = 0; i < functionPanel.JComboBoxOfSelectdFunctions.getItemCount(); i++) {
							if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i).toString()
									.equals("+")) {
								str = "domain.service.alg.userdefined.Additioin";

							} else if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i)
									.toString().equals("-")) {
								str = "domain.service.alg.userdefined.Minus";

							} else if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i)
									.toString().equals("*")) {
								str = "domain.service.alg.userdefined.Multiply";

							} else {
								str = "domain.service.alg.userdefined.Divide";

							}

							result.append(str + ",");
						}
						System.out.println("函数"+result.toString());
					    ModelForJPanelFunction function=new ModelForJPanelFunction(result);
					    
					    /**
					     * 点击执行计算按钮触发
					     */
					    if(FooterPanelController.btnRunController(config, inputPath, population, gene, function, myParameter, myGepService, myConfigurationFromDB, flag)==true){
					    	outputPanel.setVisible(true);//显示输出面板
					    	panel_0.setVisible(false);
		    				treePanel.setVisible(false);
		    				footPanel.setVisible(false);
		    				jcomboBoxConfiguration.setVisible(false);
		    		    }
		    		    else{
		    		    	
		    		    	JOptionPane.showMessageDialog(null, "配置文件已更改请重新保存");
     	    		    	panel_0.setVisible(false);
							jcomboBoxConfiguration.setVisible(false);
							footPanel.setVisible(false);
							scfigNamePanel.setVisible(true);
		    		    }
					    
					    OutputPanelController.drawPicture(myGepService, outputPanel);
					    
					    jcomboBoxConfiguration.setVisible(true);
					    
					    
					    
		    	}
		      });
	      
	      
	      footPanel.btnNext.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		count=FooterPanelController.btnNextController(treePanel.Node,treePanel.tree_1,footPanel,panel_0,card,count);
		    	}
		      });
	      contentPane.add(footPanel);
	      //------------------------------------------------
	      
	      
	      OutputPanelController.init(outputPanel);
	      outputPanel.setBounds(5,115,822,530);
	      outputPanel.setVisible(false);
	      outputPanel.btnNewButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					outputPanel.setVisible(false);
					panel_0.setVisible(true);
					footPanel.setVisible(true);
					treePanel.setVisible(true);
				}
			});
	      contentPane.add(outputPanel);
	      //菜单面板---------------------------------------
	     
	      
	        treePanel=new JPanelForJTree();
			treePanel.setBounds(5, 115, 155, 455);
			final JPanel[] panels={configurationPanel,stopSettingPanel,populationPanel,genePanel,functionPanel,uploadInterfacePanel,inputFilePanel,outputPanel,panel_0,footPanel,treePanel};
			treePanel.tree_1.addMouseListener(new MouseAdapter(){
				public void mousePressed(MouseEvent e) {
					count=TreePanelController.treeMouseListener(e, panels,footPanel.btnBefore,footPanel.btnNext,count);
				}
			});
		    contentPane.add(treePanel);
	      
	}
}

ui\input\view\New2.java
package ui.input.view;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.jvnet.substance.SubstanceLookAndFeel;

import ui.alg.Model.ModelForJPanelConfig;
import ui.alg.Model.ModelForJPanelFunction;
import ui.alg.Model.ModelForJPanelGEne;
import ui.alg.Model.ModelForJPanelPopulation;
import ui.alg.controller.FunctionPanelController;
import ui.alg.controller.HostPanelController;
import ui.alg.view.HostPanel;
import ui.alg.view.JPanelForFunction;
import ui.alg.view.JPanelForGene;
import ui.alg.view.JPanelForStopSetting;
import ui.alg.view.JPanelForPopulation;
import ui.input.controller.*;
import ui.input.model.ModelForJPanelInputPath;
import ui.input.model.ModelForUploadInterface;
import ui.output.controller.OutputPanelController;
import ui.output.view.JPanelForOutput;
import domain.core.outputmodel.GepConfiguration;
import domain.iservice.IgepAlgService;
import domain.iservice.IgepInputService;
import domain.service.alg.baseclass.GepAlgService;
import domain.service.algInputDataProcess.GepInputService;
import exception.Duplicated;

public class New2 extends JFrame {
    JPanel contentPane;
    HostPanel configurationPanel;
	JPanelForStopSetting stopSettingPanel=new JPanelForStopSetting();
	JPanelForPopulation populationPanel=new JPanelForPopulation();
	JPanelForGene genePanel=new JPanelForGene();
	JPanelForFunction functionPanel=new JPanelForFunction();
	JPanelForFooter footPanel=new JPanelForFooter();
	JPanelForUploadInterface uploadInterfacePanel=new JPanelForUploadInterface();
	JPanelForInputFile inputFilePanel=new JPanelForInputFile();
	JPanelForJTree  treePanel;
	JPanelForSaveConfig scfigNamePanel=new JPanelForSaveConfig();
	JPanelForOutput outputPanel=new JPanelForOutput();
    JPanel panel_0 = new JPanel();

    CardLayout card;
   
	GepConfiguration myParameter=new GepConfiguration();
	IgepAlgService myGepService=new GepAlgService();	
	GepConfiguration myConfigurationFromDB;
	List<GepConfiguration> configurationsOfHistory=myGepService.readArgumentsFromDb();
	IgepInputService input =new GepInputService();
	int flag=0;//是否读取配置文件
	int count=0;
	int jcount=1;//标记jcomboBoxConfiguration的editor事件还是ItemSelectedchange事件
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					New2 frame = new New2();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	
	public New2() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.luna.LunaLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.bernstein.BernsteinLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
		javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.mint.MintLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.aero.AeroLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.fast.FastLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
		//javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.noire.NoireLookAndFeel"); 
		

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 850, 686);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		
		
		panel_0.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_0.setBackground(Color.WHITE);
		panel_0.setBounds(165, 115, 659, 399);
	    card = new CardLayout(5, 5);
		panel_0.setLayout(card);
		contentPane.add(panel_0);
		
		
		
		
		   
		
	
		  
		  //算法名称面板-------------------------------------------------
		  
		 
		   String configurations[] = new String[configurationsOfHistory.size()];
		   for (int i = 0; i < configurationsOfHistory.size(); i++) {
				String configName = configurationsOfHistory.get(i).getName();
				configurations[i] = configName;
			}
			final JComboBox jcomboBoxConfiguration = new JComboBox(configurations);
			
			Component scrollBtn=jcomboBoxConfiguration.getComponent(0);
			configurationPanel=new HostPanel(jcomboBoxConfiguration);
			configurationPanel.setBorder(null);
			configurationPanel.setBounds(155, 115, 631, 447);
			configurationPanel.setVisible(true);
		    scrollBtn.addMouseListener(new MouseAdapter() {
		       public void mouseClicked(MouseEvent arg0) {
		    	   jcount=1;
		       }
           });
		  configurationPanel.btnSetConfig.addActionListener(new ActionListener(){
				public void actionPerformed(ActionEvent e) {
					HostPanelController.btnSetConfigController(stopSettingPanel, populationPanel, genePanel, functionPanel, inputFilePanel);
					card.next(panel_0);
					TreePath visiblePath=new TreePath(((DefaultTreeModel)treePanel.tree_1.getModel()).getPathToRoot(treePanel.node1));
		    		treePanel.tree_1.setSelectionPath(visiblePath);
					jcount=2;
					footPanel.btnRun.setEnabled(false);
					count=1;
					flag=0;
				}
				
			});
		  jcomboBoxConfiguration.getEditor().getEditorComponent().addKeyListener(new KeyAdapter(){    
			    public void keyPressed(KeyEvent e) {
			    	HostPanelController.jcomboBoxEditorController(e,configurationPanel.btnSetConfig);
			        footPanel.btnRun.setEnabled(false);
			        HostPanelController.btnSetConfigController(stopSettingPanel, populationPanel, genePanel, functionPanel, inputFilePanel);
			        jcount=2;
			        flag=0;
			    }  
			    
			});
		  
		  jcomboBoxConfiguration.addItemListener(new  ItemListener(){ 
              public void  itemStateChanged(ItemEvent   ie){ 
            	if(jcount!=2){
            	 myConfigurationFromDB = configurationsOfHistory.get(jcomboBoxConfiguration.getSelectedIndex());
            	 System.out.println(myConfigurationFromDB.toString());
            	 flag=-1;
            	 setTitle(myConfigurationFromDB.toString());
                 footPanel.btnRun.setEnabled(true);
            	 HostPanelController.jcomboBoxItemController(ie,configurationPanel, stopSettingPanel, populationPanel, genePanel, functionPanel, footPanel,inputFilePanel ,myConfigurationFromDB, configurationsOfHistory, myGepService);
            	 jcount=1;
            	}
               }
             }
		  );
		
		  panel_0.add(configurationPanel,"p1");
		  
		  //选择输入路径面板-------------------------------------------------
		  stopSettingPanel.setBorder(null);
		  stopSettingPanel.setVisible(false);
		  panel_0.add(stopSettingPanel,"p2");
		  
		  //种群面板------------------------------------------------
		  
		  populationPanel.setBorder(null);
		  populationPanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableSelector().size(); i++) {
					populationPanel.JComboBoxofSelectionStrategy.addItem(myGepService.getAvailableSelector().get(i).toString());
				}
				for (int i = 0; i < myGepService.getAvailableCalculator().size(); i++) {
	                 populationPanel.JComboBoxAvailableCalculator.addItem(myGepService.getAvailableCalculator().get(i).toString());
				}
				for (int i = 0; i < myGepService.getAvailableCreator().size(); i++) {
					populationPanel.JcomboBoxOfPopulationCreator.addItem(myGepService.getAvailableCreator().get(i).toString());
				}
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (InstantiationException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			
		  panel_0.add(populationPanel,"p3");
		  //基因面板---------------------------------------------
		  genePanel.setBorder(null);
		  genePanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableModifyings().size(); i++) {
					genePanel.JComboBoxOfAvailableModifyings.addItem(myGepService.getAvailableModifyings().get(i).toString());
				}
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			} catch (InstantiationException e1) {
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			}
		  panel_0.add(genePanel,"p4");
		  //函数面板----------------------------------
		 
		  functionPanel.setBorder(null);
		  functionPanel.setVisible(false);
		  try {
				for (int i = 0; i < myGepService.getAvailableFunctions().size(); i++) {
					functionPanel.comboBox.addItem(myGepService.getAvailableFunctions().get(i).toString());
					
				}
			} catch (ClassNotFoundException e1) {
				
				e1.printStackTrace();
			} catch (InstantiationException e1) {
			   
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			}
		  functionPanel.comboBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					FunctionPanelController.functionComboBoxController(functionPanel.comboBox, functionPanel.JComboBoxOfSelectdFunctions);
				}	
			});
			
	      panel_0.add(functionPanel,"p5");
	      
	      //保存配置面板-------------------------------
	      
	      scfigNamePanel.setSize(659, 399);
	      scfigNamePanel.setVisible(false);
	      scfigNamePanel.btnSave.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					SaveConfigPanelController.btnSaveController(myGepService, myParameter, outputPanel, scfigNamePanel, treePanel,panel_0);
				}
			});
	      contentPane.add(scfigNamePanel);
	      //----------------------------------------
	      uploadInterfacePanel.setBounds(165, 115, 659, 450);
	      uploadInterfacePanel.setVisible(false);
	      contentPane.add(uploadInterfacePanel);
	      inputFilePanel.setBounds(165, 115, 659, 455);
	      inputFilePanel.setVisible(false);
	      contentPane.add(inputFilePanel);
	      //底部按钮面板-----------------------------------
	      
	      footPanel.setBounds(165, 520, 659, 50);
	      footPanel.btnBefore.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		count=FooterPanelController.btnBeforeController(treePanel.Node,treePanel.tree_1,footPanel.btnNext,footPanel.btnBefore,panel_0,card,count);
		    	}
		      });
	      footPanel.btnRun.setEnabled(false);
	      
	      footPanel.btnRun.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		   
		    		    ModelForJPanelConfig config=new ModelForJPanelConfig(jcomboBoxConfiguration.getSelectedItem().toString());
		    		    ModelForJPanelInputPath inputPath=new ModelForJPanelInputPath(inputFilePanel.txtInputPath.getText(),stopSettingPanel.txtMaxGeneration.getText(),stopSettingPanel.txtAccuracy.getText());
		    		    int creatorSelectedIndex = populationPanel.JcomboBoxOfPopulationCreator.getSelectedIndex();
		    		    System.out.print("ww"+creatorSelectedIndex);
						int calculatorSelectedIndex = populationPanel.JComboBoxAvailableCalculator.getSelectedIndex();
						int strategySelectedIndex =populationPanel.JComboBoxofSelectionStrategy.getSelectedIndex();;
					    ModelForJPanelPopulation population=new ModelForJPanelPopulation(populationPanel.txtPopulationSize.getText(), populationPanel.txtSelectionRange.getText(), creatorSelectedIndex, strategySelectedIndex,calculatorSelectedIndex);
					   //--------
					    int modifyingSelectedIndex = genePanel.JComboBoxOfAvailableModifyings.getSelectedIndex();
					    ModelForJPanelGEne gene=new ModelForJPanelGEne(genePanel.txtNormalGeneNumber.getText(), genePanel.txtNormalHeaderLength.getText(), genePanel.txtHomeoticGeneNums.getText(),genePanel.txtHomeoticHeaderLength.getText(), genePanel.txtGeneRecombineRate.getText(), genePanel.txtRisTransportRate.getText(), genePanel.txtofRisElement.getText().trim(),genePanel.txtIsTransportRate.getText() ,genePanel.txtofRisElement.getText().trim(),genePanel.txtGeneTransportRate.getText() ,genePanel.txtMutateRate.getText(),genePanel.txtTwoPointRecombineRate.getText(),genePanel.txtGeneOnePointRecombineRate.getText(),modifyingSelectedIndex);
		    		    //----
					    StringBuffer result = new StringBuffer();
						String str = new String();
						
						for (int i = 0; i < functionPanel.JComboBoxOfSelectdFunctions.getItemCount(); i++) {
							if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i).toString()
									.equals("+")) {
								str = "domain.service.alg.userdefined.Additioin";

							} else if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i)
									.toString().equals("-")) {
								str = "domain.service.alg.userdefined.Minus";

							} else if (functionPanel.JComboBoxOfSelectdFunctions.getItemAt(i)
									.toString().equals("*")) {
								str = "domain.service.alg.userdefined.Multiply";

							} else {
								str = "domain.service.alg.userdefined.Divide";

							}

							result.append(str + ",");
						}
						System.out.println("函数"+result.toString());
					    ModelForJPanelFunction function=new ModelForJPanelFunction(result);
					    
					    /**
					     * 点击执行计算按钮触发
					     */
					    if(FooterPanelController.btnRunController(config, inputPath, population, gene, function, myParameter, myGepService, myConfigurationFromDB, flag)==true){
					    	outputPanel.setVisible(true);//显示输出面板
					    	panel_0.setVisible(false);
		    				treePanel.setVisible(false);
		    				footPanel.setVisible(false);
		    				jcomboBoxConfiguration.setVisible(false);
		    		    }
		    		    else{
		    		    	
		    		    	JOptionPane.showMessageDialog(null, "配置文件已更改请重新保存");
     	    		    	panel_0.setVisible(false);
							jcomboBoxConfiguration.setVisible(false);
							footPanel.setVisible(false);
							scfigNamePanel.setVisible(true);
		    		    }
					    
					    OutputPanelController.drawPicture(myGepService, outputPanel);
					    
					    jcomboBoxConfiguration.setVisible(true);
					    
					    
					    
		    	}
		      });
	      
	      
	      footPanel.btnNext.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent e) {
		    		count=FooterPanelController.btnNextController(treePanel.Node,treePanel.tree_1,footPanel,panel_0,card,count);
		    	}
		      });
	      contentPane.add(footPanel);
	      //------------------------------------------------
	      
	      
	      OutputPanelController.init(outputPanel);
	      outputPanel.setBounds(5,115,822,530);
	      outputPanel.setVisible(false);
	      outputPanel.btnNewButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					outputPanel.setVisible(false);
					panel_0.setVisible(true);
					footPanel.setVisible(true);
					treePanel.setVisible(true);
				}
			});
	      contentPane.add(outputPanel);
	      //菜单面板---------------------------------------
	     
	      
	        treePanel=new JPanelForJTree();
			treePanel.setBounds(5, 115, 155, 455);
			final JPanel[] panels={configurationPanel,stopSettingPanel,populationPanel,genePanel,functionPanel,uploadInterfacePanel,inputFilePanel,outputPanel,panel_0,footPanel,treePanel};
			treePanel.tree_1.addMouseListener(new MouseAdapter(){
				public void mousePressed(MouseEvent e) {
					count=TreePanelController.treeMouseListener(e, panels,footPanel.btnBefore,footPanel.btnNext,count);
				}
			});
		    contentPane.add(treePanel);
	      
	}
}

ui\output\controller\OutputPanelController.java
package ui.output.controller;

import ui.output.view.JPanelForOutput;
import com.wolfram.jlink.KernelLink;
import com.wolfram.jlink.MathCanvas;
import com.wolfram.jlink.MathLinkException;
import com.wolfram.jlink.MathLinkFactory;

import domain.core.algOutput.Individual;
import domain.core.algmodel.population.GepAlgorithm;
import domain.core.outputmodel.AlgInstance;
import domain.iservice.IgepAlgService;
import domain.iservice.IgepOutputService;
import domain.service.alg.baseclass.Calculator;
import domain.service.output.GepOutputService;


/**
 * 输出Panel的控制器
 * @author 滕凌哲
 */
public class OutputPanelController {
	
	static KernelLink ml = null;
	
	MathCanvas mathCanvasA;
	MathCanvas mathCanvasB;
	
	public OutputPanelController() {
	}
	
	public static void init(JPanelForOutput outputPanel){
		
		try {
			ml = MathLinkFactory
			.createKernelLink("-linkmode launch -linknam